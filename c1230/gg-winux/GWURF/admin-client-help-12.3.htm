<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>AdminClient Commands</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="These are the AdminClient commands that you can use including examples." />
<meta name="dcterms.created" content="2018-09-07T12:04:07Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Fusion Middleware Reference for Oracle GoldenGate" />
<meta name="dcterms.identifier" content="E81608-08" />
<meta name="dcterms.isVersionOf" content="GWURF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2013, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="http://docs.oracle.com/goldengate/c1230/gg-winux/index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="oracle-goldengate-admin-client-commands.htm" title="Previous" type="text/html" />
<link rel="Next" href="oracle-goldengate-common-components.htm" title="Next" type="text/html" />
<link rel="alternate" href="GWURF.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-921CBD5C-BBF9-4C46-ABBF-9DE27BC993BC"></a> <span id="PAGE" style="display:none;">67/356</span> <!-- End Header -->
<h1 id="GWURF-GUID-921CBD5C-BBF9-4C46-ABBF-9DE27BC993BC" class="sect1"><span class="enumeration_section">5.1</span> AdminClient Commands</h1>
<div>
<p>These are the AdminClient commands that you can use including examples.</p>
<pre dir="ltr">
-------------------------------------------------
!
Use the ! command to execute a previous AdminClient command without modifications. To 
display a list of previous commands, use the HISTORY command (see HISTORY). 
The ! command without arguments executes the most recent command. Options enable 
you to execute any previous command by specifying its line number substring. Previous 
commands can be executed again only if they were issued during the current session of 
AdminClient, because command history is not maintained from session to session. 

n 

Executes the command from the specified AdminClient line. Each AdminClient 
command line is sequenced, beginning with 1 at the start of the session. 

!

Examples 

Example 1 
! 9 


-------------------------------------------------
ADD CHECKPOINTTABLE 

Not valid for Replicat for Java, Oracle GoldenGate Applications Adapter, or 
Oracle GoldenGate for Big Data. 

Use ADD CHECKPOINTTABLE to create a checkpoint table in the target database. 
Replicat uses the table to maintain a record of its read position in the trail 
for recovery purposes. 

The use of a checkpoint table is strongly recommended, because it causes 
checkpoints to be part of the Replicat transaction. This allows Replicat to 
recover more easily in certain circumstances than when a checkpoint file alone 
is used. However, do not use a checkpoint table when configuring Replicat to 
operate in integrated mode against an Oracle target database. It is not 
required in that mode. 

One table can serve as the default checkpoint table for all Replicat groups in 
an Oracle GoldenGate instance if you specify it with the CHECKPOINTTABLE parameter 
in a GLOBALS file. More than one instance of Oracle GoldenGate (multiple installations)
can use the same checkpoint table. Oracle GoldenGate keeps track of the checkpoints 
even when the same Replicat group name exists in different instances. 

Use the DBLOGIN command to establish a database connection before using this command. 
Do not change the names or attributes of the columns in this table. You may, however, 
change table storage attributes. 

For more information about using a checkpoint table, see Administering Oracle GoldenGate. 


table-name 

The name of the checkpoint table to be created. The name cannot contain any 
special characters, such as quotes, backslash, dollar sign, and percent symbol. 

Record the name of the table, because you will need it to view statistics or delete the 
table if needed. 

Example 

ADD CHECKPOINTTABLE ggs.fin_check 

-------------------------------------------------
ADD DISTPATH 

Use ADD DISTPATH to create a distribution path. 

path-name

The unique name of the distribution path you want to add.

source-uri

Specifies the source URI after SOURCE keyword to indicate where the data 
is originated. The format of this URI contains the protocol
(currently only supports trail), hostname, port number of distribution server,
and location of the source trail files.

target-uri

Specifies the target URI after TARGET keyword to indicate where the data 
will be sent to. The format of this URI contains the protocol (currently only 
supports legacy ogg protocol, web socket ws protocol, and 
secure web socket wss protocol), hostname, port number of receiver server, 
and location of the target trail files.

TARGETTYPE

Specifies the target type in case the distribution path uses the legacy potocol. 
This argument is only valid if the target URI schema is 'ogg://'.

Choose MANAGER if the target is a legacy deployment with a manager running.

Choose COLLECTOR if the target is a legacy deployment with a static collector running. 

Choose RECVSRVR if the target is an Microservices Architecture deployment with a Receiver Server running. 

Examples

Example 1 

ADD DISTPATH path1  SOURCE trail://localhost:9002/services/v2/sources?trail=a1 
                    TARGET wss://localhost:9003/services/v2/targets?trail=t1 

Example 2

The target trail must specify the directory that contains your trail files. The default
dirdat directory is used in this example.

ADD DISTPATH path1  SOURCE trail://localhost:9002/services/v2/sources?trail=a1 
                    TARGET ogg://localhost:9003/services/v2/targets?trail=dirdat/t1 
                    TARGETTYPE MANAGER

Example 3

A fully-qualified alias. 

ws://domain+alias@host:port   

Example 4

An alias from a default domain.
ws://alias@host:port

Example 5

A credential store is not used; DS base64-encode user:password into the 
Authorization header.

ws://user:passwd@host:port

                    
-------------------------------------------------
ADD EXTRACT 

Use ADD EXTRACT to create an Extract group. Oracle GoldenGate supports up to 5,000 
concurrent Extract and Replicat groups per instance of Oracle GoldenGate. At the 
supported level, all groups can be controlled and viewed in full with commands such 
as the INFO and STATUS commands. Oracle GoldenGate recommends keeping the combined 
number of Extract and Replicat groups at the default level of 300 or below in order 
to manage your environment effectively. 

group-name 
The name of the Extract group. The name of an Extract group can contain 
up to eight characters. 

SOURCEISTABLE 

Creates an Extract task that extracts entire records from the database 
for an initial load using the Oracle GoldenGate direct load method or 
the direct bulk load to SQL*Loader method. If SOURCEISTABLE is not 
specified, ADD EXTRACT creates an online change-synchronization process, 
and one of the other data source options must be specified. When using 
SOURCEISTABLE, do not specify any service options. Task parameters 
must be specified in the parameter file. 

For more information about initial load methods, see Administering Oracle 
GoldenGate. 

TRANLOG

Specifies the transaction log as the data source; for classic capture only.

INTEGRATED TRANLOG 

Adds this Extract in integrated capture mode. In this mode, Extract 
integrates with the database logmining server, which passes logical change 
records (LCRs) directly to Extract. Extract does not read the redo log. After 
using INTEGRATED TRANLOG, use the REGISTER EXTRACT command. For information 
about integrated capture, see Using Oracle GoldenGate 
for Oracle Database. 

BEGIN {NOW | begin-datetime} 
Specifies a timestamp in the data source at which to begin processing. 

    NOW 

    NOW specifies the time at which the ADD EXTRACT command is issued. 

    YYYY-MM-DDThh:mm:ssZ

    A date and time (timestamp) in the given form. For example, 2017-07-14T14:54:45Z. 

EXTSEQNO sequence-number 

Valid for a primary Extract in classic capture mode for Oracle. Not supported 
for an Oracle Extract in integrated mode. Specifies the sequence number of an 
Oracle redo log at which to begin capturing data. Contact Oracle Support before 
using this option. 

EXTRBA offset-number 

Specifies the relative byte address within a transaction 
log at which to begin capturing data. 

SCN

Starts Extract at the transaction in the redo log 
that has the specified Oracle system change number (SCN). This option 
is valid for Extract both in classic capture and integrated modes. 

THREADS threads-number 

Valid for classic capture mode. Specifies the number of producer 
threads that Extract maintains to read redo logs. 
Required in an Oracle RAC configuration to specify the number of producer 
threads. These are the Extract threads that read the different redo logs 
on the various RAC nodes. The value must be the same as the number of nodes 
from which you want to capture redo data. 

DESC description 

Specifies a description of the group, such as 'Extracts account_tab on 
Serv1'. Enclose the description within single quotes. 

Examples 

Example 1

The following creates an integrated capture Extract group. 
ADD EXTRACT finance, INTEGRATED TRANLOG, BEGIN NOW 

Example 2 

The following creates an initial-load Extract named load. 

ADD EXTRACT load, SOURCEISTABLE 

Example 3 

The following examples create and position Extract at a specific Oracle 
system change number (SCN) in the redo log. 

ADD EXTRACT finance INTEGRATED TRANLOG SCN 123456 


-------------------------------------------------
ADD EXTTRAIL 


Use ADD EXTTRAIL to create a trail for online processing on the local 
system and: 

* Associate it with an Extract group. 

* Assign a maximum file size. 

trail-name  

The relative or fully qualified path name of the trail. The trail 
name can contain only two characters. Oracle GoldenGate appends this 
name with a nine-digit sequence number whenever a new file is created. 
For example, a trail named var/lib/data/tr would have files named 
var/lib/data/tr000000001, var/lib/data/tr000000002, and so forth.  

group-name 

The name of the Extract group to which the trail is bound. Only one Extract 
process can write data to a trail. 

MEGABYTES megabytes-number
 
The maximum size, in megabytes, of a file in the trail. The default is 500. 

SEQNO sequence-number 

Specifies that the first file in the trail will start with the specified 
trail sequence number. Do not include any zero padding. For example, to 
start at sequence 3 of a trail named tr, specify SEQNO 3. The actual file 
would be named /ggs/var/lib/data/tr000000003. This option can be used during 
troubleshooting when Replicat needs to be repositioned to a certain trail 
sequence number. It eliminates the need to alter Replicat to read the 
required sequence number. 

Example

ADD EXTTRAIL /ggs/var/lib/data/aa, EXTRACT finance, MEGABYTES 200 


-------------------------------------------------
ADD HEARTBEATTABLE 


Use ADD HEARTBEATTABLE to create the objects necessary to use the automatic 
heartbeat functionality. This command: 

* creates a heartbeat seed table, heartbeat table, and heartbeat history table, 

* creates the GG_LAG and GG_LAG_HISTORY views, 

* creates the GG_UPDATE_HB_TAB and GG_PURGE_HB_TAB procedures that are called by 
the scheduler jobs, 

* creates the scheduler jobs that periodically update the heartbeat and seed table, 
and purge the history table, 

* populates the seed table. 


The default seed, heartbeat, and history table names are GG_HEARTBEAT_SEED, GG_HEARTBEAT,
and GG_HEARTBEAT_HISTORY respectively. The tables, procedures, and scheduler jobs are 
created in the GGSCHEMA mentioned in GLOBALS file. The default names can be overridden 
by specifying HEARTBEATTABLE hbschemaname.hbtablename in the GLOBALS file. In this 
case, the tables, procedures, and jobs are created in the schema, hbschemaname. The 
seed and history table are created by appending a _SEED and _HISTORY to the table, 
hbtablename. 

This command requires a DBLOGIN. On a CDB database, a PDB login is required. 

The ADD HEARTBEATTABLE has to be performed in every PDB that you want 
to generate heartbeats for in CDB mode. 


FREQUENCY frequency-seconds-number 

Specifies how often the heartbeat seed table and heartbeat table are updated. 
For example, how frequently heartbeat records are generated. The default is 
60 seconds. 

RETENTION_TIME retention-days-number 

Specifies when heartbeat entries older than the retention time in the history 
table are purged. The default is 30 days. 

PURGE_FREQUENCY purge-frequency-days-number 

Specifies how often the purge scheduler is run to delete table entries that 
are older than the retention time from the heartbeat history. The default 
is 1 day. 

PARTITIONED 

Enables partitioning on the heartbeat history table. The column for the heartbeat 
time stamp received is used to partition the table with an interval of one day. 
By default the heartbeat history table is not partitioned.

NOADDTRANDATA 

Disables supplemental logging for the heartbeat table and the heartbeat seed table. 
By default supplemental logging is enabled for both tables. This options not available
with SQL Server.

TARGETONLY 

Disables supplemental logging on both heartbeat seed and heartbeat tables and it 
does not create scheduler job for updating heartbeat table. 


Examples 

Example 1 

The following command creates default heartbeat tables, procedures, and jobs. 

ADD HEARTBEATTABLE 

Example 2 

The following command creates the heartbeat tables, procedures, and jobs with 
custom frequency, retention time, and purge frequency. 

ADD HEARTBEATTABLE, frequency 120, retention_time 10, purge_frequency 2 

Example 3 

ADD HEARTBEATTABLE PARTITIONED 

It will setup all the heartbeat tables and the heartbeat history table 
will be partitioned.

Example 4 

ADD HEARTBEATTABLE NOADDTRANDATA 

It will setup all the heartbeat tables and supplemental logging will be disabled 
for the heartbeat table and heartbeat seed table.


-------------------------------------------------
ADD MASTERKEY 

Use the ADD MASTERKEY command to add a master key to a master-key wallet.
The master key is used by Extract and Replicat to encrypt the encryption 
keys that secure data being sent across the network and in the trail files, 
so that those keys can be sent to, and used, by downstream processes. The 
master key omits the need to use wallet storage for the keys that actually 
encrypt the data. 

The wallet remains open throughout the same session in which the command was 
issued. 

The successful completion of this command returns a message similar to 
the following: 

2017-07-11T12:40:03Z ERROR OGG-06137 Master key 'OGG_DEFAULT_MASTERKEY' does not 
exist in Oracle Wallet: '/u02/ogg/Local/var/lib/wallet/cwallet.sso'.
2017-07-11T12:40:03Z INFO OGG-06142 Created version 1 of master key 
'OGG_DEFAULT_MASTERKEY' in Oracle Wallet '/u02/ogg/Local/var/lib/wallet/cwallet.sso'.

OGG (http://localhost:9100 Local) 6 add masterkey
2017-07-11T12:41:20Z INFO OGG-06143 Master key 'OGG_DEFAULT_MASTERKEY' already 
exists in Oracle Wallet 'Local'. 

After adding a master key to a wallet that is not maintained centrally on 
shared storage, the updated wallet must be copied to all of the other 
systems in the Oracle GoldenGate configuration that use this wallet. 
Before doing so, Extract must be stopped and then all of the downstream 
Oracle GoldenGate processes must be allowed to finish processing their 
trails and then be stopped. After the wallet is copied into place, the 
processes can be started again. For detailed instructions, see Administering 
Oracle GoldenGate. 

Example 

ADD MASTERKEY 


-------------------------------------------------
ADD PROCEDURETRANDATA 


Enables procedure-level supplemental logging on Oracle database. 

Example 

ADD PROCEDURETRANDATA 


-------------------------------------------------
ADD REPLICAT 

Use ADD REPLICAT to create a Replicat group. Unless SPECIALRUN is specified, 
ADD REPLICAT creates an online process group that creates checkpoints so 
that processing continuity is maintained from run to run. 

Oracle GoldenGate supports up to 5,000 concurrent Extract and Replicat groups 
per instance of Oracle GoldenGate. At the supported level, all groups 
can be controlled and viewed in full with commands such as the INFO and 
STATUS commands. Oracle GoldenGate recommends keeping the number of Extract and 
Replicat groups (combined) at the default level of 300 or below in order to 
manage your environment effectively. 
Unless the INTEGRATED 
option is used, this command creates a Replicat group in non-integrated mode. 

group_name 

The name of the Replicat group. The name of a coordinated or parallel Replicat group
can contain a maximum of five characters. The name of a regular Replicat 
group can contain up to eight characters. 

INTEGRATED 

Creates the Replicat in integrated mode. Without this option, 
ADD REPLICAT creates the Replicat in non-integrated (classic) mode. In this 
mode, the Replicat process leverages the apply processing functionality that 
is available within the Oracle database. In this mode, Replicat operates 
as follows: 

* Reads the Oracle GoldenGate trail. 

* Performs data filtering, mapping, and conversion. 

* Constructs logical change records (LCR) that represent source database DML 
or DDL transactions (in committed order). 

* Attaches to a background process in the target database known as a database 
inbound server by means of a lightweight streaming interface. 

* Transmits the LCRs to the inbound server, which applies the data to the 
target database. 


Do not use INTEGRATED with the SPECIALRUN or EXTFILE options. INTEGRATED must 
be used for an online change-synchronization Replicat that reads from a local 
EXTTRAIL-specified trail. 
Integrated Replicat does not require a checkpoint table (ADD CHECKPOINTTABLE 
command and CHECKPOINTTABLE parameter). When in integrated mode, Replicat does n
ot support the following parameters: 

* BULKLOAD(Do not use integrated Replicat as an initial-load Replicat.) 

* SPECIALRUN 

* GENLOADFILES 

* SHOWSYNTAX 

* MAXTRANSOPS(is ignored) 

PARALLEL 

Adds the Replicat in parallel mode. In this mode, Replicat applies transactions in 
parallel to improve the performance. It takes into account dependencies between 
transactions. PARALLEL INTEGRATED adds the parallel Replicat in integrated mode, 
which like Integrated Replicat leverages the apply processing functionality that is 
available within the Oracle Database. You must use a checkpointtable with this Replicat.
For details on parameters that can be used with Parallel Replicat and Parallel 
Integrated Replicat, see "Summary of Replicat Parameters" in Reference for 
Oracle GoldenGate.

COORDINATED [maxthreads-number] 

Creates the Replicat in coordinated mode. A coordinated Replicat is 
multithreaded to enable parallel processing. This option adds the coordinator 
(identified by the group name itself) and the maximum number of processing 
threads that are specified by default or with MAXTHREADS. Dependencies are 
computed and coordinated by the coordinator, and the SQL processing is 
performed by the threads. 

To create a COORDINATED Replicat, a checkpoint table is required.

Do not use COORDINATED with the SPECIALRUN or EXTFILE options. COORDINATED 
must be used for an online change-synchronization Replicat that reads from
a local EXTTRAIL-specified trail. For more information about coordinated 
Replicat, see Administering Oracle GoldenGate. 

 Note: 
 The group name of a coordinated Replicat can contain only 
 five characters. 

    maxthreads-number
    
    Specifies the maximum number of processing threads that this Replicat 
    group can spawn. These threads are all created on startup, but depending 
    on what is specified in the MAP statements in the parameter file, some or 
    all of these threads will process the workload at any given time. As a 
    general rule, specify twice the number of threads that you specify in the 
    MAP statements when you partition the workload. This allows you to add 
    threads in the event that the workload increases, without having to drop 
    and recreate the Replicat group. 

    The default number of threads is 25 if maxthreads is omitted. The maximum 
    number of threads is 500. 

    The maxthreads option has a relationship to the MAXGROUPS parameter. MAXGROUPS controls 
    the maximum number of process groups (Extract and Replicat) allowed per 
    instance of Oracle GoldenGate. Each Replicat thread is considered a Replicat 
    group in the context of MAXGROUPS. Therefore, the number of Extract and 
    Replicat groups in the Oracle GoldenGate instance, plus the value of 
    maxthreads, cannot exceed the value of MAXGROUPS.  

SPECIALRUN 

Creates a Replicat special run as a task. Either SPECIALRUN, EXTFILE, or 
EXTTRAIL is required. When Extract is in SPECIALRUN mode, do not start 
Replicat with the START REPLICAT command. Do not use this option 
with the INTEGRATED or COORDINATED option. 

EXTFILE file-name 

Specifies the relative or fully qualified name of an Extract file that is 
specified with RMTFILE in the Extract parameter file. Do not use this option 
with the INTEGRATED option. 

EXTTRAIL trail-name 

Specifies the relative or fully qualified name of a trail that was created 
with the ADD RMTTRAIL or ADD EXTTRAIL command. 

BEGIN {NOW | begin-datetime } 

Defines an initial checkpoint in the trail. 

    NOW 
    Begins replicating changes from the time when the group is created. 

    begin-datetime 
    Begins extracting changes from a specific time. 

EXTSEQNO sequence-number 

Specifies the sequence number of the file in a trail in which to begin 
processing data. Specify the sequence number, but not any zeroes used for 
padding. For example, if the trail file is ggs/var/lib/data/aa000026, you 
would specify EXTSEQNO 26. If not specified, the default value is zero.
By default, processing begins at the beginning of a trail unless this option 
is used. Contact Oracle Support before using this option. 

EXTRBA offset-number 

Specifies the relative byte address within the trail file that is specified 
by EXTSEQNO. Contact Oracle Support before using this option. 

CHECKPOINTTABLE table-name

Not valid for Oracle GoldenGate Applications Adapter or Oracle GoldenGate for 
Big Data. 

Specifies that this Replicat group will write checkpoints to the specified 
table in the database. Include the owner and table name, as in hr.hr_checkpoint.
This argument overrides any default CHECKPOINTTABLE specification in the GLOBALS 
file. The table must first be added with the ADD CHECKPOINTTABLE command. Do not 
use this option with the INTEGRATED option. 

DESC description 

Specifies a description of the group, such as 'Loads account_tab on Serv2'. 
Enclose the description within quotes. 

Examples 

Example 1 

ADD REPLICAT sales, EXTTRAIL var/lib/data/rt 

Example 2 

ADD REPLICAT sales, INTEGRATED, EXTTRAIL var/lib/data/rt 

Example 3 

This example creates Replicat in coordinated mode. It indicates that up 
to 100 threads can be employed in parallel at any given point in processing. 

ADD REPLICAT sales, COORDINATED MAXTHREADS 100, EXTTRAIL var/lib/data/rt 

-------------------------------------------------
ADD RMTTRAIL 

Use ADD RMTTRAIL to create a trail for online processing on a remote system and: 

* Assign a maximum file size. 

* Associate the trail with an Extract group. 

In the parameter file, specify a RMTHOST entry before any RMTTRAIL entries 
to identify the remote system. 

    Note: 
    The RMTTRAIL size (Target Trail) must be greater than or equal to the 
    EXTTRAIL size (Source Trail), due to trail encryption requirements. 

trail-name 

The relative or fully qualified path name of the trail. The actual trail 
name can contain only two characters. Oracle GoldenGate appends this name 
with a nine-digit sequence number whenever a new file is created. For example, 
a trail named ./ var/lib/data/trwould have files named ./var/lib/data/tr000000001, 
./var/lib/data/ tr000000002, and so forth. 

group-name 

The name of the Extract group to which the trail is bound. Only one primary 
Extract process can write data to a remote trail. 
 
MEGABYTES megabytes-number 
 
The maximum size, in megabytes, of a file in the trail. The default is 500. 

SEQNO sequence-number 

Specifies that the first file in the trail will start with the specified 
trail sequence number. Do not include any zero padding. For example, to start 
at sequence 3 of a trail named tr, specify SEQNO 3. The actual file would 
be named /ggs/var/lib/data/ tr000000003. This option can be used during 
troubleshooting when Replicat needs to be repositioned to a certain trail 
number. It eliminates the need to alter Replicat
 to read the required 
sequence number. 

Example 

ADD RMTTRAIL var/lib/data/aa, EXTRACT finance, MEGABYTES 200 


-------------------------------------------------
ADD SCHEMATRANDATA 

Use ADD SCHEMATRANDATA to enable schema-level supplemental logging for a schema. 
ADD SCHEMATRANDATA acts on all of the current and future tables in a given 
schema to automatically log a superset of available keys that Oracle GoldenGate 
needs for row identification. 

ADD SCHEMATRANDATA does the following: 

* Enables Oracle supplemental logging for new tables created with a 
CREATE TABLE. 

* Updates supplemental logging for tables affected by an ALTER TABLE
to add or drop columns. 

* Updates supplemental logging for tables that are renamed. 

* Updates supplemental logging for tables for which unique or primary keys 
are added or dropped. 


By default, ADD SCHEMATRANDATA logs the key columns of a table in the 
following order of priority: 

1. Primary key 

2. In the absence of a primary key, all of the unique keys of the table, 
including those that are disabled, unusable or invisible. Unique keys that 
contain ADT member columns are also logged. Only unique keys on virtual 
columns (function-based indexes) are not logged. 

3. If none of the preceding exists, all scalar columns of the table are 
logged. (System generated row-OIDs are always logged.) 


ADD SCHEMATRANDATA also supports the conditional or unconditional logging 
requirements for using integrated Replicat. 

Use ADD SCHEMATRANDATA in the following cases: 

* For all tables that are part of an Extract group that is to be 
configured for integrated capture. ADD SCHEMATRANDATA ensures that the 
correct key is logged by logging all of the keys. 

* For all source tables that will be processed in an integrated Replicat 
group. Options are provided that enable the logging of the primary, unique, 
and foreign keys to support the computation of dependencies among relational 
tables being processed through different apply servers. 

* When DDL replication is active and DML is concurrent with DDL that creates 
new tables or alters key columns. It best handles scenarios where DML can be 
applied to objects very shortly after DDL is issued on them. ADD SCHEMATRANDATA
causes the appropriate key values to be logged in the redo log atomically with 
each DDL operation, thus ensuring metadata continuity for the DML when it is 
captured from the log, despite any lag in Extract processing. 

Database-level Logging Requirements for Using ADD SCHEMATRANDATA 
Oracle strongly encourages putting the source database into forced logging 
mode and enabling minimal supplemental logging at the database level when 
using Oracle GoldenGate. This adds row chaining information, if any exists, 
to the redo log for update operations. 

Additional Considerations for Using ADD SCHEMATRANDATA 

* Before using ADD SCHEMATRANDATA, issue the DBLOGIN command. The user who 
issues the command must be granted the Oracle Streams administrator privilege. 

SQL exec dbms_streams_auth.grant_admin_privilege('user') 

* ADD SCHEMATRANDATA can be used instead of the ADD TRANDATA command when DDL 
replication is not enabled. Note, however, that if a table has no primary key 
but has multiple unique keys, ADD SCHEMATRANDATA causes the database to log all 
of the unique keys. In such cases, ADD SCHEMATRANDATA causes the database to log 
more redo data than does ADD TRANDATA. To avoid the extra logging, designate one 
of the unique keys as a primary key, if possible. 

* For tables with a primary key, with a single unique key, or without a key, ADD
 SCHEMATRANDATA adds no additional logging overhead, as compared to ADD TRANDATA. 

* If you must log additional, non-key columns of a specific table (or tables) for 
use by Oracle GoldenGate, such as those needed for FILTER statements and KEYCOLS 
clauses in the TABLE and MAP parameters, issue an ADD TRANDATA command for those 
columns. That command has a COLS option to issue table-level supplemental logging 
for the columns, and it can be used in conjunction with ADD SCHEMATRANDATA. 

schema-name

The schema for which you want the supplementary key information to be logged. 
Do not use a wildcard. To issue ADD SCHEMATRANDATA for schemas in more than one 
pluggable database of a multitenant container database, log in to each pluggable 
database separately with DBLOGINand then issue ADD SCHEMATRANDATA. 

NOSCHEDULINGCOLS | ALLCOLS 

These options control supplemental logging for an Oracle target database. You can 
use these options together though the latter option is used. For example, with the 
ADD SCHEMATRANDATA oggadm_ext ALLCOL NOSCHEDULINGCOLS command the NOSCHEDULINGCOLS
option would be used. 

    NOSCHEDULINGCOLS 

    Disables the logging of scheduling columns. By default, ADD SCHEMATRANDATA
    enables the unconditional logging of the primary key and the conditional 
    supplemental logging of all unique key(s) and foreign key(s) of all current 
    and future tables in the given schema. Unconditional logging forces the primary 
    key values to the log whether or not the key was changed in the current 
    operation. Conditional logging logs all of the column values of a foreign or 
    unique key if at least one of them was changed in the current operation. The 
    integrated Replicat primary key, unique keys, and foreign keys must all be 
    available to the inbound server to compute dependencies. For more information 
    about integrated Replicat, see Using Oracle GoldenGate for 
    Oracle database. 

    ALLCOLS 

    Enables the unconditional supplemental logging of all supported key and non-key 
    columns for all current and future tables in the given schema. This option 
    enables the logging of the keys required to compute dependencies, plus columns 
    that are required for filtering, conflict resolution, or other purposes. Columns 
    like LOB, LONG, and ADT are not included. 

ALLOWNONVALIDATEDKEYS 

It includes NON VALIDATED and NOT VALID primary keys in the supplemental logging. 
These keys override the normal key selection criteria that is used by Oracle 
GoldenGate. If the GLOBALS parameter ALLOWNONVALIDATEDKEYS is being used, ADD 
SCHEMATRANDATA runs with ALLOWNONVALIDATEDKEYS whether or not it is specified. 
By default, NON VALIDATED and NOT VALID primary keys are not logged.

PREPARECSN {WAIT | LOCK | NOWAIT | NONE} 

Valid for Oracle for both DML and DDL. Automatically prepares the tables at the source 
so the Oracle Datapump Export dump file will includes Instantiation CSNs. Replicat uses 
the per table instantiation CSN set by the Oracle Datapump (on import) to filter out 
trail records.  

    WAIT 

    Wait for any in-flight transactions and prepare table instantiation. 

    LOCK 

    Put a lock on the table (to prepare for table instantiation). 

    NOWAIT 

    Default behavior, preparing for instantiation is done immediately. 

    NONE 

    No instantiation preparation occurs. 

Example 

The following enables supplemental logging for the schema scott. 

ADD SCHEMATRANDATA scott 


-------------------------------------------------
ADD TRACETABLE 

Use ADD TRACETABLE to create a trace table in the Oracle database. The trace table 
must reside in the schema of the Oracle GoldenGate Extract user, as configured with 
the USERID or USERIDALIAS parameter. The trace table prevents Replicat transactions 
from being extracted again in a bidirectional synchronization configuration. 

Use the DBLOGIN command to establish a database connection before using this command. 

The trace table has the following description. 

Description of trace table 

Name          Null?       Type            Description  
GROUP_ID      NOT NULL VARCHAR2(8)  The name of the Replicat group or special run process.  
DB_USER               VARCHAR2(30) The user ID of the Replicat group or special run process.  
LAST_UPDATE           DATE            The timestamp of the transaction.  

table-name 

Use to specify a trace table with a schema name that is different from the 
default of GGS_TRACE. The owner must be the same owner that is specified with the 
USERID or USERIDALIAS parameter in the Extract parameter file. 
To use the default name, omit this argument. Whenever possible, use the default table 
name. When using a trace table name other than the default of GGS_TRACE, specify it 
with the TRACETABLE parameter in the Extract and Replicat parameter files. Record the 
name, because you will need it for the parameter files and to view statistics or 
delete the table. 

Example

ADD TRACETABLE finance.ora_trace 


-------------------------------------------------
ADD TRANDATA 

Use ADD TRANDATA to enable Oracle GoldenGate to acquire the transaction information 
that it needs from the transaction records. 

Before using this command, use the DBLOGIN command to establish a database 
connection. 

For other supported databases, this functionality may exist already or must be 
configured through the database interface.

By default, ADD TRANDATA enables the unconditional logging of the primary 
key and the conditional supplemental logging of all unique key(s) and foreign key(s) 
of the specified table. 

If possible, use the ADD SCHEMATRANDATA command rather than the ADD TRANDATA command. 
The ADD SCHEMATRANDATA command ensures replication continuity should DML occur on an 
object for which DDL has just been performed. You can exclude objects from the 
schema specification by using the exclusion parameters. 

To use the Oracle GoldenGate DDL replication feature, you must use the ADD 
SCHEMATRANDATA command to log the required supplemental data. 

When using ADD SCHEMATRANDATA, you can use ADD TRANDATA with the COLS option to 
any non-key columns, such as those needed for FILTER statements and KEYCOLS clauses 
in the TABLEand MAP parameters. 

    Note: 
    It is possible to use ADD TRANDATA when DDL support is enabled, but 
    only if you can stop DML on all tables before DDL is performed on them or, if 
    that is not possible, you can guarantee that no users or applications will issue 
    DDL that adds new tables whose names satisfy an object specification in a TABLE
    or MAP statement. There must be no possibility that users or applications will 
    issue DDL that changes the key definitions of any tables that are already in 
    the Oracle GoldenGate configuration. 

Oracle recommends putting the source database into forced logging mode 
and enabling minimal supplemental logging at the database level when using Oracle 
GoldenGate. This adds row chaining information, if any exists, to the redo log for 
update operations.

Note the following: 

* If any of the logging details change after Oracle GoldenGate starts extracting 
data, you must stop and then start the Extract process that is reading from the 
affected table before any data is changed. 

* When creating a supplemental log group with ADD TRANDATA, Oracle GoldenGate 
appends the object ID to a prefix of GGS_, for example GGS_18342. 

Use he two-part or three-part name specification for all supported databases except an 
Oracle multitenant container database. A wildcard can be used for any component. 
Used with a wildcard, ADD TRANDATA filters out names that match the names of system 
objects. To use ADD TRANDATA for objects that are not system objects but have names 
that match those of system objects in a wildcard pattern, issue ADD TRANDATA for 
those objects without using a wildcard. 


NOSCHEDULINGCOLS | ALLCOLS 

These options satisfy the logging requirements of an integrated Replicat that will 
be processing the tables that you are specifying with ADD TRANDATA. 

NOSCHEDULINGCOLS 

Disables the logging of scheduling columns. By default, ADD TRANDATA enables the 
unconditional logging of the primary key and the conditional supplemental logging 
of all unique key(s) and foreign key(s) of the specified table. Unconditional logging 
forces the primary key values to the log whether or not the key was changed in the 
current operation. Conditional logging logs all of the column values of a foreign or 
unique key if at least one of them was changed in the current operation. The primary 
key, unique keys, and foreign keys must all be available to the inbound server to 
compute dependencies.

ALLCOLS 

Enables the unconditional supplemental logging of all of the key and non-key 
columns of the table. This option enables the logging of the keys required to 
compute dependencies, plus all other columns for use in filtering, conflict 
resolution, or other purposes. 

ALLOWNONVALIDATEDKEYS 

It includes NON VALIDATED and NOT VALID primary keys in the supplemental logging. 
These keys override the normal key selection criteria that is used by Oracle 
GoldenGate. If the GLOBALS parameter ALLOWNONVALIDATEDKEYS is being used, ADD 
SCHEMATRANDATA runs wit ALLOWNONVALIDATEDKEYS whether or not it is specified. 
By default, NON VALIDATED and NOT VALID primary keys are not logged.

PREPARECSN {WAIT | LOCK | NOWAIT | NONE} 

Automatically prepares the tables at the source so the Oracle Datapump Export 
dump file will includes Instantiation CSNs. Replicat uses the per table 
instantiation CSN set by the Oracle Datapump (on import) to filter out trail 
records. 

    WAIT 

    Wait for any in-flight transactions and prepare table instantiation. 
    
    LOCK 

    Put a lock on the table (to prepare for table instantiation). 

    NOWAIT 

    Default behavior, preparing for instantiation is done immediately. 

    NONE 

    No instantiation preparation occurs. 

Examples 

Example 1 

The following example causes the primary key to be logged for an Oracle table. 

ADD TRANDATA finance.acct 

Example 2 

The following example enables the unconditional supplemental logging of all of the 
key and non-key columns for the table named acct. 

ADD TRANDATA finance.acct ALLCOLS 

Example 3 

The following example adds logging though does not prepare the table for 
instantiation. 

ADD TRANDATA finance.acct PREPARECSN NONE 


-------------------------------------------------
ALLOWNESTED 

Use the ALLOWNESTED command to enable the use of nested OBEY files. A nested 
OBEY file is one that contains another OBEY file. There is no maximum of the
number of nested files.

The default behavior in AdminClient is to disallow nested OBEY files. 


-------------------------------------------------
ALTER CREDENTIALSTORE 

Use the ALTER CREDENTIALSTORE command to manage user ID and password pairs 
in the credential store. This command enables you to add credentials to the 
credential store and to specify different aliases for a user.  For more 
information about Oracle GoldenGate security options, see Administering 
Oracle GoldenGate. 

ADD USER userid 

Adds the specified user and its alias to the credential store. If the ALIAS
option is not used, the alias defaults to the user name. A credential can 
only be entered once unless the ALIAS option is used to specify a different 
alias for each one. Unless the PASSWORD option is used, the command prompts 
for the password of the specified user. The user can be an actual user name 
or a SQL*Net connect string. 

REPLACE USER userid 

Changes the password of the specified user. If the ALIAS option is not used, 
the alias defaults to the user name. You cannot change the alias or domain of 
a user with this option, but you can use the ADD USER option to add a new entry 
for the user under the desired ALIAS or DOMAIN. Unless the PASSWORD option is 
used, the command prompts for the new password for the specified user. 

DELETE USER userid 

Removes the credential for the specified user from the credential store. If 
the ALIAS option is not used, the alias defaults to the user name. 

PASSWORD password 

The user's password. The password is echoed (not hidden) when this 
option is used. If this option is omitted, the command prompts for the 
password, which is hidden as it is typed (recommended as more secure). 

ALTER CREDENTIALSTORE ADD USER scott 
Password: ******** 

ALIAS alias 

Specifies an alias for the user name. Use this option if you do not want 
the user name to be in a parameter file or command. If ALIAS is not used, 
the alias defaults to the USER name, which then must be used in parameter 
files and commands where a login is required. You can create multiple 
entries for a user, each with a different alias, by using the ADD USER option 
with ALIAS. 

DOMAIN domain 

Enables the same alias to be used by multiple Oracle GoldenGate installations 
that use the same credential store. The default domain is Oracle GoldenGate. 
For example, the administrators of system 1 might not want system 2 to have 
access to the same credentials that are used on system 1. Those credentials 
can be stored as ALIAS extract, for example, under DOMAIN system1, while a 
different set of credentials can be stored for ALIAS extractunder DOMAIN system2. 

Examples 

Example 1 

This example adds a user named scott but omits the PASSWORD specification, 
so the command prompts for Scott's password. 

ALTER CREDENTIALSTORE ADD USER scott 
Password: ******** 

Example 2 

This example adds the user scott with his password tiger and specifies an alias 
for scott that is named scsm2. 

ALTER CREDENTIALSTORE ADD USER scott PASSWORD tiger ALIAS scsm2 

Example 3 

This example adds the user scott under the domain of support. 

ALTER CREDENTIALSTORE ADD USER scott ALIAS scsm3 DOMAIN support 
Password: ******** 

Example 4
 
This example issues two ALTER CREDENTIALSTORE commands, each of which 
adds a scott entry, but with a different alias. 

ALTER CREDENTIALSTORE ADD USER scott ALIAS scsm2 
Password: ******** 
ALTER CREDENTIALSTORE ADD USER scott ALIAS scsm3 
Password: ******** 

Example 5 

The following shows how the DELETE USER option works with and without the 
ALIAS option. 

The following command deletes the user1 entry for which the ALIAS is the 
same as the user name. 

ALTER CREDENTIALSTORE DELETE USER user1 

The following command deletes the entry for user user1 that is associated 
with the alias alias1. 

ALTER CREDENTIALSTORE DELETE USER user1 ALIAS alias1 

Example 6 

This example uses a SQL*Net connect string as the user value. In this case, 
the PASSWORD option is omitted. The person issuing the command will be 
prompted for the password, which is hidden. 
ALTER CREDENTIALSTORE ADD USER oggext1@ora1 ALIAS ora1 


-------------------------------------------------
ALTER DISTPATH

Changes the attributes of a distribution path.

path-name 

The name of the distribution path. 

BEGIN {NOW | SEQNO sequence-number RBA relative-byte-address | begin-datetime} 
Specifies a timestamp in the data source at which to begin processing. 
    
    NOW 

    NOW specifies the time at which the ADD EXTRACT command is issued.

    sequence-number relative-byte-address
    
    The sequence number of an Oracle redo log and RBA within that log at which to begin 
    capturing data.

    begin-datetime

    A date and time (timestamp) in the given form. For an Extract in integrated mode, the 
    timestamp value must be greater than the timestamp at which the Extract was registered 
    with the database. 
    
TARGET options

At least one TARGET option must be specified.

CRITICAL option

Indicates that the distribution path is critical to the deployment. The default is false.

FILTER options 

At least one FILTER option must be specified.
By default the RELATION between the filters is OR and the action is KEEP. 

     CHUNKIDS chunk-ids

     Specify a rule to filter records by their chunk ID (sharding).
     The list of chunk IDs must be parenthesized and comma separated.

RULE options

At least one RULE option must be specified.

    Examples

    Example 1

    ALTER DISTPATH dp1 RULE FILTER CHUNKIDS (1, 2, 3)

OBJECTNAMES object-names 

    Specify a rule to filter records by their object name.
    The list of object names must be parenthesized and comma separated.
    An object name must follow the following grammar: [cdb-name.]schema-name.table-name 

     Example: ALTER DISTPATH dp1 RULE FILTER OBJECTNAMES (user1.table1, cdb1.user2.ta ble1)

    OBJECTTYPES [ DML ] [ DDL ] [ PROCEDURE ]

    Specify a rule to filter records by their object type.
    At least one object type must be specified. 

    TAGS binary-tags 

    Specify a rule to filter records by their tag.
    The list of tags must be parenthesized and comma separated.
    A tag must be a hexdecimal or binary value string and prefixed by
    the keywords 'HEXVALUE', 'HEXMASK', 'BINVALUE', 'BINMASK'. In case
    the tag is a BITMASK, the filter performs a bitwise AND operation 
          between the mask and the tag value of an LCR record. If the result
          is equal to the MASK, then the action is applied.

    Example: ALTER DISTPATH dp1 RULE FILTER TAGS (hexvalue A4, hexvalue 18,
    hexmask F0, hexvalue F8F, binvalue 01001100, binmask 0110)

    PROCEDUREFEATURENAMES feature-names

    Specify a rule to filter records by procedure feature name.
    The list of procedure feature names must be parenthesized and comma separated. 

    Example: ALTER DISTPATH dp1 RULE FILTER PROCEDUREFEATURENAMES (RAS, AUTOCDR, AQ)

    COLUMNVALUES column-values 

    Specify a rule to filter records by their column value.
    The filtering rules must follow this grammar and be comma separated:
    [cdb-name.]schema-name.table-name.column-name ( EQ | NE | LT | GT | LE | 
    GE ) column-value [ BEFORE | AFTER ]

    EQ = equal
    NE = not equal
    LT = less than
    GT = greater than
    LE = less or equal
    GE = grater or equal

    Example: ALTER DISTPATH dp1 RULE FILTER COLUMNVALUES (cdb1.user1.table1.col1 EQ 
          0 BEFORE, cdb2.user2.table1.col1 GT 100)

    Example 1

    ALTER DISTPATH path1 BEGIN NOW 

    Example 2

    ALTER DISTPATH path1 BEGIN SEQNO 1 RBA 10355

    Example 3 

    ALTER DISTPATH path1 OPTIONS AUTORESTART RETRIES 3 

    Example 4 

    ALTER DISTPATH path1 RULE FILTER OBJECTNAMES (CUST1.*, CUST2.*) ACTION EXCLUDE 

    Example 5 

    ALTER DISTPATH path1 RULE FILTER TAGS (AE00, MASK AB00, FF)

    Example 6 

    ALTER DISTPATH path1 RULE FILTER COLUMNVALUES (user1.t1.c1 NE nope, user1.t1.c2 
    EQ 3 AFTER, user1.t2.c1 GE 5, user1.t2.c2 GT 5 BEFORE) 
    
    Example 7-9
    ALTER DISTPATH path1 RULE FILTER OBJECTNAMES(CUST1.*,CUST2.*) RELATION AND ACTION EXCLUDE

OPTIONS options

At least one OPTIONS option must be specified.


-------------------------------------------------
ALTER EXTRACT 

Use ALTER EXTRACT for the following purposes: 

* To change the attributes of an Extract group created with the ADD 
EXTRACT command. 

* To increment a trail to the next file in the sequence. 

* To upgrade to an integrated capture configuration. 

* To downgrade from an integrated capture configuration. 

Before using this command, stop Extract with the STOP EXTRACT group_name 
command. 

group-name 

The name of the Extract group that is to be altered. 

BEGIN {NOW | begin-datetime} 
Specifies a timestamp in the data source at which to begin processing. Timestamps 
must follow the ISO8601 "2007-04-05T14:30:00Z" format.
    
    NOW 

    NOW specifies the time at which the ADD EXTRACT command is issued. 

    YYYY-MM-DDThh:mm:ssZ

    A date and time (timestamp) in the given form. For example, 2017-07-14T14:54:45Z. 
    For an Oracle Extract in integrated mode, the timestamp value must be greater 
    than the timestamp at which the Extract was registered with the database.
    
    If using the BEGIN option, do not combine other options in the statement.
    
Issue separate statements, for example:
 
ALTER EXTRACT finance, BEGIN 2017-07-14T14:54:45Z
ALTER EXTRACT finance, ETROLLOVER
ALTER EXTRACT finance, SCN 789000

    Positioning to an LSN is precise.

EXTSEQNO sequence-number 

Valid for a primary Extract in classic capture mode. Not supported for an 
Oracle Extract in integrated mode. Specifies either of the following: 

* sequence number of an Oracle redo log at which to begin capturing data. 

* Specify the sequence number, but not any zeroes used for padding. For 
example, if the trail file is ggs/var/lib/aa000026, you would specify 
EXTSEQNO 26. By default, processing begins at the beginning of a trail 
unless this option is used. Contact Oracle Support before using this option. 

EXTRBA offset-number 

Specifies the relative byte address within a transaction 
log at which to begin capturing data.  

SCN scn 

Starts Extract at the transaction in the redo log that has the specified 
Oracle system change number (SCN). This option is valid for Extract both 
in classic capture and integrated modes. For Extract in integrated mode, 
the SCN value must be greater than the SCN at which the Extract was 
registered with the database. If using the SCN or BEGIN option for 
Integrated Extract, it requires a DBLOGIN, and the SCN or timestamp 
value specified cannot be below the outbound server's first SCN or timestamp. 
To find the outbound server's first SCN, issue the following command: 

INFO EXTRACT group-name, SHOWCH DETAIL 

The first SCN value is listed as shown in the following example: 

Integrated Extract outbound server first scn: 0.665884 (665884) 

DESC description

A description of the distribution path.

UPGRADE INTEGRATED TRANLOG 

Upgrades the Extract group from classic capture to integrated capture. 
To support the upgrade, the transaction log that contains the start of 
the oldest open transaction must be available on the source or downstream 
mining system. 

DOWNGRADE INTEGRATED TRANLOG THREADS threads-number

Downgrades the Extract group from integrated capture to classic capture. 
When downgrading on a RAC system, the THREADS option must be used to specify 
the number of RAC threads. On a non-RAC system, you can optionally specify 
THREADS 1 to cause the downgraded classic Extract to run in threaded mode 
with one thread, which is similar to doing an ADD EXTRACT with THREADS 1 
on a non-RAC system. 

To support the downgrade, the transaction log that contains the start 
of the oldest open transaction must be available on the source or 
downstream mining system.

THREADS thread-number 

Valid for classic capture mode. In an Oracle RAC configuration, 
alters Extract only for the specified redo thread. Only one thread 
number can be specified. 

ETROLLOVER 

Causes Extract to increment to the next file in the trail sequence 
when restarting. For example, if the current file is ET000000002 the 
current file will be ET000000003 when Extract restarts. A trail can be 
incremented from 000000001 through 999999999, and then the sequence numbering 
starts over at 000000000. 

Examples 

Example 1 

The following alters Extract to start processing data from July 14, 2017 at
14:54. 

ALTER EXTRACT finance, BEGIN 2017-07-14T14:54:00Z

Example 2
 
The following alters Extract to start processing at a specific location 
in the trail. 

ALTER EXTRACT finance, EXTSEQNO 26, EXTRBA 338 

Example 3 

The following alters Extract in an Oracle RAC environment, and applies 
the new begin point only for redo thread 4. 

ALTER EXTRACT accounts, THREAD 4, BEGIN 2017-07-14T14:54:45Z

Example 4 

The following alters Extract to increment to the next file in the 
trail sequence. 

ALTER EXTRACT finance, ETROLLOVER 

Example 5 

The following alters Extract to upgrade to integrated capture. 

ALTER EXTRACT finance, UPGRADE INTEGRATED TRANLOG 

Example 6 

The following alters Extract to downgrade to classic capture in 
a RAC environment. 

ALTER EXTRACT finance, DOWNGRADE INTEGRATED TRANLOG THREADS 3 

Example 7 

The following alters Extract in an Oracle environment to start 
processing data from source database SCN 778899. 

ALTER EXTRACT finance, SCN 778899 


-------------------------------------------------
ALTER EXTTRAIL

Use ALTER EXTTRAIL to change the attributes of a trail that was created 
with the ADD EXTTRAIL command (a trail on the local system). The change 
takes effect the next time that Extract starts. 

group-name 

The name of the Extract group to which the trail is bound. 

MEGABYTES megabytes-number 

The maximum size of a file, in megabytes. The default is 500. After using 
this option, issue the SEND EXTRACT command with the ROLLOVER option to 
close the current trail file and open a new one. 

Example 

ALTER EXTTRAIL var/lib/data/aa, EXTRACT finance, MEGABYTES 200 


-------------------------------------------------
ALTER HEARTBEATTABLE 

Use ALTER HEARTBEATTABLE to alter existing seed, heartbeat, and history table 
options that you set with ADD HEARTBEATTABLE. 

This command requires a DBLOGIN. On a CDB database, a PDB login is required. 

FREQUENCY frequency-seconds-number

Alter frequency to zero (0) is equivalent to pausing the heartbeat. Heartbeat 
records can be resumed by altering frequency to a value greater than 0. 

RETENTION_TIME retention-days-number

Changes the heartbeat retention time specified, in days. 

PURGE_FREQUENCY purge-frequency-days-number

Changes the repeat interval, in days, of the purge heartbeat table.

TARGETONLY 

Modifies an existing the existing heartbeat seed and heartbeat 
tables by disabling supplemental logging on both tables and it drops the 
existing scheduler job for updating heartbeat table. 

NOTARGETONLY

Modifies an existing the existing heartbeat seed and 
heartbeat tables by enalbing supplemental logging on both tables and it 
creates a  scheduler job for updating heartbeat table.

Examples 

ALTER HEARTBEATTABLE FREQUENCY 60 

ALTER HEARTBEATTABLE RETENTION_TIME 30 

ALTER HEARTBEATTABLE PURGE_FREQUENCY 1 


-------------------------------------------------
ALTER REPLICAT

Use ALTER REPLICAT to change the attributes of a Replicat group that was 
created with the ADD REPLICAT command. Before using this command, stop 
Replicat by issuing the STOP REPLICAT command. If this is a coordinated 
Replicat group, the ALTER takes effect for all threads unless the threadID
option is used. 

    Note: 
    ALTER REPLICAT does not support switching from regular Replicat mode to 
    coordinated mode. You must stop processes, make certain all of the enroute 
    data is applied to the target, roll the trail to a new trail, drop and 
    recreate the Replicat group in coordinated mode, and then start the processes 
    again. 

group-name 

The name of the Replicat group of a coordinated Replicat that is 
to be altered. To specify a thread, use the full thread name, such as ALTER 
REPLICAT fin003, EXTSEQNO 53. If a thread ID is not specified, the ALTER takes 
effect for all threads of the Replicat group. 

INTEGRATED 

Switches Replicat from non-integrated mode to integrated mode. Transactions 
currently in process are applied before the switch is made.

NONINTEGRATED, CHECKPOINTTABLE table-name 

Switches Replicat from integrated mode to non-integrated mode. 

For CHECKPOINTTABLE, specify the owner and name of a checkpoint table. This 
table must be created with the ADD CHECKPOINTTABLE command before issuing ALTER 
EXTRACT with NONINTEGRATED. 

SPECIALRUN 

Creates a Replicat special run as a task. Either SPECIALRUN, EXTFILE, or 
EXTTRAIL is required. When Extract is in SPECIALRUN mode, do not start 
Replicat with the START REPLICAT command. Do not use this option 
with the INTEGRATED or COORDINATED option. 

EXTFILE file-name 

Specifies the relative or fully qualified name of an Extract file that is 
specified with RMTFILE in the Extract parameter file. Do not use this option 
with the INTEGRATED option. 

EXTTRAIL trail-name 

Specifies the relative or fully qualified name of a trail that was created 
with the ADD RMTTRAIL or ADD EXTTRAIL command. 

BEGIN {NOW | begin-datetime } 

Defines an initial checkpoint in the trail. 

    NOW 
    Begins replicating changes from the time when the group is created. 

    begin-datetime 
    Begins extracting changes from a specific time. 

EXTSEQNO sequence-number 

Specifies the sequence number of the file in a trail in which to begin 
processing data. Specify the sequence number, but not any zeroes used for 
padding. For example, if the trail file is ggs/var/lib/data/aa000026, you 
would specify EXTSEQNO 26. 
By default, processing begins at the beginning of a trail unless this option 
is used. To use EXTSEQNO, you must also use EXTRBA. Contact Oracle Support 
before using this option. 

EXTRBA offset-number 

Specifies the relative byte address within the trail file that is specified 
by EXTSEQNO. Contact Oracle Support before using this option. 

CHECKPOINTTABLE table-name | NODBCHECKPOINT 

Not valid for Oracle GoldenGate Applications Adapter or Oracle GoldenGate for Big 
Data. 

Specifies that this Replicat group will write checkpoints to the specified 
table in the database. Include the owner and table name, as in hr.hr_checkpoint.
This argument overrides any default CHECKPOINTTABLE specification in the GLOBALS 
file. The table must first be added with the ADD CHECKPOINTTABLE command. Do not 
use this option with the INTEGRATED option. 

NODBCHECKPOINT 

Specifies that this Replicat group will not write checkpoints to a checkpoint 
table. This argument overrides any default CHECKPOINTTABLE specification in the 
GLOBALS file. This argument is required if you do not want to use a checkpoint 
table with the Replicat group that is being created. Do not use this option with 
the INTEGRATED option. 

DESC description

Specifies a description of the group, such as 'Loads account_tab on Serv2'. 
Enclose the description within quotes. 

Examples 

Example 1 

ALTER REPLICAT sales, EXTTRAIL var/lib/data/rt 

Example 2 

ALTER REPLICAT sales, INTEGRATED, EXTTRAIL var/lib/data/rt 

Example 3 

This example alters Replicat in coordinated mode. It indicates that up 
to 100 threads can be employed in parallel at any given point in processing. 

ALTER REPLICAT sales, COORDINATED MAXTHREADS 100, EXTTRAIL var/lib/data/rt 

-------------------------------------------------
ALTER RMTTRAIL 

Use ALTER RMTTRAIL to change the attributes of a trail that was created 
with the ADD RMTTRAIL command (a trail on a remote system). The change takes 
effect the next time that Extract starts. 

trail-name 

The relative or fully qualified path name of the trail. For example, 
var/lib/data/aa. 

group-name 

The name of the Extract group to which the trail is bound. 

MEGABYTES megabytes-number 

The maximum size of a file, in megabytes. The default is 500. After using 
this option, issue the SEND EXTRACT command with the ROLLOVER option to close 
the current trail file and open a new one. 

Example 

ALTER RMTTRAIL var/lib/data/aa, EXTRACT finance, MEGABYTES 200 


-------------------------------------------------
CD 

Use CD to change the AdminClient working directory.

directory-name

The name of the directory. 

-------------------------------------------------
CLEANUP CHECKPOINTTABLE 

Not valid for Replicat for Java, Oracle GoldenGate Applications Adapter, or Oracle 
GoldenGate for Big Data. 

Use CLEANUP CHECKPOINTTABLE to remove checkpoint records from the checkpoint table 
when there is no checkpoint file associated with it in the working Oracle GoldenGate 
directory. The purpose of this command is to remove checkpoint records that are not 
needed any more, either because groups were changed or files were moved. 

Use the DBLOGIN command to establish a database connection before using this command. 

table-name 

The name of the checkpoint table to be cleaned up. 

Example 

CLEANUP CHECKPOINTTABLE ggs.fin_check 

-------------------------------------------------
CLEANUP EXTRACT 


Use CLEANUP EXTRACT to delete run history for the specified Extract 
group. The cleanup keeps the last run record intact so that Extract 
can resume processing from where it left off. Before using this command, 
stop Extract by issuing the STOP EXTRACT command. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. 
For example, T* cleans up all Extract groups whose names start with T. 

SAVE save-count-number 

Excludes the specified number of the most recent records from the cleanup. 

Examples 

Example 1 
The following deletes all but the last record. 

CLEANUP EXTRACT finance 

Example 2 
The following deletes all but the most recent five records. 

CLEANUP EXTRACT *, SAVE 5 


-------------------------------------------------
CLEANUP REPLICAT 

Use CLEANUP REPLICAT to delete run history for a specified Replicat group. 
The cleanup keeps the last run record intact so that Replicat can resume 
processing from where it left off. 

Before using this command, stop Replicat by issuing the STOP REPLICAT command. 

group-name-wildcard

The name of a Replicat group or a wildcard (*) to specify multiple groups. For 
example, T* cleans up all Replicat groups whose names begin with T. If the 
specified group (or groups) is a coordinated Replicat, the cleanup applies to 
all threads. 

save-count 

Excludes the specified number of the most recent records from the cleanup. 

Examples 

Example 1 

The following deletes all but the last record. 

CLEANUP REPLICAT finance 

Example 2 

The following deletes all but the most recent five records. 

CLEANUP REPLICAT *, SAVE 5 

Example 3 

The following deletes all but the most recent five records for thread 3 
of coordinated Replicat group fin. 

CLEANUP REPLICAT fin003, SAVE 5 

-------------------------------------------------
CONNECT 

Use this to connect to an Oracle GoldenGate Service Manager to execute 
other commands. You must connect to your Service Manager before you can 
execute most of the AdminClient commands.

AdminClient allowS connections when the server uses a self-signed certificate
though this is not the default. AdminClient does not allow connecting to a 
server through HTTPS when the self-signed certificate is invalid. To override this 
behavior, use the "!" modifier with the CONNECT command. 

For example, when using the AdminClient to connect to the Oracle GoldenGate 
Microservices Architecture services that are secured with a self-signed 
SSL certificate, you must use a command with the ! modifier:


CONNECT https://myserver.example.org as oggadmin !

server-url 

The URL of the Service Manager that you want to connect to.

deployment-name 

The name of the deployment that you want to connect to on the specified 
Service Manager.  If only one deployment (except for Service Manager) is 
defined, that deployment is the default. Otherwise, there is not a default 
deployment and the DEPLOYMENT deployment-name option must be used.

proxy-uri

The URI of your proxy server in the schema://hostname[:port-number] format.

user-name

The user name for the specified Service Manager.

password

The password for the specified user name. If you do not specify the password, 
you are prompted for it.

Example

connect http://prodserver.mysite.com:9700 deployment Atlanta_1 as oggadmin password welcome1


-------------------------------------------------
DBLOGIN USERIDALIAS

Use DBLOGIN to establish a database connection through AdminClient in preparation 
to issue other Oracle GoldenGate commands that affect the database. The user 
who issues DBLOGIN should have the appropriate database privileges to perform 
the functions that are enacted by those commands. Any other special privileges 
that are required for a AdminClient command are listed in the reference documentation 
for that command. 

Requirements When Configuring Extract or Replicat in Integrated Mode 

If using DBLOGIN to issue ADD EXTRACT, ALTER EXTRACT, or REGISTER EXTRACT to 
initiate integrated capture or ADD REPLICAT, ALTER REPLICAT, or REGISTER REPLICAT
to initiate integrated Replicat against an Oracle Database, the user who issues 
DBLOGIN must: 

* Have privileges granted through the Oracle dbms_goldengate_auth.grant_admin_privilege 
procedure. 

* Not be changed while Extract or Replicat is in integrated mode. 


Special Database Privileges to Use Log Retention in Classic Capture Mode 

When in classic capture mode for an Oracle Database, Extract supports the 
log-retention feature, whereby the database retains the logs that Extract 
needs. To enable the log-retention feature, DBLOGIN must be issued with special 
privileges before using REGISTER EXTRACT with the LOGRETENTION option. For 
simplicity, you can log in as the Extract database user if the correct 
privileges were granted to that user when Oracle GoldenGate was installed. 
Otherwise, log in as a user with the privileges shown in the following table. 

Oracle Privileges for Log Retention 
Oracle EE             How to Grant Privileges version 
11.1 and 11.2.0.1     1. Run package to grant Oracle GoldenGate admin privilege. 
                    exec dbms_streams_auth.grant_admin_privilege('user') 
                    2. Grant the 'become user' privilege. 
                    grant become user to user; 
11.2.0.2 and later     Run package to grant Oracle GoldenGate admin privilege. 
                    exec dbms_goldengate_auth.grant_admin_privilege('user') 

alias 

Specifies the alias of a database user credential that is stored in the 
Oracle GoldenGate credential store. To log into a pluggable database in 
an Oracle multitenant container database, the user must be stored as a 
connect string, such as OGGUSER@FINANCE. To log into the root container, 
the user must be stored as a common user, including the C## prefix, such as
C##GGADMIN@FINANCE. For more information about configuring Oracle GoldenGate
for a CDB. 

DOMAIN domain 

Specifies the credential store domain for the specified alias. A valid domain 
entry must exist in the credential store for the specified alias. The default 
domain is OracleGoldenGate.


Examples 

Example 1 

DBLOGIN USERIDALIAS alias1 

Example 2 

DBLOGIN USERIDALIAS alias1 DOMAIN domain1 


-------------------------------------------------
DELETE CHECKPOINTTABLE 


Not valid for Replicat for Java, Oracle GoldenGate Applications Adapter, or Oracle 
GoldenGate for Big Data. 

Use DELETE CHECKPOINTTABLE to drop a checkpoint table from the database. Use the DBLOGIN
command to establish a database connection before using this command. 

To stop using a checkpoint table while the associated Replicat group remains active, 
follow these steps: 

1. Run AdminClient. 

2. Stop Replicat. 

   STOP REPLICAT group 

3. Delete the Replicat group and then add it back with the following commands. 

   DELETE REPLICAT group 
   ADD REPLICAT group, EXTTRAIL trail, NODBCHECKPOINT 

4. Start Replicat again. 

   START REPLICAT group 

5. Log into the database with the DBLOGIN command, using the appropriate authentication 
options for the database. 

6. Delete the checkpoint table with DELETE CHECKPOINTTABLE. 

If the checkpoint table is deleted while Replicat is still running and transactions 
are occurring, Replicat will abend with an error that the checkpoint table could not 
be found. However, the checkpoints are still maintained on disk in the checkpoint file. 
To resume processing, add the checkpoint table back under the same name. Data in the 
trail resumes replicating. Then, you can delete the checkpoint table. 

table-name 

The name of the checkpoint table to be deleted. The schema and owner is required. 

! 
Bypasses the prompt that confirms intent to delete the table. 

Example 

DELETE CHECKPOINTTABLE ggs.fin_check 


-------------------------------------------------
DELETE CREDENTIALSTORE 

Use the DELETE CREDENTIALSTORE command to remove a credential store from 
the system. The credential store wallet and its contents are permanently 
deleted. 

The use of a credential store is not supported for the iSeries, z/OS, 
and NonStop platforms. For more information about Oracle GoldenGate security 
options, see Administering Oracle GoldenGate. 


-------------------------------------------------
DELETE DISTPATH 

Use DELETE DISTPATH to remove a distribution path. 

path-name 

The name of the distribution path.

Example DELETE DISTPATH path1


-------------------------------------------------
DELETE EXTRACT 

Use DELETE EXTRACT to delete an Extract group. This command deletes the 
checkpoint file that belongs to the group, but leaves the parameter file 
intact. You can then re-create the group or delete the parameter file as needed. 

Before using DELETE EXTRACT, stop Extract with the STOP EXTRACT command. 

To delete the trail files that are associated with the Extract group, use
the PURGE EXTTRAIL command. 

group-name-wildcard 

The name of an Extract group or a wildcard specification (*) to specify 
multiple groups. For example, T* deletes all Extract groups whose names 
start with T. 

! 
(Exclamation point) Deletes all Extract groups associated with a wildcard 
without prompting. 

-------------------------------------------------
DELETE EXTTRAIL


Use DELETE EXTTRAIL to delete the record of checkpoints associated with a 
trail on a local system. Checkpoints are maintained in a file bearing the 
same name as the group in a separate sub-directory of the Oracle GoldenGate 
directory. 

This command only deletes references to the specified trail from the checkpoint 
file. It does not delete the trail files themselves. To delete the trail files, 
use the PURGE EXTTRAIL command. 


trail-name 

The relative or fully qualified path name of the trail, including the 
two-character trail prefix. 

Example 

DELETE EXTTRAIL var/lib/data/et 


-------------------------------------------------
DELETE HEARTBEATENTRY 

Use DELETE HEARTBEATENTRY to delete the records in the heartbeat table with 
the specified process name either in the incoming or outgoing path columns. 
This command required a DBLOGIN. On a CDB database, a PDB login is required. 

group-name 

The name of the process to be cleaned. 

! 
(Exclamation point) Deletes all heartbeat table entries associated with a wildcard 
without prompting. 


-------------------------------------------------
DELETE HEARTBEATTABLE 

Use DELETE HEARTBEATTABLE to delete tables, procedures, schedulers, and views. 
This command requires a DBLOGIN. On a CDB database, a PDB login is required. 

! 
(Exclamation point) Deletes all heartbeat tables without prompting. 


-------------------------------------------------
DELETE MASTERKEY 

Use the DELETE MASTERKEY command to mark a version of a master key for 
deletion. Routinely deleting older versions of a master key ensures 
that they cannot be used maliciously. 

To view the version of a master key, use the INFO MASTERKEY command. 

This command marks a version for deletion but does not physically remove 
it from the wallet. 

    Note: 
    For Oracle GoldenGate deployments using a shared wallet, the older
    versions of the master key should be retained after the master key 
    is renewed until all processes are using the newest version. The 
    time to wait depends on the topology, latency, and data load of 
    the deployment. A minimum wait of 24 hours is a conservative estimate, 
    but you may need to perform testing to determine how long it takes 
    all processes to start using a new key. To determine whether all of 
    the processes are using the newest version, view the report file of 
    each Extract immediately after renewing the master key to confirm 
    the last SCN that was mined with the old key. Then, monitor the
    Replicat report files to verify that this SCN was applied by all 
    groups. At this point, you can delete the older versions of the 
    master key. 

See UNDELETE MASTERKEY to reverse a deletion made by DELETE MASTERKEY. 

Once a version number is used, the wallet reserves it forever, and no 
other key of the same version can be generated. For example, you cannot 
mark version 2 of a key for deletion, then purge the wallet to remove it, 
and then issue RENEW MASTERKEY to add a version 2 again. Even though only 
version 1 of the key remains in the wallet after the purge, the renewal 
generates version 3, not version 2. 

VERSION version-number 

Specifies a single version to be marked for deletion. 

RANGE FROM begin-number TO end-number 

Specifies a range of versions to be marked for deletion. The versions 
must be contiguous. For example, specifying RANGE FROM 3 TO 6 marks 
versions 3, 4, 5, and 6. 

ALL 

Marks all versions of the master key for deletion, including the currently 
active one. When this option is used, it should always be followed by a 
RENEW MASTERKEY command to create a new, current version of the master key. 

Examples 

Example 1 

This command marks one version of the master key for deletion and returns a 
message similar to the one shown. 

DELETE MASTERKEY VERSION 10 

Version 10 of Masterkey 'OGG_DEFAULT_MASTERKEY' deleted from wallet at 
location './ 
var/lib'. 

Example 2 

This command marks versions 3, 4, 5, and 6 for deletion. 

DELETE MASTERKEY RANGE FROM 3 TO 6 


-------------------------------------------------
DELETE PROCEDURETRANDATA 

Use this to disable procedure-level supplemental logging on the database. 

Use the DBLOGIN command to establish a database connection before using this command.  


-------------------------------------------------
DELETE REPLICAT 

Use DELETE REPLICAT to delete a Replicat group. This command deletes the 
checkpoint file but leaves the parameter file intact. Then you can re-create 
the group or delete the parameter file as needed. This command frees up 
trail files for purging, because the checkpoints used by the 
deleted group are removed (assuming no other processes are reading the file). 
Before using DELETE REPLICAT, stop Replicat with the STOP REPLICAT command. 

If this is an integrated Replicat or a non-integrated Replicat 
that uses a checkpoint table, do the following after you stop Replicat: 

1. Log into the database by using the DBLOGIN command. DBLOGIN enables DELETE 
REPLICAT to delete the checkpoints from the checkpoint table of a non-integrated 
Replicat or to delete the inbound server that an integrated Replicat uses. 
For more information, see DBLOGIN. 

2. Issue DELETE REPLICAT. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. 
For example, T* deletes all Replicat groups whose names begin with T. 

! 
Use this option to force the Replicat group to be deleted if the DBLOGIN command 
is not issued before the DELETE REPLICAT command is issued. If the group is 
a nonintegrated Replicat, this option deletes the group's checkpoints from 
the checkpoint file on disk, but not from the checkpoint table in the database. 
If using this option to delete an integrated Replicat group, you must use the 
UNREGISTER REPLICAT command to delete the inbound server from the target 
database. This option can also be used to ignore the prompt that occurs 
when a wildcard specifies multiple groups. 

Note: 
The basic DELETE REPLICAT command commits an existing Replicat transaction, 
but the ! option prevents the commit. 

Example 

DELETE REPLICAT finance 

-------------------------------------------------
DELETE RMTTRAIL 

Use DELETE RMTTRAIL to delete the record of checkpoints associated with a 
trail on a remote system. Checkpoints are maintained in a file bearing 
the same name as the group in a separate sub-directory of the Oracle GoldenGate 
directory. 

This command only deletes references to the specified trail from the 
checkpoint file. It does not delete the trail files themselves. 

trail-name 

The relative or fully qualified path name of the trail, including the 
two-character trail prefix. 

group-name
 
The name of the Extract group to which the trail is bound. If not specified, 
DELETE RMTTRAIL deletes the trail reference from all Extract groups that 
write to the specified trail. 

Example 

DELETE RMTTRAIL var/lib/data/et 

-------------------------------------------------
DELETE SCHEMATRANDATA 


Use DELETE SCHEMATRANDATA to remove the schema-level supplemental logging 
that was added with the ADD SCHEMATRANDATA command. Use the DBLOGIN command to 
establish a database connection before using this command. The user that is 
specified with this command must have the privilege to remove supplemental log groups. 

By default, this command attempts to remove the supplemental logging of the key 
columns that are used by Oracle GoldenGate (can be the primary key, a unique key, 
KEYCOLS columns, or all columns) and also the scheduling columns. The scheduling 
columns are the primary key, all of the unique keys, and all of the foreign keys. 
To delete the logging of the Oracle GoldenGate key columns, but not the scheduling 
columns, include the NOSCHEDULINGCOLS option with DELETE SCHEMATRANDATA. If ADD 
SCHEMATRANDATA was issued with the ALLCOLS option, use DELETE SCHEMATRANDATA with 
the ALLCOLS option to remove the supplemental logging of all of the columns, 
including the Oracle GoldenGate key columns. 

schema-name

The schema for which you want supplemental logging to be removed. Do not use a 
wildcard. If the source is an Oracle multitenant container database, make certain 
to log into the pluggable database that contains the schema for which you want 
to remove the logging. See DBLOGIN for more information. 

NOSCHEDULINGCOLS 

Prevents the command from removing the supplemental logging of the scheduling 
columns of the tables in the specified schema. The scheduling columns are the 
primary key, all of the unique keys, and all of the foreign keys of a table. 

ALLCOLS
 
Removes the supplemental logging of all of the columns of the tables in the 
specified schema. 

Examples 

Example 1
 
DELETE SCHEMATRANDATA scott 

Example 2 

DELETE SCHEMATRANDATA scott ALLCOLS

-------------------------------------------------
DELETE TRACETABLE 

Use DELETE TRACETABLE to delete a trace table. Use the DBLOGIN command to establish 
a database connection before using this command. 

table-name 

The name of the trace table to be deleted.  The schema is required. 

! 
(Exclamation point) Deletes the trace table without prompting.

Example 

DELETE TRACETABLE ora_trace 


-------------------------------------------------
DELETE TRANDATA 

By default, this command attempts to remove the supplemental logging of the 
key columns that are used by Oracle GoldenGate (can be the primary key, a unique 
key, KEYCOLS columns, or all columns) and also the scheduling columns. The 
scheduling columns are the primary key, all of the unique keys, and all of the 
foreign keys. To delete the logging of the Oracle GoldenGate key columns, but 
not the scheduling columns, include the NOSCHEDULINGCOLS option with DELETE 
TRANDATA. If ADD TRANDATA was issued with the ALLCOLS option, use DELETE TRANDATA
with the ALLCOLS option to remove the supplemental logging of all of the columns, 
including the Oracle GoldenGate key columns. 
Use the DBLOGIN command to establish a database connection before using this 
command. The user specified with this command must have the same privileges 
that are required for ADD TRANDATA. 

table-name-wildcard 

The qualified name of the table. A wildcard can be used for the schema or table name. 

NOSCHEDULINGCOLS 

Prevents the command from removing the supplemental logging of the scheduling 
columns of the specified table. The scheduling columns are the primary key, 
all of the unique keys, and all of the foreign keys of a table. 

ALLCOLS 

Removes the supplemental logging of all of the columns of the specified table. 

Examples 

Example 1
 
DELETE TRANDATA finance.acct 

Example 2 

DELETE TRANDATA finance.ac* 

Example 3 

DELETE TRANDATA finance.acct ALLCOLS 

-------------------------------------------------
DISCONNECT 

Use this to disconnect from the Oracle GoldenGate Service Manager. It is not
necessary to disconnect from one Service Manager connection to connect to 
another Service Manager. Use the CONNECT command to establish a connection to 
a Service Manager.


-------------------------------------------------
EDIT ENCKEYS

Use EXDIT ENCKEYS to open the ENCKEYS file for editing in the default 
text editor. 


-------------------------------------------------
EDIT GLOBALS 

Use this to open the GLOBALS parameter file for editing in the default text 
editor. The default text editor is set using the SET EDITOR command.


-------------------------------------------------
EDIT PARAMS 


Use EDIT PARAMS to create or change a parameter file. By default, the editor is
set with your EDITOR environment variable. You can change the default editor
with the SET EDITOR command. 

file-name 

Opens the specified parameter file. 

Example 
EDIT PARAMS finance 


-------------------------------------------------
ENCRYPT PASSWORD password ENCRYPTKEY encrypt-key 

Use to encrypt a password that is used in an Oracle GoldenGate parameter 
file or command.

password 
The login password. Do not enclose the password within quotes. If the 
password is case-sensitive, type it that way. 

    encrypt-key 

    Specifies the logical name of a user-created encryption key in a local 
    ENCKEYS lookup file. The key name is used to look up the actual key in the 
    ENCKEYS file. A user-created key and an associated ENCKEYS file is required 
    for the AES encryption. To use encrypt-key, generate the key with KEYGEN or 
    another utility, then store it in an ENCKEYS file on the source and target systems. 
    The AES ciphers have a 128-bit block size. 


-------------------------------------------------
EXIT 

Use to exit the Oracle GoldenGate AdminClient. 


-------------------------------------------------
FLUSH SEQUENCE 

Use FLUSH SEQUENCE immediately after you start Extract for the first time during 
an initial synchronization or a re-synchronization. This command updates an Oracle 
sequence so that initial redo records are available at the time that Extract 
starts to capture transaction data. Normally, redo is not generated until the 
current cache is exhausted. The flush gives Replicat an initial start point 
with which to synchronize to the correct sequence value on the target system. 
From then on, Extract can use the redo that is associated with the usual cache 
reservation of sequence values. 

The following Oracle procedures are used by FLUSH SEQUENCE: 

Database     Procedure          User and Privileges
Source         updateSequence      Grants EXECUTE to the owner of the Oracle GoldenGate 
                             DDL objects, or other selected user if not using DDL support. 
Target         replicateSequen  Grants EXECUTE to the Oracle GoldenGate Replicat
                             user. 

The sequence.sqlscript installs these procedures. Normally, this script is run 
as part of the Oracle GoldenGate installation process, but make certain that was 
done before using FLUSH SEQUENCE. If sequence.sqlwas not run, the flush fails and 
an error message similar to the following is generated: 
Cannot flush sequence {0}. Refer to the Oracle GoldenGate for Oracle documentation 
for instructions on how to set up and run the sequence.sql script. Error {1}. 

2. The GLOBALS file must contain a GGSCHEMA parameter that specifies the schema 
in which the procedures are installed. This user must have CONNECT, RESOURCE, and DBA
privileges. 

3. Before using FLUSH SEQUENCE, issue the DBLOGIN command as the database user 
that has EXECUTE privilege on the updateSequence procedure. If logging into a 
multitenant container database, log into the pluggable database that contains 
the sequence that is to be flushed. 

sequence-name

The name of a sequence. The schema name is required.

Example 

FLUSH SEQUENCE scott.seq 


-------------------------------------------------
HEALTH DEPLOYMENT

Use to display the health of the specified Oracle GoldenGate deployments. 

deployment-name-wildcard

The name of the deployment you are interested in. You can use an asterisk 
(*) wildcard for any portion of the deployment name. 

Example

HEALTH DEPLOYMENT Phoenix


-------------------------------------------------
HELP

HELP 

Use HELP to obtain information about an Oracle GoldenGate command. Without 
additional options, HELP returns a list of commands. The command option 
restricts the output to the specified command. 

SHOWSYNTAX

Displays the command syntax.

command-wildcard 

The command for which you want help. 

Examples

Example 1

HELP add replicat 

Example

To display all commands that begin with ADD.

HELP ADD


-------------------------------------------------
HISTORY 

Use HISTORY to view a list of the most recently issued AdminClient commands since 
the startup of the session. You can use the ! command to re-execute a command in 
the list. 

depth-number 

Returns a specific number of recent commands, where n is any positive number. 

Example

HISTORY 7
 
The result of this command would be similar to:
1: start manager
2: status manager
3: info manager
4: send manager childstatus
5: start extract extjd
6: info extract extjd
7: history 7

-------------------------------------------------
INFO ALL 

Use INFO ALL to display the status and lag (where relevant) for all Extract and 
Replicat processes on a system. The basic command, without options, displays 
only online (continuous) processes and Microservices Architecture services. To 
display tasks, use either INFO ALL TASKS or INFO ALL ALLPROCESSES. 

The Status and Lag at Chkpt (checkpoint) fields display the same process status 
and lag as the INFO EXTRACT and INFO REPLICAT commands. 

If Replicat is in coordinated mode, INFO ALL shows only the coordinator thread. 
To view information about individual threads, use INFO REPLICAT. 

TASKS 

Displays information only for tasks. 

ALLPROCESSES 

Displays information for online processes and tasks. 

Examples 

Example 1 

INFO ALL TASKS 

Example 2 

INFO ALL ALLPROCESSES 

-------------------------------------------------
INFO CHECKPOINTTABLE 

Not valid for Replicat for Java, Oracle GoldenGate Applications Adapter, or Oracle 
GoldenGate Big Data. 

Use INFO CHECKPOINTTABLE to confirm the existence of a checkpoint table and view the 
date and time that it was created. It returns a message similar to the following: 

Checkpoint table HR.CHKPT_TBLE created 2017-01-06T11:51:53. 

Use the DBLOGIN command to establish a database connection before using this command. 

table-name-wildcard 

The name of the checkpoint table. The schema name is required. 

Example 

INFO CHECKPOINTTABLE ggs.fin_check 

-------------------------------------------------
INFO CREDENTIALSTORE 

Use the INFO CREDENTIALSTORE command to get information about an Oracle 
GoldenGate credential store. This information includes the aliases that a 
credential store contains and the user IDs that correspond to them. The 
encrypted passwords in the credential store are not returned. 

DOMAIN domain 

Returns the aliases and user IDs for a specific domain. For security purposes, 
if the DOMAIN option is omitted, only the aliases and user IDs under the 
default domain of OracleGoldenGateare shown. See ALTER CREDENTIALSTORE 
for more information about domains. 

Examples 

Example 1 

The following example shows the default output of INFO CREDENTIALSTORE. 

INFO CREDENTIALSTORE 

Example 2
 
The following example shows the output when DOMAIN is used. 

INFO CREDENTIALSTORE DOMAIN support 


-------------------------------------------------
INFO DISTPATH 

Returns information about distribution paths. 

ALL

Displays a list of all distribution paths with their status.

path-name

A distribution path name.

DETAIL 

With DETAIL option, info distpath command displays the following additional 
information for the requested distribution path.

* process and thread information.

* source database name where the data is originated

* last started timestamp and processing lag

* current and starting input and output checkpoint


-------------------------------------------------
INFO ER 

Use this to get information about the specified wildcarded groups as a unit.

* The status of group (STARTING, RUNNING, STOPPED, SUSPENDED, or ABENDED). 
STARTING means that the process has started but has not yet locked the 
checkpoint file for processing. 

* Approximate Extract lag. 

* Checkpoint information. 

* Process run history. 

* The trail(s) to which Extract is writing. 

* Status of upgrade to, or downgrade from, integrated capture. The process can 
be running or stopped when INFO ER is issued. With a running process, the 
status of RUNNING can mean one of the following: 

* Active: Running and processing (or able to process) data. This is the 
normal state of a process after it is started. 

* Suspended: The process is running, but suspended due to an EVENTACTIONS 
SUSPEND action. In a suspended state, the process is not active, and no data 
can be processed, but the state of the current run is preserved and can be 
continued by issuing the SEND command with the RESUME option. 
The RBA in the INFO command reflects the last checkpointed position before 
the suspend action. To determine whether the state is active or suspended, 
issue the SEND command with the STATUS option. 

group-name-wildcard

Name of the wildcard group.

SHOWCH checkpoints-number 

The basic command shows information about the current Extract checkpoints. 
Extract checkpoint positions are composed of read checkpoints in the data 
source and write checkpoints in the trail. The trail type (RMTTRAIL or 
EXTTRAIL) is also noted. 

Optionally, specify a value for for checkpoints-number to include the 
specified number of previous checkpoints as well as the current one. 

Note: 
You might see irregular indents and spacing in the output. This is normal 
and does not affect the accuracy of the information. 

DETAIL 

Displays the following: 

* Extract run history, including start and stop points in the data source, 
expressed as a time. 

* Trails to which Extract is writing. 

TASKS 

Displays only Extract tasks. Tasks that were specified by a wildcard 
argument are not displayed by INFO EXTRACT. 

ALLPROCESSES 

Displays all Extract groups, including tasks. 


-------------------------------------------------
INFO EXTRACT 

Use INFO EXTRACT to view the following information. 

* The status of Extract (STARTING, RUNNING, STOPPED, or ABENDED). STARTING 
means that the process has started but has not yet locked the checkpoint 
file for processing. 

* Approximate Extract lag. 

* Checkpoint information. 

* Process run history. 

* The trail(s) to which Extract is writing. 

* Status of upgrade to, or downgrade from, integrated capture 

Extract can be running or stopped when INFO EXTRACT is issued. In the case 
of a running process, the status of RUNNING can mean one of the following: 

* Active: Running and processing (or able to process) data. This is the 
normal state of a process after it is started. 

* Suspended: The process is running, but suspended due to an EVENTACTIONS 
SUSPEND action. In a suspended state, the process is not active, and no data 
can be processed, but the state of the current run is preserved and can be 
continued by issuing the SEND EXTRACT command with the RESUME option. 
The RBA in the INFO command reflects the last checkpointed position before 
the suspend action. To determine whether the state is active or suspended, 
issue the SEND EXTRACT command with the STATUS option. 

The basic command displays information only for online (continuous) Extract 
processes. Tasks are excluded. 

About Extract Lag 

The Checkpoint Lagfield of the INFO EXTRACT output reflects the lag, in seconds, 
at the time that the last checkpoint was written to the trail. For example, 
if the following is true... 

* Current time = 15:00:00 

* Last checkpoint = 14:59:00 

* Timestamp of the last record processed = 14:58:00 
...then the lag is reported as 00:01:00 (one minute, the difference between 14:58 
and 14:59). 

A lag value of UNKNOWN indicates that the process could be running but has not 
yet processed records, or that the source system's clock is ahead of the target 
system's clock (due to clock imperfections, not time zone differences). 

For more precise lag information, use LAG EXTRACT. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. 
For example, T* shows information for all Extract groups whose names start 
with T. 

* List the PDBs registered with a specified Extract group name.

SHOWCH checkpoints-number 

The basic command shows information about the current Extract checkpoints. 
Extract checkpoint positions are composed of read checkpoints in the data 
source and write checkpoints in the trail. The trail type (RMTTRAIL or 
EXTTRAIL) is also noted. 

Optionally, specify a value for for checkpoints-number to include the 
specified number of previous checkpoints as well as the current one. 

Note: 
You might see irregular indents and spacing in the output. This is normal 
and does not affect the accuracy of the information. 

DETAIL 

Displays the following: 

* Extract run history, including start and stop points in the data source, 
expressed as a time. 

* Trails to which Extract is writing. 

TASKS 

Displays only Extract tasks. Tasks that were specified by a wildcard 
argument are not displayed by INFO EXTRACT. 

ALLPROCESSES 

Displays all Extract groups, including tasks. 

UPGRADE | DOWNGRADE 

Valid for an Oracle database only. 

* UPGRADE displays whether
 the Extract can be upgraded from classic capture 
mode to integrated capture mode. 

* DOWNGRADE displays whether the Extract can be downgraded from integrated 
capture mode to classic capture mode. 

If Extract cannot be upgraded or downgraded, the reason why is displayed. 

A wildcarded Extract name is not allowed with this option. 

Before using this command, issue the DBLOGIN command. 

CONTAINERS

Lists the PDBs that are registered with the specified Extract group. 
However, the command errors out if it is run in non-CDB mode or the 
Extract group doesn't exist. 

Issue the DBLOGIN command before running this command.

Examples 

Example 1 

INFO EXTRACT fin*, SHOWCH 

Example 2 

INFO EXTRACT *, TASKS 

Example 3 (Oracle only) 

INFO EXTRACT finance UPGRADE 


-------------------------------------------------
INFO EXTTRAIL 

Use this to get information about a local trail.

trail-name-wildcard 

The name of an trail file or a wildcard (*) to specify multiple files. 
For example, T* shows information for all trail files whose names start 
with T.


-------------------------------------------------
INFO HEARTBEATTABLE

Use INFO HEARTBEATTABLE to display information about the heartbeat tables 
and options configured in the database. 

This command requires a DBLOGIN. On a CDB database, a PDB login is required. 

Syntax 

INFO HEARTBEATTABLE


-------------------------------------------------
INFO MASTERKEY 

Use the INFO MASTERKEY command to view the contents of the master-key wallet. 
The default output shows the version history of the master key, with the 
creation date of a version and the status of the version. The status can be 
one of the following: 

* Current: Indicates this is the active version of the master key. 

* Available: Indicates this version is not the current one, but can be 
made active if needed. 

* Deleted: Indicates that this version is marked to be deleted when the 
PURGE WALLET command is issued. 

version-number

Shows detailed information about a specific version of the master key. 
The output includes the original creation date. 


-------------------------------------------------
INFO PROCEDURETRANDATA 

Use this to get information about the state of procedure-level supplemental 
database logging.

Use the DBLOGIN command to establish a database connection before using this command.


-------------------------------------------------
INFO REPLICAT 

Use INFO REPLICAT to retrieve the processing history of a Replicat group. 
The output of this command includes: 

* The status of Replicat (STARTING, RUNNING, STOPPED or ABENDED). STARTING 
means that the process has started but has not yet locked the checkpoint 
file for processing. 

* (Oracle database) The Replicat mode: non-integrated or integrated. 

* Whether or not Replicat is in coordinated mode and, if so, how many 
threads it currently uses. 

* Approximate Replicat lag. 

* The trail from which Replicat is reading. 

* Replicat run history, including checkpoints in the trail. 

* Information about the Replicat environment. 


The basic command displays information only for online (continuous) Replicat 
groups. Tasks are excluded. 
Replicat can be stopped or running when INFO REPLICAT is issued. In the case 
of a running process, the status of RUNNING can mean one of the following: 

* Active: Running and processing (or able to process) data. This is the normal 
state of a process after it is started. 

* Suspended: The process is running, but suspended due to an EVENTACTIONS 
SUSPEND action. In a suspended state, the process is not active, and no data 
can be processed, but the state of the current run is preserved and can be 
continued by issuing the RESUME command. The RBA in the INFO command 
reflects the last checkpointed position before the suspend action. To 
determine whether the state is active or suspended, issue the SEND REPLICAT
command with the STATUS option. 

About Lag 

Checkpoint Lag is the lag, in seconds, at the time the last checkpoint was 
written to the trail. For example, consider the following example. 

* Current time = 15:00:00 

* Last checkpoint = 14:59:00 

* Timestamp of the last record processed =14:58:00 


Assuming these values, the lag is reported as 00:01:00 (one minute, the 
difference between 14:58 and 14:59). 

A lag value of UNKNOWN indicates that Replicat could be running but has 
not yet processed records, or that the source system's clock is ahead of 
the target system's clock (due to clock imperfections, not time zone 
differences). For more precise lag information, use LAG REPLICAT. 

group-name-wildcard 

The name of: 

* A Replicat group or a wildcard (*) to specify multiple groups. For 
example, T* shows information for all Replicat groups whose names begin 
with T. 

SHOWCH checkpoints-number 

Displays current checkpoint details, including those recorded to the 
checkpoint file and those recorded to the checkpoint table, if one is 
being used. The database checkpoint display includes the table name, 
the hash key (unique identifier), and the create timestamp. 

Specify a value for checkpoints-number to include the specified number of previous checkpoints 
as well as the current one. 

 

DETAIL 

Displays detail information. For an Oracle target, DETAIL displays the 
name of the inbound server when Replicat is in integrated mode.  

If Replicat is in coordinated mode, DETAIL will display only the active 
threads. For example, if a Replicat named CR was created with a maximum 
of 15 threads, but only threads 7-9 are running, INFO REPLICAT group_name 
with DETAIL will show only the coordinator thread (CR), CR007, CR008, and 
CR009. Checkpoints will exist for the other threads, but they will not be 
shown in the command output. 

TASKS 

Displays only Replicat tasks. Tasks that were specified by a wildcard 
argument are not displayed by INFO REPLICAT. 

ALLPROCESSES 

Displays all Replicat groups, including tasks. 

Examples 

Example 1 

INFO REPLICAT *, DETAIL, ALLPROCESSES 

Example 2 

INFO REPLICAT *, TASKS 

Example 3 

INFO REPLICAT fin003, SHOWCH 


-------------------------------------------------
INFO RMTTRAIL 

Use INFO RMTTRAIL to retrieve configuration information for a remote trail. 
It shows the name of the trail, the Extract that writes to it, the position 
of the last data processed, and the assigned maximum file size. 

trail-name-wildcard 

A valid trail name or a wildcard (*) designating multiple trails. 

Examples 

Example 1 

INFO RMTTRAIL * 

Example 2 

The following is a sample of INFO RMTTRAILoutput. 
Extract Trail: /ogg/var/lib/data/aa
 Seqno Length: 9
 Flip Seqno Length: no
 Extract: OGGPMP
 Seqno: 4
 RBA: 78066
 File Size: 500M 

-------------------------------------------------
INFO SCHEMATRANDATA 

Use INFO SCHEMATRANDATA to determine whether schema-level supplemental 
logging is enabled for the specified schema or if any instantiation information 
is available. Use the DBLOGIN command to establish a database connection before 
using this command. 

schema-name

The schema that you want supplemental logging information for. To get information 
on the appropriate schema in an Oracle multitenant container database, make 
certain to log into the correct pluggable database with DBLOGIN. 

Example 

INFO SCHEMATRANDATA scott 

-------------------------------------------------
INFO TRACETABLE 

Use the INFO TRACETABLE command to verify the existence of the specified trace 
table in the local instance of the database. If the table exists, Oracle 
GoldenGate displays the name and the date and time that it was created; 
otherwise Oracle GoldenGate displays a message stating that the table does 
not exist. Use the DBLOGIN command to establish a database connection before 
using this command. 

table-name 

The owner and name of the trace table to be verified. 

Example 

INFO TRACETABLE finance.ora_trace 

-------------------------------------------------
INFO TRANDATA 

Use INFO TRANDATA to get the following information: 

Determine whether supplemental logging is enabled, and to show the 
names of columns that are being logged supplementally. If all columns are being 
logged, the notation ALL is displayed instead of individual column names. Displays 
any SCN instantiation information. 

Use the DBLOGIN command to establish a database connection before using this command. 

table-name-wildcard 

The name of the table  for which you want to view trandata information. The 
schema name is required and cannot contain wildcard characters. The table name can 
contain wildcard characters. 

Examples 

Example 1 

INFO TRANDATA finance.acct 

Example 2 

INFO TRANDATA finance.ac* 
-------------------------------------------------
KILL ER 

Use this to forcibly terminate the specified wildcarded groups as a unit.

Killing a process leaves the most recent checkpoint in place, and the current transaction 
is rolled back by the database, guaranteeing that no data is lost when the process is 
restarted. Use this command only if the process cannot be stopped gracefully with 
the STOP REPLICAT command.

group-name-wildcard 

The name of the group to close. A wildcard can be used for the group name. 


-------------------------------------------------
KILL EXTRACT 

Use KILL EXTRACT to kill an Extract process running in regular mode. 
Use this command only if a process cannot be stopped gracefully with the STOP
EXTRACT command. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. 
For example, T* kills all Extract processes whose group names start with T. 

Example 

KILL EXTRACT finance 


-------------------------------------------------
KILL REPLICAT  

Use KILL REPLICAT to kill a Replicat process. Killing a process leaves the 
most recent checkpoint in place, and the current transaction is rolled back 
by the database, guaranteeing that no data is lost when the process is 
restarted. Use this command only if Replicat cannot be stopped gracefully with 
the STOP REPLICAT command. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. 
For example, T* kills all Replicat processes whose group names begin with T. 

Example 

KILL REPLICAT finance 


-------------------------------------------------
LAG ER

Use LAG ER to get lag information about the specified wildcarded groups.

group-name-wildcard

The name of a group or a wildcard (*) to specify multiple groups. 

Example 

To kill all Replicat processes whose group names begin with T.

LAG ER T* 


-------------------------------------------------
LAG EXTRACT 

Use LAG EXTRACT to determine a true lag time between Extract and the data 
source. LAG EXTRACT calculates the lag time more precisely than INFO EXTRACT
because it communicates with Extract directly, rather than reading a 
checkpoint position in the trail. 

For Extract, lag is the difference, in seconds, between the time that a record 
was processed by Extract (based on the system clock) and the timestamp of 
that record in the data source. 

If the heartbeat functionality is enable, you can view the associated lags. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. 
For example, T* determines lag time for all Extract groups whose names 
start with T. 


Examples 

Example 1 

LAG EXTRACT * 

Example 2 

LAG EXTRACT *fin* 


-------------------------------------------------
LAG REPLICAT 

Use LAG REPLICAT to determine a true lag time between Replicat and the trail. 
LAG REPLICAT estimates the lag time more precisely than INFO REPLICAT because 
it communicates with Replicat directly rather than reading a checkpoint position. 

For Replicat, lag is the difference, in seconds, between the time that the last 
record was processed by Replicat (based on the system clock) and the timestamp 
of the record in the trail. 

If the heartbeat functionality is enable, you can view the associated lags. 
A DBLOGIN is required to view the heartbeat lag. 

group-name-wildcard

The name of: 

* A Replicat group or a wildcard (*) to specify multiple groups. For 
example, T* shows lag for all Replicat groups whose names begin with T. 

Examples 

Example 1 

LAG REPLICAT * 

Example 2 

LAG REPLICAT *fin* 


-------------------------------------------------
LIST TABLES 

Use LIST TABLES to list all tables in the database that match the specification 
provided with the command argument. Use the DBLOGIN command to establish a 
database connection before using this command. If logging into an Oracle 
multitenant container database, log in to the pluggable database that contains 
the tables that you want to list. 

table-name-wildcard

The name of a table or a group of tables specified with a wildcard (*). 

Example 

The following shows a LIST TABLES command and sample output. 

LIST TABLES finance.tcust* 

FINANCE.TCUSTMER
FINANCE.TCUSTORD


-------------------------------------------------
MININGDBLOGIN USERIDALIAS

Supplies the alias of a database login credential. Can be used instead of
the USERID option if there is a local Oracle GoldenGate credential store that 
contains a credential with the required privileges for this MININGDBLOGIN
command. For more information about using a credential store, see Administering 
Oracle GoldenGate. 

To log into a pluggable database in an Oracle multitenant container database, 
the user must be stored as a connect string, such as OGGUSER@FINANCE. To log 
into the root container, the user must be stored as a common user, including 
the C## prefix, such as C##GGADMIN@FINANCE. For more information about 
configuring Oracle GoldenGate for a CDB, see Using 
Oracle GoldenGate for Oracle Database. 

alias 

Specifies the alias of a database user credential that is stored in the 
Oracle GoldenGate credential store. The user that is specified with 
USERIDALIAS must be the common database user. 

DOMAIN domain 

Specifies the credential store domain for the specified alias. A valid 
domain entry must exist in the credential store for the specified alias. 

-------------------------------------------------
NOALLOWNESTED 

Use the NOALLOWNESTED command to disable the use of 
nested OBEY files. A nested OBEY file is one that references another OBEY file. 

When you exit your AdminClient session, the next AdminClient session will 
revert to NOALLOWNESTED. 

This is the default. An attempt to run a nested OBEY file in the default mode of 
NOALLOWNESTED will cause an error that is similar to the following: 

ERROR: Nested OBEY scripts not allowed. Use ALLOWNESTED to allow nested scripts. 


-------------------------------------------------
OBEY

Use OBEY to process a file that contains a list of Oracle GoldenGate commands. 
OBEY is useful for executing commands that are frequently used in sequence. 

You can call one OBEY file from another one. This is called a nested OBEY file. 
To use nested OBEY files, you must enable the functionality by first issuing the 
ALLOWNESTED command. There is no limit to nesting levels. See ALLOWNESTED | NOALLOWNESTED. 

file-name 

The relative or fully qualified path name of the file that contains the list of 
commands. 

Examples 

Example 1
 
OBEY ./mycommands.txt 

The preceding command executes a file that looks similar to the following example: 

sbalouse: This text is not correctly formatted and should read:

add extract fin, tranlog, begin now
add exttrail ggs/var/lib/data/aa, extract fin
add extract hr, tranlog, begin now
add exttrail ggs/var/lib/data/bb, extract hr
add replicat fin2, exttrail ggs/var/lib/data/aa, begin now
add replicat hr2, exttrail ggs/var/lib/data/bb, begin now
obey ./startcmds.txt 

Example 2 

The following example illustrates a nested OBEY file. Assume an OBEY file named 
addcmds.txt. Inside this file, there is another OBEY command that calls the OBEY 
file named startcmds.txt, which executes another set of commands. 
OBEY ./addcmds.txt 

(This OBEY statement executes the following:) 

add extract fin, tranlog, begin now add exttrail ggs/var/lib/data/aa, extract fin add 
extract hr, tranlog, begin now add exttrail ggs/var/lib/data/bb, extract hr add replicat 
fin2, exttrail ggs/var/lib/data/aa, begin now add replicat hr2, exttrail ggs/var/lib/data/bb, 
begin now obey ./startcmds.txt 

(The nested startcmds.txt file executes the following:) 
start extract * 
info extract *, detail 
start replicat * 
info replicat *, detail 


-------------------------------------------------
PURGE EXTTRAIL 

Use PURGE EXTTRAIL to remove files related to a local trail from the file system.

trail-name

The relative or fully qualified path name of the trail.  

!

Bypasses the prompt that confirms intent to delete the trail file.


-------------------------------------------------
PURGE WALLET 

Use the PURGE WALLET command to permanently remove master key versions 
from the master-key wallet. Only the versions that are marked for deletion 
by the DELETE MASTERKEY command are removed. The purge is not reversible. 

Note: 
For Oracle GoldenGate deployments using a shared wallet, the older versions 
of the master key should be retained after the master key is renewed until 
all processes are using the newest version. The time to wait depends on the 
topology, latency, and data load of the deployment. A minimum wait of 24 
hours is a conservative estimate, but you may need to perform testing to 
determine how long it takes for all processes to start using a new key. 
determine whether all of the processes are using the newest version, 
view the report file of each Extract immediately after renewing the master 
to confirm the last SCN that was mined with the old key. Then, monitor 
the Replicat report files to verify that this SCN was applied by all 
Replicat groups. At this point, you can delete the older versions of 
the master key. 

After purging a wallet that is not maintained centrally on shared storage, 
the updated wallet can be copied to all of the other systems in the Oracle 
GoldenGate configuration that use this wallet, so that no purged keys 
remain in the configuration. Before doing so, Extract must be stopped and 
then all of the downstream Oracle GoldenGate processes must be allowed to 
finish processing their trails and then be stopped. After the wallet is 
copied into place, the processes can be started again. For detailed 
instructions, see Administering Oracle GoldenGate. 


-------------------------------------------------
REGISTER EXTRACT 

Use REGISTER EXTRACT to register a primary Extract group with an Oracle 
Database to: 

* Enable integrated capture mode 

* Specify options for integrated capturing from a multitenant container database 

* Enable Extract in classic capture mode to work with Oracle Recovery Manager 
to retain the archive logs needed for recovery 

To unregister an Extract group from the database, use the UNREGISTER EXTRACT 
command. 

group-name 

The name of the Extract group that is to be registered. Do not use a wildcard. 

LOGRETENTION

Enables an Extract group in classic capture mode to work with Oracle Recovery 
Manager (RMAN) to retain the logs that Extract needs for recovery. LOGRETENTION 
is ignored if the Extract group is configured for integrated capture.

DATABASE [ 
CONTAINER (container-list | 
ADD CONTAINER container-list | 
DROP CONTAINER container-list 
] 

Without options, DATABASE enables integrated capture from a non-CDB database 
for the Extract group. In this mode, Extract integrates with the database 
logmining server to receive change data in the form of logical change records 
(LCR). Extract does not read the redo logs. Extract performs capture processing, 
transformation, and other requirements. The DML filtering is performed by the 
Logmining server. For support information and configuration steps, see 
Using Oracle GoldenGate for Oracle Database. 

Before using REGISTER EXTRACT with DATABASE, use the DBLOGIN command for all 
extracts with the privileges granted using the dbms_goldengate_auth.grant_admin_privilege
procedure. If you have a downstream configuration, then you must also issue the 
MININGDBLOGIN command. If the source database you are registering is a CDB database 
and Extract will fetch data, then grant_admin_privilegemust be called with the 
CONTAINER='ALL' parameter. 

Before using REGISTER EXTRACT, use ADD EXTRACT with the INTEGRATED TRANLOG option 
to create an Extract group of the same name. You must add an Extract group before registering it. 

    CONTAINER container-list 
    
    Applies the registration to a list of one or more pluggable databases (containers) 
    of a multitenant container database (CDB). Specify one or more pluggable databases 
    as a comma-delimited list within parentheses, for example: CONTAINER (pdb1, pdb2, 
    pdb3). All of the pluggable databases must exist in the database and all names 
    can be explicit or wildcarded. 

    ADD CONTAINER container-list 
    
    Adds the specified pluggable database to an existing Extract capture configuration. 
    Specify one or more pluggable databases as a comma-delimited list within 
    parentheses, for example: ADD CONTAINER (pdb1, pdb2, pdb3). Before issuing 
    REGISTER EXTRACT with this option, stop the Extract group. 

    Adding containers at particular SCN on an existing Extract is not supported. 

    DROP CONTAINER container-list
    
    Drops the specified pluggable database from an existing Extract capture 
    configuration. Specify one or more pluggable databases as a comma-delimited 
    list within parentheses, for example: DROP CONTAINER (pdb1, pdb2, pdb3). 
    Before issuing REGISTER EXTRACT with this option, stop the Extract group. 

LOGRETENTION 

LOGRETENTION creates an underlying Oracle Streams capture process that is dedicated 
to the Extract group and has a similar name. This capture is used only for the 
purpose of log retention. 

The logs are retained from the time that REGISTER EXTRACT is issued, based on the 
current database SCN. The log-retention feature
 is controlled with the LOGRETENTION
option of the TRANLOGOPTIONS parameter. 

Before using REGISTER EXTRACT with LOGRETENTION, issue the DBLOGIN command with 
the privileges shown in DBLOGIN. 

SCN scn 

Registers Extract to begin capture at a specific system change number (SCN) 
in the past. Without this option, capture begins from the time that REGISTER EXTRACT
is issued. The specified SCN must correspond to the begin SCN of a dictionary 
build operation in a log file. You can issue the following query to find all 
valid SCN values: 

SELECT first_change# 
  FROM v$archived_log 
WHERE dictionary_begin = 'YES' AND 
  standby_dest = 'NO' AND
  name IS NOT NULL AND 
  status = 'A'; 

When used alone, the SCN value is the beginning SCN of the dictionary build 
operation in a log file. 

When used in conjunction with SHARE AUTOMATIC or SHARE extract_name, then the 
specified SCN is the start_scn for the capture session and has the following restrictions: 

* Should be lesser than or equal to the current SCN. 

* Should be greater than the minimum (first SCN) of the existing captures. 


SHARE [ 
AUTOMATIC | 

group-name| 
NONE]} 

Registers the extract to return to an existing LogMiner data dictionary build 
with a specified SCN creating a clone. This allows for faster creation captures 
by leveraging existing dictionary builds. 

SHARE cannot be used on a CDB. 

The following commands are supported: 

REGISTER EXTRACT extract database SCN #### SHARE AUTOMATIC 
REGISTER EXTRACT extract database SHARE NONE 
REGISTER EXTRACT extract database SCN #### SHARE NONE 

Or 

REGISTER EXTRACT extract DATABASE SHARE NONE 
REGISTER EXTRACT extract DATABASE SCN #### SHARE NONE 

In contrast, the following commands are not supported in a downstream 
configuration: 

REGISTER EXTRACT extract DATABASE SHARE AUTOMATIC 

    AUTOMATIC 
    Clone from the existing closest capture. If no suitable clone candidate 
    is found, then a new build is created. 
    
    group-name 
    The name of the group.

    NONE 
    Does not clone or create a new build; this is the default. 

In a downstream configuration, the SHARE clause must be used in conjunction 
with the SCN clause when registering for Extract. 

Examples 

Example 1 

REGISTER EXTRACT sales LOGRETENTION 

Example 2 

REGISTER EXTRACT sales DATABASE 

Example 3 

REGISTER EXTRACT sales DATABASE CONTAINER (sales, finance, hr) 

Example 4 

REGISTER EXTRACT sales DATABASE ADD CONTAINER (customers) 

Example 5 

REGISTER EXTRACT sales DATABASE DROP CONTAINER (finance) 

Example 6 

REGISTER EXTRACT sales DATABASE SCN 136589 

The beginning SCN of the dictionary build is 136589. 

Example 7 

REGISTER EXTRACT sales DATABASE SCN 67000 SHARE ext2 

The valid start SCN, 67000 in this case; it is not necessarily the 
current SCN. 

Example 8 

REGISTER EXTRACT sales DATABASE CONTAINER (sales, finance, hr) 
SCN 136589 

-------------------------------------------------
REGISTER REPLICAT 

Use the REGISTER REPLICAT command to register a Replicat group with a 
target Oracle Database to support integrated Replicat mode. This command 
should not be necessary under normal Replicat conditions. The startup 
registers Replicat with the target database automatically. Use this 
command only if Oracle GoldenGate returns a message that an integrated 
Replicat is not registered with the database. 

Before issuing this command, issue the DBLOGIN command as the Replicat 
database user with privileges granted through 
dbms_goldengate_auth.grant_admin_privilege.  

group-name-wildcard 

A Replicat group or a wildcard (*) to specify multiple groups. For 
example, T* registers all Replicat groups whose names begin with T. 

DATABASE 

Required keyword to register with the target database. Creates a 
database inbound server and associates it with the specified Replicat group. 

Example 

REGISTER REPLICAT sales DATABASE 


-------------------------------------------------
RENEW MASTERKEY 

Use the RENEW MASTERKEY command to create a new version of the master 
encryption key in the master-key wallet. All versions of a master key remain 
in the wallet until they are marked for deletion with the DELETE MASTERKEY
command and then the wallet is purged with the PURGE WALLET command. 

After renewing a master key in a wallet that is not maintained centrally on 
shared storage, the updated wallet must be copied to all of the other systems 
in the Oracle GoldenGate configuration that use this wallet. Before doing so, 
Extract must be stopped and then all of the downstream Oracle GoldenGate 
processes must be allowed to finish processing their trails and then be 
stopped. After the wallet is copied into place, the processes can be started 
again. For detailed instructions, see Administering Oracle GoldenGate. 


-------------------------------------------------
RESTART DEPLOYMENT  


Use RESTART DEPLOYMENT to restart the specified deployment.

deployment-name-wildcard 

The name of the deployment or a wildcard (*) to specify multiple deployments. 
For example, P*restarts all deployments whose names start with P.

Example

RESTART DEPLOYMENT Phoenix


-------------------------------------------------
RESTART ER  

Use RESTART ER to stop then start the specified wildcarded groups. ER processes
that are already stopped are started.

group-name-wildcard 

The name of the group or a wildcard (*) to specify multiple groups. 
For example, T* restarts all groups whose names start with T.


-------------------------------------------------
RESTART EXTRACT 

Use RESTART EXTRACT to stop then start an Extract group.

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. For 
example, T* restarts all Extract groups whose names begin with T. 

ATCSN csn | AFTERCSN csn 

Specifies an alternate start point. 

    ATCSN 
    Directs Extract to position its restart point at the first transaction that 
    has the specified CSN. Any transactions in the data source that have CSN 
    values less than the specified one are skipped. 

    AFTERCSN 
    Directs Extract to position its restart point at the beginning of the first 
    transaction after the one that has the specified CSN. Any transactions in 
    the data source that have CSN values that are less than, or equal to, the 
    specified one are skipped. 

    csn 
    Specifies a CSN value. Enter the CSN value in the format that is valid for 
    the database. Extract abends if the format is invalid and writes a message 
    to the report file. To determine the CSN to supply after an initial load is 
    complete, use the serial identifier at which the load utility completed. 
    Otherwise, follow the instructions in the initial load procedure for 
    determining when to start Extract. 

The following are additional guidelines to observe when using ATCSN and AFTERCSN: 

* The CSN is stored in the file header so that it is available to downstream 
processes. 

* When a record that is specified with a CSN is found, Extract issues a checkpoint. 
The checkpoint ensures that subsequent Extract startups begin from the requested 
location, and not from a point prior to the requested CSN. 

* You must establish a physical start point in the transaction log or trail for 
Extract with ADD EXTRACT or ALTER EXTRACT before using ATCSN or AFTERCSN. These 
options are intended to be an additional filter after Extract is positioned to 
a physical location in the data source. 

Examples 

Example 1 

RESTART EXTRACT finance 

Example 2 

RESTART EXTRACT finance ATCSN 684993 

Example 3 

RESTART EXTRACT finance AFTERCSN 684993 


-------------------------------------------------
RESTART REPLICAT 

Use RESTART REPLICAT to stop then start a Replicat group. To confirm that 
Replicat has started, use the INFO REPLICAT or STATUS REPLICAT command. 

Normal Starting Point 

Replicat can be restarted at its normal start point (from initial or current 
checkpoints) or from an alternate, user-specified position in the trail. 

RESTART REPLICAT, without any options, causes Replicat to start processing 
at one of the following points to maintain data integrity: 

* After graceful or abnormal termination: At the first unprocessed transaction 
in the trail from the previous run, as represented by the current read 
checkpoint. 

* First-time startup after the group was created: From the beginning of 
the active trail file (seqno 0, rba 0). 

Alternate Starting Point 

The SKIPTRANSACTION, ATCSN, and AFTERCSN options of RESTART REPLICAT cause 
Replicat as a whole, or specific threads of a coordinated Replicat, to 
begin processing at a transaction in the trail other than the normal start 
point. Use these options to: 

* Specify a logical recovery position when an error prevents Replicat from 
moving forward in the trail. Replicat can be positioned to skip the 
offending transaction or transactions, with the understanding that the 
data will not be applied to the target. 

* Skip replicated transactions that will cause duplicate-record and missing-record 
errors after a backup is applied to the target during an initial load. These 
options cause Replicat to discard transactions that occurred earlier than the
most recent set of changes that were captured in the backup. You can map the 
value of the serial identifier that corresponds to the completion of the backup 
to a CSN value, and then start Replicat to begin applying transactions from 
the specified CSN onward. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. For 
example, T* restarts all Replicat groups whose names begin with T. 

SKIPTRANSACTION 

Causes Replicat to skip the first transaction after its expected startup 
position in the trail. All operations from that first transaction are excluded. 

If the MAXTRANSOPS parameter is also being used for this Replicat, it is possible 
that the process will start to read the trail file from somewhere in the middle 
of a transaction. In that case, the remainder of the partial transaction is skipped 
and Replicat resumes normal processing from the next begin-transaction record 
in the file. The skipped records are written to the discard file if the DISCARDFILE
parameter is being used; otherwise, a message is written to the report file that 
is similar to: 

User requested RESTART SKIPTRANSACTION. The current transaction will be skipped. 
Transaction ID txid, position Seqno seqno, RBA rba 

SKIPTRANSACTION is valid only when the trail that Replicat is reading is part of 
an online change synchronization configuration (with checkpoints). Not valid 
for task-type initial loads (where SPECIALRUN is used with ADD REPLICAT). 

    ATCSN csn| AFTERCSN csn 
    Sets a user-defined start point at a specific CSN. When ATCSN or AFTERCSN is 
    used, a message similar to one of the following is written to the report file: 

    User requested start at commit sequence number (CSN) csn-string 

    User requested start after commit sequence number (CSN) csn-string 

    General information about these options: 

    * Valid only when the trail that Replicat is reading is part of an online change 
    synchronization configuration (with checkpoints). Not valid for task-type initial 
    loads (where SPECIALRUN is used with ADD REPLICAT). 

    * To support starting at, or after, a CSN, the trail must be of Oracle GoldenGate 
    version 10.0.0 or later, because the CSN is stored in the first trail record of 
    each transaction. If Replicat is started with AFTERCSN against an earlier trail 
    version, Replicat will abend and write an error to the report stating that the 
    trail format is not supported. 

    ATCSN 

    Causes Replicat to start processing at the transaction that has the specified 
    CSN. Any transactions in the trail that have CSN values that are less than 
    the specified one are skipped. 

    AFTERCSN 

    Causes Replicat to start processing at the transaction that occurred after 
    the one with the specified CSN. Any transactions in the trail that have CSN 
    values that are less than, or equal to, the specified one are skipped. 

    csn 

    Specifies a CSN value. Enter the CSN value in the format that is valid for 
    the database. Replicat abends if the format is invalid and writes a message 
    to the report file. To determine the CSN to supply after an initial load is 
    complete, use the commit identifier at which the load utility completed the 
    load. Otherwise, follow the instructions in the initial load procedure for 
    determining when to start Replicat. 

FILTERDUPTRANSACTIONS | NOFILTERDUPTRANSACTIONS 

Causes Replicat to ignore transactions that it has already processed. Use when 
Extract was repositioned to a new start point (see the ATCSN or AFTERCSN option of 
START EXTRACT) and you are confident that there are duplicate transactions 
in the trail that could cause Replicat to abend. This option requires the use 
of a checkpoint table. If the database is Oracle, this option is valid only 
for Replicat in nonintegrated mode. In case of Integrated mode and automatic 
target trail file regeneration, the Integrated mode handles the duplicate 
transactions transparently. The default is FILTERDUPTRANSACTIONS. 

THREADS thread-list
 
Valid for SKIPTRANSACTION, ATCSN, and AFTERCSN when Replicat is in coordinated 
mode. Not valid for RESTART REPLICAT without those options. Starts the specified 
Replicat thread or threads at the specified location. 

    thread-list 

    A comma-delimted list of ranges in the format of threadIDlow-threadIDhigh,
    threadIDlow-threadIDhigh. 

! 

(Exclamation point) Restarts Replicat immediately. The transaction is stopped. 

Examples 

Example 1 

RESTART REPLICAT finance 

Example 2 

The following restarts Replicat at a CSN. 

RESTART REPLICAT finance, ATCSN 6488359 

Example 3 

The following causes threads 4 and 5 of a coordinated Replicat to skip 
the first transaction after their last checkpoint when Replicat is started. 
If this were a 10-thread coordinated Replicat, threads 0-3 and 6-10 would 
all restart at the normal start point, that of their last checkpoint. 

RESTART REPLICAT fin SKIPTRANSACTION THREADS(4-5) 

Example 4 

The following example causes threads 1-3 of a coordinated Replicat to 
restart at CSN 6488359, threads 9-10 to start after CSN 6488360, and threads 
7 and 8 to skip the first transaction after its last checkpoint. 

RESTART REPLICAT fin ATCSN 6488359 THREADS(1-3), AFTERCSN 6488360 
THREADS(9-10), SKIPTRANSACTION THREADS(7,8) 

-------------------------------------------------
RESTART SERVICE 

Use RESTART SERVICE to restart the specified Oracle GoldenGate services.

service-name-wildcard

The name of an service or a wildcard (*) to specify multiple services. Valid
services are ADMINSRVR, DISTSRVR, RECVSRVR, and PMSRVR.

Example

RESTART SERVICE ADMIN*


-------------------------------------------------

SEND ER 

Use SEND ER to send instructions to, or returns information about, the specified wildcarded groups.

group-name-wildcard 

Name of the group or a wildcard (*) to specify multiple groups. For 
example, T* sends commands to all groups whose names begin with T.


-------------------------------------------------
SEND EXTRACT 


Use SEND EXTRACT to communicate with a running Extract process. The 
request is processed as soon as Extract is ready to accept commands from users. 

group-name-wildcard 

The name of the Extract group or a wildcard (*) to specify multiple 
groups. For example, T* sends the command to all Extract processes whose 
group names start with T. If an Extract is not running, an error is returned. 

command

The command for the Extract process.


-------------------------------------------------
SEND REPLICAT 

Use SEND REPLICAT to communicate with a starting or running Replicat process. 
The request is processed as soon as Replicat is ready to accept commands 
from users. 

group-name-wildcard 

The name of the Replicat group or a wildcard (*) to specify multiple 
groups. For example, T* sends the command to all Replicat processes whose 
group names start with T. If an Replicat is not running, an error is returned. 

command

The command for the Replicat process. 

DEPENDENCYINFO|DEPINFO [TXNCOUNT num]

Prints out information from the PR transaction dependency graph. 
First, it shows the transaction groups currently being executed and then 
the transactions waiting on some other due to a dependency.

The following example prints the dependency information for the Rep3 
Replicat:

OGG (... demo) 6&gt; send replicat rep3 depinfo 

Sending depinfo request to REPLICAT REP3 ... 

Scheduler 0: 
Transaction groups currently being executed: 
Group 0:0.3.32.1595, 0.2.12.1720, 0.8.23.1690, 0.6.18.1871 
Group 1:0.8.15.1692, 0.1.13.1285, 0.10.17.1319, 0.3.18.1595 
Group 2:0.4.26.1158, 0.8.11.1690, 0.5.8.1580, 0.9.17.1660 
Group 3:0.5.4.1587, 0.2.10.1693, 0.9.9.1670 
Waiting transactions: 
Transaction with XID 0.6.29.1872 is waiting on transaction with XID 
0.5.23.1583 
Transaction with XID 0.8.2.1693 is waiting on transaction with XID 
0.9.30.1668 
Transaction with XID 0.10.16.1312 is waiting on transaction with XID 
0.3.11.1592 
Transaction with XID 0.2.15.1695 is waiting on transaction with XID 
0.9.18.1664 
Transaction with XID 0.9.8.1631 is waiting on transaction with XID 
0.7.20.1187 
Transaction with XID 0.1.28.1290 is waiting on transaction with XID 
0.4.30.1156 
Transaction with XID 0.5.13.1582 is waiting on transaction with XID 
0.8.14.1689 
Transaction with XID 0.3.12.1597 is waiting on transaction with XID 
0.7.31.1184 
Transaction with XID 0.10.4.1319 is waiting on transaction with XID 
0.6.13.1873 
Transaction with XID 0.4.10.1152 is waiting on transaction with XID 
0.7.19.1187 


-------------------------------------------------
SET DEBUG 

Use SET DEBUG  to enable or disable debugging mode for the AdminClient. By
default, this is set by the value of the environment variable, ADMINCLIENT_DEBUG.

Use the SHOW command to see the value of the SET DEBUG variable.

ON 

Debugging mode is enabled.

OFF 

Debugging mode is disabled. This is the default.


-------------------------------------------------

SET EDITOR

Use SET EDITOR to change the default text editor for the current session of 
AdminClient. The default editors are Notepad for Windows and vi for UNIX and 
Linux. By default, this is set by the value of the environment variable, EDITOR.

Use the SHOW command to see the value of the SET EDITOR variable.

command 

Any text editor. 

Example 

The following example changes the default editor to Wordpad. 

SET EDITOR wordpad 


-------------------------------------------------
SET PAGER   

Use SET PAGER to set the default text viewer program for viewing parameter and 
report files. By default, this is set by the value of the environment variable, PAGER;
on UNIX and Linux is defaults to less and on more on Windows.

Use the SHOW command to see the value of the SET PAGER variable.

command

Any text viewer.

 
-------------------------------------------------
SHELL

Use SHELL to execute shell commands from within the interface. This
command is run on the local system and not on the system where the
Administration Server or Service Manager is running.

command 

The system command to execute. 

Example

SHELL ls -l *.obey


-------------------------------------------------
SHOW

Use SHOW to display the Oracle GoldenGate environment variables. 

Example

Following is sample output for this command:

Current directory: /scratch/ogg/sa/bin
DEBUG        : OFF
EDITOR        : vi
PAGER        : more


-------------------------------------------------
START DEPLOYMENT

Use START DEPLOYMENT to start the specified Oracle GoldenGate deployments.

deployment-name-wildcard 

The name of the deployment or a wildcard (*) to specify multiple 
deployments. For example, T* sends the command to all deployments whose 
group names start with T. 


-------------------------------------------------
START DISTPATH  

Use START DISTPATH  to start a distribution path. To confirm that the
distribution path has started, use the INFO DISTPATH command. To change the
distribution path start point, use the ALTER DISTPATH command.

path-name 

The distribution path name. 


-------------------------------------------------

START ER 

Use START ER  to start the specified wildcarded groups.

group-name-wildcard 

The name of the Extract or Replicat group or a wildcard (*) to specify multiple 
groups. For example, T* starts all processes whose group names start with T.


-------------------------------------------------
START EXTRACT 

Use START EXTRACT to start one or more Extract process. To confirm that Extract 
has started, use the INFO EXTRACT or STATUS EXTRACT command. Extract can be 
started at its normal start point (from initial or current checkpoints) or 
from an alternate, user-specified position in the data source. 

Normal Starting Point 

Without options, START EXTRACT directs a primary Extract to start processing at 
one of the following locations in the data source to maintain data integrity: 

* After graceful or abnormal termination: At the first unprocessed transaction 
in the data source from the previous run, as represented by the current read checkpoint. 

* First-time startup after the group was created: At the start point specified 
with the ADD EXTRACT command. 

Alternate Starting Point 

Before starting Extract with ATCSN or AFTERCSN, you must establish a physical 
starting location with one of the following commands: 

* ADD EXTRACT with the BEGIN option set to a timestamp that is earlier than the 
CSN value specified with ATCSN or AFTERCSN. The transaction log that contains 
the timestamp and every log thereafter must be available on the system before 
Extract is started. 

* ALTER EXTRACT to the sequence number of the log that contains the CSN 
specified with ATCSNor AFTERCSN. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. For 
example, T* starts all Extract groups whose names begin with T. 

ATCSN csn | AFTERCSN csn 

Specifies an alternate start point. 

    ATCSN 
    Directs Extract to position its start point at the first transaction that 
    has the specified CSN. Any transactions in the data source that have CSN 
    values less than the specified one are skipped. 

    AFTERCSN 
    Directs Extract to position its start point at the beginning of the first 
    transaction after the one that has the specified CSN. Any transactions in 
    the data source that have CSN values that are less than, or equal to, the 
    specified one are skipped. 

    csn 
    Specifies a CSN value. Enter the CSN value in the format that is valid for 
    the database. Extract abends if the format is invalid and writes a message 
    to the report file. To determine the CSN to supply after an initial load is 
    complete, use the serial identifier at which the load utility completed. 
    Otherwise, follow the instructions in the initial load procedure for 
    determining when to start Extract. 

The following are additional guidelines to observe when using ATCSN and AFTERCSN: 

* The CSN is stored in the file header so that it is available to downstream processes. 

* When a record that is specified with a CSN is found, Extract issues a checkpoint. 
The checkpoint ensures that subsequent Extract startups begin from the requested 
location, and not from a point prior to the requested CSN. 

* You must establish a physical start point in the transaction log or trail for 
Extract with ADD EXTRACT or ALTER EXTRACT before using ATCSN or AFTERCSN. These 
options are intended to be an additional filter after Extract is positioned to 
a physical location in the data source. 


Examples 

Example 1 

START EXTRACT finance 

Example 2 

START EXTRACT finance ATCSN 684993 

Example 3 

START EXTRACT finance AFTERCSN 684993 

-------------------------------------------------
START REPLICAT

Use START REPLICAT to start one or more Replicat processes. To confirm that Replicat 
has started, use the INFO REPLICAT or STATUS REPLICAT command. 

When starting an integrated Replicat group for an Oracle target database, 
START REPLICAT automatically registers Replicat with the target database. 

A coordinated Replicat can only be started as a whole. There is no option 
to start individual threads. If the prior shutdown of a coordinated Replicat 
was not clean, the threads may have stopped at different positions in the 
trail file. If this happens, START REPLICAT writes a warning if the parameter 
file was changed since the prior run and raises an error if the number of 
threads was changed. To resolve these problems and start Replicat again, 
see Administering Oracle GoldenGate. 

Normal Starting Point 

Replicat can be started at its normal start point (from initial or current 
checkpoints) or from an alternate, user-specified position in the trail. 

START REPLICAT, without any options, causes Replicat to start processing 
at one of the following points to maintain data integrity: 

* After graceful or abnormal termination: At the first unprocessed transaction 
in the trail from the previous run, as represented by the current read 
checkpoint. 

* First-time startup after the group was created: From the beginning of 
the active trail file (seqno 0, rba 0). 

Alternate Starting Point 

The SKIPTRANSACTION, ATCSN, and AFTERCSN options of START REPLICAT cause 
Replicat as a whole, or specific threads of a coordinated Replicat, to 
begin processing at a transaction in the trail other than the normal start 
point. Use these options to: 

* Specify a logical recovery position when an error prevents Replicat from 
moving forward in the trail. Replicat can be positioned to skip the 
offending transaction or transactions, with the understanding that the 
data will not be applied to the target. 

* Skip replicated transactions that will cause duplicate-record and missing-record 
errors after a backup is applied to the target during an initial load. These 
options cause Replicat to discard transactions that occurred earlier than the
most recent set of changes that were captured in the backup. You can map the 
value of the serial identifier that corresponds to the completion of the backup 
to a CSN value, and then start Replicat to begin applying transactions from 
the specified CSN onward. 


Note: 
Skipping a transaction, or starting at or after a CSN, might cause Replicat to 
start more slowly than normal, depending on how much data in the trail must be 
read before arriving at the appropriate transaction record. To view the startup 
progress, use the SEND REPLICAT command with the STATUS option. To omit the need 
for Replicat to read through transactions that ultimately will be skipped, you 
can use the ATCSN or AFTERCSN option when starting Extract, so that those 
transactions are omitted from the trail. See START EXTRACT. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. For 
example, T* starts all Replicat groups whose names begin with T. 

SKIPTRANSACTION 

Causes Replicat to skip the first transaction after its expected startup 
position in the trail. All operations from that first transaction are excluded. 

If the MAXTRANSOPS parameter is also being used for this Replicat, it is possible 
that the process will start to read the trail file from somewhere in the middle 
of a transaction. In that case, the remainder of the partial transaction is skipped 
and Replicat resumes normal processing from the next begin-transaction record 
in the file. The skipped records are written to the discard file if the DISCARDFILE
parameter is being used; otherwise, a message is written to the report file that 
is similar to: 

User requested START SKIPTRANSACTION. The current transaction will be skipped. 
Transaction ID txid, position Seqno seqno, RBA rba 

SKIPTRANSACTION is valid only when the trail that Replicat is reading is part of 
an online change synchronization configuration (with checkpoints). Not valid 
for task-type initial loads (where SPECIALRUN is used with ADD REPLICAT). 

ATCSN csn| AFTERCSN csn 
Sets a user-defined start point at a specific CSN. When ATCSN or AFTERCSN is 
used, a message similar to one of the following is written to the report file: 

User requested start at commit sequence number (CSN) csn-string 

User requested start after commit sequence number (CSN) csn-string 

General information about these options: 

* Valid only when the trail that Replicat is reading is part of an online change 
synchronization configuration (with checkpoints). Not valid for task-type initial 
loads (where SPECIALRUN is used with ADD REPLICAT). 

* To support starting at, or after, a CSN, the trail must be of Oracle GoldenGate 
version 10.0.0 or later, because the CSN is stored in the first trail record of 
each transaction. If Replicat is started with AFTERCSN against an earlier trail 
version, Replicat will abend and write an error to the report stating that the 
trail format is not supported. 

    ATCSN 

    Causes Replicat to start processing at the transaction that has the specified 
    CSN. Any transactions in the trail that have CSN values that are less than 
    the specified one are skipped. 

    AFTERCSN 

    Causes Replicat to start processing at the transaction that occurred after 
    the one with the specified CSN. Any transactions in the trail that have CSN 
    values that are less than, or equal to, the specified one are skipped. 

    csn 

    Specifies a CSN value. Enter the CSN value in the format that is valid for 
    the database. Replicat abends if the format is invalid and writes a message 
    to the report file. To determine the CSN to supply after an initial load 
    is complete, use the commit identifier at which the load utility completed 
    the load. Otherwise, follow the instructions in the initial load procedure 
    for determining when to start Replicat. 

FILTERDUPTRANSACTIONS | NOFILTERDUPTRANSACTIONS 

Causes Replicat to ignore transactions that it has already processed. Use when 
Extract was repositioned to a new start point (see the ATCSN or AFTERCSN option of 
START EXTRACT) and you are confident that there are duplicate transactions 
in the trail that could cause Replicat to abend. This option requires the use 
of a checkpoint table. If the database is Oracle, this option is valid only 
for Replicat in nonintegrated mode. In case of Integrated mode and automatic 
target trail file regeneration, the Integrated mode handles the duplicate 
transactions transparently. The default is FILTERDUPTRANSACTIONS. 

THREADS thread-list 
Valid for SKIPTRANSACTION, ATCSN, and AFTERCSN when Replicat is in coordinated 
mode. Not valid for START REPLICAT without those options. Starts the specified 
Replicat thread or threads at the specified location. 

    thread-list 

    A comma-delimted list of ranges in the format of threadIDlow-threadIDhigh,
    threadIDlow-threadIDhigh. 


Examples 

Example 1 

START REPLICAT finance 

Example 2 

The following starts Replicat at an Oracle-specific CSN. 

START REPLICAT finance, ATCSN 6488359 

Example 3 

The following causes threads 4 and 5 of a coordinated Replicat to skip 
the first transaction after their last checkpoint when Replicat is started. 
If this were a 10-thread coordinated Replicat, threads 0-3 and 6-10 would 
all start at the normal start point, that of their last checkpoint. 

START REPLICAT fin SKIPTRANSACTION THREADS(4-5) 

Example 4 

The following example causes threads 1-3 of a coordinated Replicat to 
start at CSN 6488359, threads 9-10 to start after CSN 6488360, and threads 
7 and 8 to skip the first transaction after its last checkpoint. 

START REPLICAT fin ATCSN 6488359 THREADS(1-3), AFTERCSN 6488360 
THREADS(9-10), SKIPTRANSACTION THREADS(7,8) 

-------------------------------------------------
START SERVICE 

Use START SERVICE to start the specified Oracle GoldenGate services.

service-name-wildcard

The name of an service or a wildcard (*) to specify multiple services. Valid
services are ADMINSRVR, DISTSRVR, RECVSRVR, and PMSRVR.

Example

START SERVICE ADMIN*


-------------------------------------------------
STATS DISTPATH 

Use STATS DISTPATH  to get the statistics for a distribution path.

path-name


The name of the distribution path.


------------------------------------------------
STATS ER 

Use STATS ER to get the processing statistics for the specified wildcarded groups.

group-name-wildcard 

The name of a group or a wildcard (*) to specify multiple groups. For 
example, T* starts all groups whose names begin with T.


-------------------------------------------------
STATS EXTRACT 

Use STATS EXTRACT to display statistics for one or more Extract groups. The output 
includes DML and DDL operations that are included in the Oracle GoldenGate 
configuration. 

To get the most accurate number of operations per second that are being processed, 
do the following. 

1. Issue the STATS EXTRACT command with the RESET option. 

2. Issue the STATS EXTRACT REPORTRATE command. The LATEST STATISTICS field shows 
the operations per second. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. For 
example, T* returns statistics for all Extract groups whose names start with T. 

TOTAL 

Displays totals since process startup. 

    DAILY 

    Displays totals since the start of the current day. 

    HOURLY 

    Displays totals since the start of the current hour. 

    LATEST 

    Displays totals since the last RESET command. 

    RESET 
    Resets the counters in the LATESTstatistical field. 

TABLE table-name 

Displays statistics only for the specified table or a group of tables 
specified with a wildcard (*). The table name or wildcard specification 
must be fully qualified with the two-part or three-part name, for example 
hr.empor *.*.*. 

TOTALSONLY table-name 

Summarizes the statistics for the specified table or a group of tables 
specified with a wildcard (*). The table name or wildcard specification 
must be fully qualified with the two-part or three-part name, for example 
hr.empor *.*.*. 

REPORTCDR 

Shows statistics for Conflict Detection and Resolution. Statistics include: 

* Total CDR conflicts 

* CDR resolutions succeeded 

* CDR resolutions failed 

* CDR INSERTROWEXISTS conflicts 

* CDR UPDATEROWEXISTS conflicts 

* CDR DELROWEXISTS conflicts 

* CDR DELROWMISSING conflicts 

REPORTCHARCONV 

Use only when TABLE parameters have a TARGET clause and character-set 
conversion is performed. The following statistics are added to the STATS 
output: 

Total column character set conversion failure: the number of validation 
or conversion failures in the current Extract run. 

Total column data truncation: the number of times that column data was 
truncated in the current Extract run as the result of character set conversion 

REPORTFETCH | NOREPORTFETCH 

Controls whether or not statistics about fetch operations are included 
in the output. The default is NOREPORTFETCH. See STATOPTIONS for defaults 
that control fetching and options for altering fetch behavior. The output of 
REPORTFETCH is as follows: 

* row fetch attempts: The number of times Extract attempted to fetch a column 
value from the database when it could not obtain the value from the transaction log. 

* fetch failed: The number of row fetch attemptsthat failed. 

* row fetch by key: Valid for Oracle. The number of row fetch attempts that 
were made by using the primary key. The default is to fetch by row ID. 


REPORTRATE time-units 

Displays statistics in terms of processing rate rather than absolute values. 

Valid values: 

HR 
MIN 
SEC 

Examples 

Example 1 

The following example displays total and hourly statistics per minute for a 
specific table, and it also resets the latest statistics and outputs fetch 
statistics. 
STATS EXTRACT finance, TOTAL, HOURLY, TABLE hr.acct, REPORTRATE MIN, RESET, 
REPORTFETCH 

Example 2 

STATS EXTRACT ext, LATEST, REPORTFETCH 


-------------------------------------------------
STATS REPLICAT

Use STATS REPLICAT to display statistics for one or more Replicat groups. 
Thread statistics for a coordinated Replicat group are provided as follows. 

Thread Lag Gap 

The difference between the maximum lag and the minimum lag among all threads. 

Coordinated Total DDLs 
The total number of coordinated DDL transactions. 

Coordinated Total PK-Update Transactions 
The total number of coordinated transactions that involved an update to a 
primary key. 

Coordinated Total EMI Transactions 
The total number of coordinated EVENTACTIONS events. 

Total Transactions with User-requested Coordination 
The total number of coordinations that were explicitly requested in the 
configuration by means of the COORDINATED option of the MAP parameter. 

Average Coordination Time 
The average time (in seconds) spent in coordination among all threads. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. 
For example, T* shows statistics for all Replicat groups whose names begin with T. 


TOTAL 

Displays totals since process startup. 

    DAILY 

    Displays totals since the start of the current day. 

    HOURLY 

    Displays totals since the start of the current hour. 

    LATEST 

    Displays totals since the last RESET command. 

    RESET 

    Resets the counters in the LATEST statistical field. 

TABLE table-name 

Displays statistics only for the specified table or a group of tables 
specified with a wildcard (*). 

TOTALSONLY table-name 

Summarizes the statistics for the specified table or a group of tables 
specified with a wildcard (*). 

REPORTCDR 

Shows statistics for Conflict Detection and Resolution. Statistics include: 

* Total CDR conflicts 

* CDR resolutions succeeded 

* CDR resolutions failed 

* CDR INSERTROWEXISTS conflicts 

* CDR UPDATEROWEXISTS conflicts 

* CDR DELROWEXISTS conflicts 

* CDR DELROWMISSING conflicts 

REPORTCHARCONV 

Reports statistics for character validation when character-set conversion 
is performed. The following statistics are added to the STATS output: 

Total column character set conversion failure: the number of validation 
or conversion failures in the current Replicat run. 

Total column data truncation: the number of times that column data was 
truncated in the current Replicat run as the result of character set conversion.

REPORTDETAIL | NOREPORTDETAIL 

Controls whether or not the output includes operations that were not replicated 
as the result of collision errors. These operations are reported in the 
regular statistics (inserts, updates, and deletes performed) plus as 
statistics in the detail display, if enabled. For example, if 10 records 
were insert operations and they were all ignored due to duplicate keys, the 
report would indicate that there were 10 inserts and also 10 discards due to 
collisions. The default is REPORTDETAIL. See &#1299;TATOPTIONS&#1326; 

REPORTRATE time-units

Displays statistics in terms of processing rate rather than absolute values. 

    HR 
    Sets the processing rate in terms of hours. 

    MIN 
    Sets the processing rate in terms of minutes. 

    SEC 
    Sets the processing rate in terms of seconds. 

Examples 

Example 1
 
The following example displays total and hourly statistics per minute for a specific 
table, and it also resets the latest statistics. Statistics for discarded operations 
are not reported. 

STATS REPLICAT finance, TOTAL, HOURLY, TABLE sales.acct, REPORTRATE MIN, RESET, 
NOREPORTDETAIL 

Example 2 

The following example displays the same statistics as the previous example, but 
for thread 3 of a coordinated Replicat group. 

STATS REPLICAT fin003, TOTAL, HOURLY, TABLE sales.acct, REPORTRATE MIN, RESET, 
NOREPORTDETAIL 


-------------------------------------------------
STATUS DEPLOYMENT

Use STATUS DEPLOYMENT to see the status of the specified Oracle GoldenGate deployments.

deployment-name-wildcard 

The name of a deployment or a wildcard (*) to specify multiple deployments. For 
example, T* displays the status of all deployments whose names begin with T.


-------------------------------------------------
STATUS ER  

Use STATUS ER to get the state of the specified wildcarded Extract or Replicat groups.

STATUS ER group-name-wildcard

group-name-wildcard 

The name of a  group or a wildcard (*) to specify multiple groups. 
For example, T* shows statistics for all groups whose names begin with T.


-------------------------------------------------
STATUS EXTRACT 

Use STATUS EXTRACT to determine whether or not an Extract is running. A status 
of RUNNING can mean one of the following: 

* Active: Running and processing (or able to process) data. This is the 
normal state of a process after it is started. 

* Suspended: The process is running, but suspended due to an EVENTACTIONS SUSPEND
action. In a suspended state, the process is not active, and no data can be 
processed, but the state of the current run is preserved and can be continued by 
issuing the RESUME command in AdminClient. The RBA in the INFO command reflects the last 
checkpointed position before the suspend action. To determine whether the state 
is active or suspended, issue the SEND EXTRACT command with the STATUS option. 

STATUS EXTRACT group-name-wildcard 
[ TASKS | ALLPROCESSES ]

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. 
For example, T* returns status for all Extract groups whose names begin with T. 

TASKS 

Displays status only for Extract tasks. By default, tasks are not displayed 
unless you specify a single Extract group (without wildcards). 

ALLPROCESSES 

Displays status for all Extract groups, including tasks. 

Examples 

Example 1 

STATUS EXTRACT finance 

Example 2 

STATUS EXTRACT fin* 


-------------------------------------------------
STATUS REPLICAT

Use STATUS REPLICAT to determine whether or not Replicat is running. There are 
the following four possible statuses: 

Abended 

The process has abnormally ended. 

Running 

Means one of the following: 

* Active: Running and processing (or able to process) data. This is the normal 
state of a process after it is started. 

* Suspended: The process is running, but suspended due to an EVENTACTIONS SUSPEND
action. In a suspended state, the process is not active, and no data can be 
processed, but the state of the current run is preserved and can be continued 
by issuing the RESUME command in AdminClient. The RBA in the INFO command reflects the 
last checkpointed position before the suspend action. To determine whether the 
state is active or suspended, issue a SEND EXTRACT|REPLICAT group_name STATUS
command. For more information, see SEND EXTRACT or SEND REPLICAT. 

Starting 

The process is starting. 

Stopped 

The process was stopped. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple 
groups. For example, T* shows status for all Replicat groups whose names 
begin with T. 

TASKS 

Displays status only for Replicat tasks. By default, tasks are not displayed 
unless you specify a single Replicat group (without wildcards). 

ALLPROCESSES 

Displays status for all Replicat groups, including tasks. 

Examples 

Example 1 

STATUS REPLICAT finance 

Example 2 

STATUS REPLICAT fin*

-------------------------------------------------
STATUS SERVICE 

Use STATUS SERVICE to display status of the specified Oracle GoldenGate services.

service-name-wildcard 

The name of an service or a wildcard (*) to specify multiple services. For 
example, T* statuses all services whose names begin with T.


-------------------------------------------------
STOP DEPLOYMENT  

Use STOP DEPLOYMENT to stop one or more deployments.

deployment-name-wildcard

The name of the deployment or a wildcard (*) to specify multiple deployments. For 
example, P* stops all services whose names begin with P.

Example


STOP DEPLOYMENT Phoenix


-------------------------------------------------
STOP DISTPATH  

Use STOP DISTPATH to stop a distribution path.

path-name

The name of the distribution path.


-------------------------------------------------
STOP ER  

Use STOP ER to stop the specified wildcarded groups. 

group-name-wildcard 

The name of a Extract or Replicat group or a wildcard (*) to specify multiple 
groups. For example, T* shows status for all groups whose names 
begin with T. 

!

(Exclamation point) Bypasses the prompt that confirms intent to stop the groups.


-------------------------------------------------
STOP EXTRACT 

Use STOP EXTRACT to stop Extract gracefully. The command preserves the state 
of synchronization for the next time Extract starts. 

If there are open, long-running transactions when you issue STOP EXTRACT, you 
might be advised of the oldest transaction log file that will be needed for 
that transaction when Extract is restarted. You can use the SEND EXTRACT option 
of SHOWTRANS to view details and data of those transactions and then, if desired, 
use the SKIPTRANS or FORCETRANS options to skip the transaction or force it to be 
written as a committed transaction to the trail. See SEND EXTRACT. 

group-name-wildcard 

The name of an Extract group or a wildcard (*) to specify multiple groups. 
For example, T* stops all Extract processes for groups whose names begin with T. 

!

(Exclamation point) Bypasses the prompt that confirms intent to stop the Extract. 

Example

STOP EXTRACT finance 


-------------------------------------------------
STOP REPLICAT

Use STOP REPLICAT to stop Replicat cleanly. This command preserves the state 
of synchronization for the next time Replicat starts. 

In a clean shutdown of a coordinated Replicat, the coordinator thread attempts 
to stop all of the threads on the same transaction boundary. If the shutdown 
of a coordinated Replicat is not clean, the threads may stop at different 
positions in the trail file. If this happens, START REPLICAT writes a warning 
if the parameter file was changed since the prior run and raises an error if 
the number of threads was changed. To resolve these problems and start Replicat 
again, see Administering Oracle GoldenGate. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. 
For example, T* stops all Replicat groups whose names begin with T. 

! 
(Exclamation point) Stops Replicat immediately. The transaction is stopped 
and the process terminates. 

Example 

STOP REPLICAT finance 

-------------------------------------------------
STOP SERVICE 

Use this to stop the specified Oracle GoldenGate services.

service-name-wildcard

The name of an service or a wildcard (*) to specify multiple services. For 
example, T* stops all services whose names begin with T.


-------------------------------------------------
SYNCHRONIZE REPLICAT

Use SYNCHRONIZE REPLICAT to return all of the threads of a coordinated Replicat 
to the same position in the trail file after an unclean shutdown. This position 
is the maximum checkpoint position of all of the threads, in other words, the 
most recent trail record processed among all of the threads. When SYNCHRONIZE 
REPLICAT is issued, all threads are started and allowed to process transactions 
until they reach the maximum checkpoint position, and then Replicat stops. 

For more information about how to use SYNCHRONIZE REPLICAT to recover a 
coordinated Replicat after an unclean shutdown, or to enable repartitioning 
of data among different threads, see Administering Oracle GoldenGate. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. 
For example, T* synchronizes the threads of all Replicat groups whose names 
begin with T. The threads synchronize to the same position within their group, 
not to the same position across all Replicat groups being synchronized with 
this command. 

Example 

SYNCHRONIZE REPLICAT repA 


-------------------------------------------------
UNDELETE MASTERKEY VERSION 

Use the UNDELETE MASTERKEY VERSION command to remove the deletion mark from a 
master key version, thus retaining that version if the PURGE WALLET
command is used. Only one version can be unmarked per UNDELETE MASTERKEY
command. See DELETE MASTERKEY to mark a version of a master key for 
deletion. 

version-number 

The version that is to be unmarked for deletion. 

Example 

This command unmarks version 3 of the master key and returns a message 
similar to the one shown. 

UNDELETE MASTERKEY VERSION 3 
Version 3 of Masterkey 'OGG_DEFAULT_MASTERKEY' undeleted from wallet 
at location './ wallet'. 

-------------------------------------------------
UNREGISTER EXTRACT 

Use UNREGISTER EXTRACT to remove the registration of an Extract group from an 
Oracle Database. UNREGISTER EXTRACT is valid only for a primary Extract group. 

To register an Extract group with the database, use the REGISTER EXTRACT command. 

To upgrade an Extract from classic capture mode to integrated capture mode, use 
the ALTER EXTRACT command. 

group-name 

The name of the Extract group that is to be unregistered from the database. Do 
not use a wildcard. This group must currently be registered with the database. 

LOGRETENTION 

Disables log retention for the specified Extract group and removes the underlying
 
Oracle Streams capture process. Use UNREGISTER EXTRACT with LOGRETENTION only if 
you no longer want to capture changes with this Extract group. The log-retention 
feature is controlled with the LOGRETENTION option of the TRANLOGOPTIONS parameter. 

Before using UNREGISTER EXTRACT with LOGRETENTION, stop Extract with the STOP EXTRACT 
command. Next, issue the DBLOGIN command with the privileges shown in Examples 1-2. 

DATABASE 

Disables integrated capture mode for the Extract group. 

This command removes the database capture (mining) server that has the same name 
as the Extract group. For additional information about support for, and 
configuration of, the Extract capture modes, see Using Oracle 
GoldenGate for Oracle Database. 

Before using UNREGISTER EXTRACT with DATABASE, do the following: 

1. Stop Extract with the STOP EXTRACT command. 

2. Log in to the mining database with the DBLOGIN or MININGDBLOGIN command with the 
privileges granted in the dbms_goldengate_auth.grant_admin_privilege procedure. 
For local capture, DBLOGINis required. For downstream capture, DBLOGIN and 
MININGDBLOGIN are both required. 

3. Delete the Extract group with DELETE EXTRACT. 

Examples 

Example 1
 
UNREGISTER EXTRACT sales LOGRETENTION 

Example 2 

UNREGISTER EXTRACT sales DATABASE 


-------------------------------------------------
UNREGISTER REPLICAT

Use the UNREGISTER REPLICAT command to unregister a Replicat group from a 
target Oracle Database to disable integrated Replicat mode. Use this 
command only if you forcibly deleted the Replicat group. UNREGISTER REPLICAT
should not be used when deleting Replicat in the normal manner, where you 
first stop Replicat and then issue the DELETE REPLICAT command. 

Before issuing this command, issue the DBLOGIN command as the Replicat 
database user with privileges granted through 
dbms_goldengate_auth.grant_admin_privilege. 

group-name-wildcard 

The name of a Replicat group or a wildcard (*) to specify multiple groups. 
For example, T* unregisters all Replicat groups whose names begin with T. 

DATABASE 

Required keyword to unregister from the target database. Removes the database 
inbound server that is associated with this Replicat. 

Example 

UNREGISTER REPLICAT sales DATABASE 

-------------------------------------------------
UPGRADE CHECKPOINTTABLE 

Not valid for Replicat for Java, Oracle GoldenGate Applications Adapter, or Oracle 
GoldenGate for Big Data. 

Use the UPGRADE CHECKPOINTTABLE command to add a supplemental checkpoint table when 
upgrading Oracle GoldenGate. 

table-name 

The name of the checkpoint table. The table name is required and must include the schema
name. 

Example 

UPGRADE CHECKPOINTTABLE ggs.fin_check 

-------------------------------------------------
VERSIONS

Use VERSIONS to display operating system and database version information. For 
ODBC connections, the driver version is also displayed. To include database 
information in the output, issue a DBLOGIN command before issuing VERSIONS to 
establish a database connection. 


-------------------------------------------------
VIEW DISCARD 

Use VIEW DISCARD to display the discard file that is generated by Extract or Replicat. 
The SET PAGER value is used to determine pagination of the output.

report-name 

The name of the report to display the discard file. For EXTRACT "EXX", these report 
names are valid:

  - EXX
  - EXX0
  - EXX1
  - ...
  - EXX9

No other values are valid

-------------------------------------------------
VIEW ENCKEYS

Use VIEW ENCKEYS to display the  contents of the ENCKEYS file in 
read-only mode on-screen. 


-------------------------------------------------
VIEW GLOBALS 

Use VIEW GLOBALS to display the contents of the GLOBALS parameter file in read-only 
mode on-screen. The SET PAGER value is used to determine pagination of the output.


-------------------------------------------------
VIEW MESSAGES 

Use VIEW MESSAGES to display the Oracle GoldenGate message log (ggserr.log file). The 
SET PAGER value is used to determine pagination of the output.


-------------------------------------------------
VIEW PARAMS

Use VIEW PARAMS to view the contents of a parameter file. The SET PAGER value 
is used to determine pagination of the output.

file-name 

Shows the specified file. 

Example

VIEW PARAMS finance 


-------------------------------------------------
VIEW REPORT


Use VIEW REPORT to view the process report that is Generated by Extract or Replicat. 
Each process generates a new report and discard file upon startup. The SET PAGER 
value is used to determine pagination of the output.

Reports and discard files are aged whenever a process starts. Old files are 
appended with a sequence number, for example finance0.rpt, finance1.rpt, and 
so forth, or discard0.dsc, discard1.dsc, and so forth. To view old files, use 
the [n] option. To view the current report or discard file, use the command 
without the [n] option. 

report-name 

For EXTRACT "EXX", these report names are valid:

  - EXX
  - EXX0
  - EXX1
  - ...
  - EXX9

No other values are valid

Example

The following displays an old report file (number 3) for the ordersgroup. 

VIEW REPORT orders3 


-------------------------------------------------

</pre></div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment350">
<tr>
<td class="cellalignment357">
<table class="cellalignment355">
<tr>
<td class="cellalignment354"><a href="oracle-goldengate-admin-client-commands.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment354"><a href="oracle-goldengate-common-components.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment359">
<table class="cellalignment353">
<tr>
<td class="cellalignment354"><a href="http://docs.oracle.com/goldengate/c1230/gg-winux/index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment354"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment354"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
