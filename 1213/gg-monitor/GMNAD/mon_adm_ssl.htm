<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using SSL Communication</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="description" content="This chapter describes how to use Secure Sockets Layer (SSL) for the Java Management Extensions (JMX) communication between Oracle GoldenGate Monitor Server and Oracle GoldenGate agents when monitoring Oracle GoldenGate instances." />
<meta name="dcterms.created" content="2014-08-01T14:32:58Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="GoldenGate Administering Oracle GoldenGate Monitor" />
<meta name="dcterms.identifier" content="E48290-03" />
<meta name="dcterms.isVersionOf" content="GMNAD" />
<link rel="Start" href="../../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="mon_adm_alerts.htm" title="Previous" type="text/html" />
<link rel="Next" href="mon_adm_ins_lvl_sec.htm" title="Next" type="text/html" />
<link rel="alternate" href="GMNAD.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="GMNAD.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="GMNAD.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a>
<header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/13</span> <!-- End Header --><a id="CHDBJGIJ"></a><a id="GMNAD312"></a>
<h1 class="chapter"><span class="secnum">5</span> Using SSL Communication</h1>
<p><a id="GMNAD313"></a>This chapter describes how to use Secure Sockets Layer (SSL) for the Java Management Extensions (JMX) communication between Oracle GoldenGate Monitor Server and Oracle GoldenGate agents when monitoring Oracle GoldenGate instances.</p>
<p>The chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#CACGDADJ">Section 5.1, "Using Secure Sockets Layer (SSL)"</a></p>
</li>
<li>
<p><a href="#CHDJDAHC">Section 5.2, "Enabling SSL"</a></p>
</li>
<li>
<p><a href="#CACGBFDB">Section 5.3, "Creating Self Signed Certificates"</a></p>
</li>
<li>
<p><a href="#CACFJAAD">Section 5.4, "Using Certificate Authority (CA) Documents"</a></p>
</li>
</ul>
<a id="CACGDADJ"></a><a id="GMNAD314"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.1</span> Using Secure Sockets Layer (SSL)</h2>
<p>Oracle GoldenGate Monitor communication is both from the Oracle GoldenGate Monitor Server to the agent of the Oracle GoldenGate instance and from the agent to the server. Oracle GoldenGate Monitor supports either SSL and or secure JMX communications but not both concurrently.</p>
<a id="CHDGAFEF"></a><a id="GMNAD315"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.1.1</span> Considerations for using SSL</h3>
<p>Normally the Oracle GoldenGate Monitor Server and agents encrypt the data sent between them. Using SSL adds the following security:</p>
<ul>
<li>
<p>SSL communication between the Oracle GoldenGate Monitor Server and the Oracle GoldenGate agents must be verified by credentials in the form of certificates.</p>
</li>
<li>
<p>Information passed between Oracle GoldenGate Monitor Server and the Oracle GoldenGate agents on a network by using SSL is encrypted in a manner that helps to ensure the data will not be modified in transit by third parties.</p>
</li>
</ul>
<p>You can elect to use SSL or not to use it, but you cannot do both at the same time. If your Oracle GoldenGate Monitor Server uses SSL, all the agents that communicate with it must use SSL. The option of using SSL communication for monitoring Oracle GoldenGate instances is subject to the following:</p>
<ul>
<li>
<p>The default is not to use SSL; you must enable SSL to use it.</p>
</li>
<li>
<p>You can use SSL for monitoring Oracle GoldenGate instances on any supported Oracle GoldenGate platform except HP NonStop and IBM AS/400, which are not supported for monitoring.</p>
</li>
<li>
<p>If you use SSL, the repositories it uses, called keystores, are protected by a password. This password is stored in the Oracle Wallet on all supported platforms except IBM z/OS. For z/OS all passwords are stored in the <code>password.propterties</code> file on the <code>cfg</code> subdirectory of the installation directory.</p>
</li>
<li>
<p>Oracle GoldenGate Monitor supports only two-way SSL authentication and Oracle GoldenGate Monitor Server and Oracle GoldenGate agent use bidirectional communication. The Oracle GoldenGate Monitor Server and Agent will each sometimes act as the server (receiving requests) and sometimes as the client (sending requests).</p>
</li>
<li>
<p>Setting up SSL involves creating the keystore and certificates using the Java Keytool. This chapter describes some of the steps to generate keys and certificates for SSL, but assumes that you have knowledge of the Java Keytool and the keystore, have read the Java Keytool documentation, and are aware of the recommended security considerations.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="GMNAD316"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref133"></a>
<h3 class="sect2"><span class="secnum">5.1.2</span> Terminology</h3>
<p>The following terms are Java terms that are used in this chapter. Refer to the Java Keytool documentation for more extensive definitions and definitions of related terms.</p>
<p class="subhead2"><a id="GMNAD317"></a>Keystore</p>
<p>Keystores are databases used for SSL authentication. At a minimum, the keystore stores the private keys and certificates with corresponding public keys that are used to identify one client or one server. However, the truststore can be configured to merge into the keystore, adding the certification from other parties.</p>
<p class="subhead2"><a id="GMNAD318"></a>Certificate</p>
<p>A certificate is a digitally signed statement from an entity stating that the public key it references is valid because the signature can be verified to check authenticity.</p>
<p class="subhead2"><a id="GMNAD319"></a>Truststore</p>
<p>Truststores store the public keys and certificates from other parties that you will communicate with and from third party certification authorities (CAs) trusted to sign (issue) certificates for other entities. The truststore may be configured to merge into the keystore, so that all keys and certificates are in one place.</p>
<p class="subhead2"><a id="GMNAD320"></a>Keytool</p>
<p>Keytool is a Java utility for generating and managing keys and certificates.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJDAHC"></a><a id="GMNAD321"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.2</span> Enabling SSL</h2>
<p>Oracle GoldenGate Monitor Server and Oracle GoldenGate Monitor Agents are not enabled for SSL by default. If you decide to use SSL, you must enable the properties for the server and the agents. You must also create the keystores and ensure each resides in the designated location.</p>
<a id="GMNAD322"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref134"></a>
<h3 class="sect2"><span class="secnum">5.2.1</span> Setting SSL Properties</h3>
<p>To enable SSL, you must change a property setting for both the server and the agent .</p>
<p>For the Oracle GoldenGate Monitor Server:</p>
<ol>
<li>
<p>Navigate to the installation directory of the Oracle GoldenGate Monitor Server.</p>
</li>
<li>
<p>Edit the <code>monitor.properties</code> file to set the <code>monitor.ss</code>l property to <code>true</code>.</p>
</li>
<li>
<p>Stop and restart the Oracle GoldenGate Monitor server to activate the new settings.</p>
</li>
</ol>
<p>For each Oracle GoldenGate Monitor Agent:</p>
<ol>
<li>
<p>Navigate to the installation directory of the Oracle GoldenGate instance.</p>
</li>
<li>
<p>Edit the <code>Config.properties</code> file for the agent to set the <code>jagent.ssl</code> property to <code>true</code>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p>If you enable SSL for the Oracle GoldenGate Monitor Server, you must also enable SSL for all of the agents that communicate with the server.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDIEHFJ"></a><a id="GMNAD323"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.2.2</span> Creating the Keystore</h3>
<p>SSL requires that you create keystores to store the certificates and key pairs. You can create these using the Keytool for Java Secure Sockets Extension (JSSE). To access the Keytool documentation for Solaris/UNIX or Windows, see "JDK Tools and Utilities" at: <code><a href="http://docs.oracle.com/javase/6/docs/technotes/tools">http://docs.oracle.com/javase/6/docs/technotes/tools</a></code></p>
<p class="subhead2"><a id="GMNAD324"></a>Keystore Location</p>
<p>The keystores for Oracle GoldenGate Monitor must be stored in the following specific directories of the server and agent installation locations:</p>
<ul>
<li>
<p>The keystore with certification for the agent must be stored in the <code>dircrt</code> subdirectory off the installation directory of the Oracle GoldenGate instance. The default name is <code>jagentKeyStore</code>.</p>
</li>
<li>
<p>The keystore and certificate for the Monitor server must be stored in the <code>cert</code> subdirectory off the installation directory of the Oracle GoldenGate Monitor Server. The default name is <code>monitorKeyStore</code>.</p>
</li>
</ul>
<p>By default, the keystore file is created in the directory from which the Keytool is run. Either run the Keytool from the specified locations, or move the keystore after it is created.</p>
<p>You can change the default names of the keystores by setting the <code>jagent.keystore.file</code>, <code>jagent truststore.file</code>, <code>monitor.keystore.file</code>, or <code>monitor.truststore.file</code> properties. If the keystore and truststore files are set to the same name, that one file will be used to store both your certificates and trusted certificates from other entities.</p>
<p class="subhead2"><a id="GMNAD325"></a>Keystore Password</p>
<p>The keystore is protected by a password created when you create the certificates that identify the Oracle GoldenGate Monitor Server or Agent. This password must also be added to the Oracle Wallet (or to the <code>password.propertie</code>s file for IBM z/OS.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p>Oracle GoldenGate Monitor passwords are stored in the Oracle Wallet for all supported platforms except IBM z/OS. For z/OS, they are stored in the <code>password.propterties</code> file, which is in the <code>cfg</code> subdirectory of the installation location for the Oracle GoldenGate Monitor Server or Agent.</p>
</div>
<p>For Oracle GoldenGate Monitor Server:</p>
<ul>
<li>
<p>Add the keystore password by using the WebLogic Scripting Tool command <code>updateCred()</code>, as described in <a href="mon_adm_using.htm#i1018449">Section 2.3.1, "Changing Passwords."</a></p>
</li>
<li>
<p>If you are using a separate truststore, also add that password, also by using the <code>updateCred()</code>.</p>
</li>
</ul>
<p>For each Oracle GoldenGate agent:</p>
<ul>
<li>
<p>Add the password for the Oracle GoldenGate agent, as explained in <a href="mon_adm_jagent.htm#i1014094">Section 3.3, "Updating Oracle GoldenGate Monitor Agent Passwords."</a></p>
</li>
<li>
<p>If you are using a separate truststore, also add the truststore password by using the <code>-truststore</code> option of the utility.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACGBFDB"></a><a id="GMNAD326"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.3</span> Creating Self Signed Certificates</h2>
<p>The Java Keytool can be used to create the certificates needed to verify Oracle GoldenGate Monitor Server and the Oracle GoldenGate agents. The Keytool stores these certificates in the keystore.</p>
<a id="GMNAD327"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref135"></a>
<h3 class="sect2"><span class="secnum">5.3.1</span> Establishing a Self-signed Certificate for Monitor Server</h3>
<p>You need to first create the self-signed certificate that identifies the Oracle GoldenGate Monitor Server and then export it into the Oracle GoldenGate Monitor Agent truststore.</p>
<p class="subhead2"><a id="GMNAD328"></a>Creating the Certificate to verify Monitor Server</p>
<p>Follow these steps to create the certificate. Refer to the Keytool for Java documentation for more detail on the commands and options.</p>
<ol>
<li>
<p>Navigate to the Oracle GoldenGate Monitor Server installation directory and then to the <code>cert</code> subdirectory. This is the location of the Monitor Server keystore.</p>
</li>
<li>
<p>Create the certificate used by Monitor to verify itself and to encrypt the communication.</p>
<p>For example:</p>
<pre>
keytool -genkeypair -keystore <span class="italic">monitorkeystore</span> -keyalg <span class="italic">rsa</span> -alias <span class="italic">monalias</span> -storepass <span class="italic">keystorepw</span> -keypass <span class="italic">serverpw</span>
</pre>
<p>The option <code>-keystore</code> identifies the name of the keystore repository. If you do not use the <code>monitorkeystore</code> default name, ensure that you update the <code>monitor.properties</code> file with the name you select.</p>
<p><code>-keyalg</code> identifies the encrypting algorithm, which must be <code>rsa</code>.</p>
<p><code>-alias</code> specifies an identifier for the new keystore entry that will be created; <code><span class="codeinlineitalic">monalias</span></code> in this example.</p>
<p><code>-storepass</code> identifies the password that protects the keystore. <code>-keypass</code> identifies the password that protects the private key of the generated key pair identifying the Monitor Server. If you do not provide a password for one of these, you will be prompted to enter it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p>Record the keystore password you select so you can add it to Oracle GoldenGate Monitor Server or Agent as explained in <a href="#CHDIEHFJ">Section 5.2.2, "Creating the Keystore."</a></p>
</div>
<p>The program will prompt you to answer the following questions:</p>
<pre>
What is your first and last name?
What is the name of your organizational unit?
What is the name of your organization?
What is the name of your City or Locality?
What is the name of your State or Province?
What is the two-letter country code for this unit?
</pre>
<p>After you enter your answers, the program will display them and ask you to confirm they are correct. This information becomes part of the certificate.</p>
</li>
<li>
<p>(Optional) Verify the certificate creation by listing the entry that was created using a command similar to:</p>
<pre>
keytool -list -alias <span class="italic">monalias</span> -keystore <span class="italic">monitorkeystore</span>
</pre></li>
<li>
<p>Export the Oracle GoldenGate Monitor Server certificate from the <code><span class="codeinlineitalic">monitorkeystore</span></code> keystore to a file. For example:</p>
<pre>
keytool -exportcert -alias <span class="codeinlineitalic">monalias</span> -file <span class="codeinlineitalic">moncert.crt</span> -keystore <span class="codeinlineitalic">monitorkeystore</span> storepass <span class="codeinlineitalic">keystorepw</span>
</pre>
<p>The option <code>-file</code> identifies the file that will hold the <code><span class="codeinlineitalic">monalias</span></code> certificate after the export. <code>-keystore</code> identifies the repository that contains the <code>alias</code> that is to be exported.</p>
<p>Optionally you can generate a Certificate Signing Request (CSR) with the <code>-certreq</code> option and send the certificate to a third party CA for signing.</p>
</li>
<li>
<p>(Optional) Print the certificate information. For example:</p>
<pre>
keytool -printcert -file <span class="codeinlineitalic">moncert.crt</span>
</pre></li>
<li>
<p>Copy the Oracle GoldenGate Monitor Server certificate file created by the Keytool <code>exportcert</code> command (<code><span class="codeinlineitalic">moncert.crt</span></code> in the example) to the Oracle GoldenGate agent <code><span class="codeinlineitalic">installation location</span></code><code>/dircrt</code> directory.</p>
</li>
</ol>
<p class="subhead2"><a id="GMNAD329"></a>Importing the Server Certificate to the Agent Keystore</p>
<p>Perform the following steps to import the Oracle GoldenGate Monitor Server certificate to the agent truststore.</p>
<ol>
<li>
<p>Navigate to the location of the Oracle GoldenGate agent keystore (<code><span class="codeinlineitalic">installation location</span></code><code>/dircrt</code>).</p>
</li>
<li>
<p>Import the certificate to the Oracle GoldenGate agent keystore. For example:</p>
<pre>
keytool -importcert -alias <span class="codeinlineitalic">agentalias</span> -file <span class="codeinlineitalic">moncert.crt</span> -keystore <span class="codeinlineitalic">jagentkeystore</span> storepass <span class="codeinlineitalic">agentkeystorepw</span>
</pre>
<p>This reads the certificate from the <code><span class="codeinlineitalic">moncert.crt</span></code> file and stores it in the <code><span class="codeinlineitalic">jagentkeystore</span></code>.</p>
<p>Optionally, you can use the <code><span class="codeinlineitalic">-trustcerts</span></code> option to import additional certificates for the chain of trust from a system-wide keystore of CA certificates. For example, the following command will trigger Keytool to attempt to establish a trust path from the <code><span class="codeinlineitalic">moncert.crt</span></code> up to a self-signed certificate.</p>
<pre>
keytool -importcert -trustcacerts -alias <span class="codeinlineitalic">agentalias</span> -file <span class="codeinlineitalic">moncert.crt</span> -keystore <span class="codeinlineitalic">jagentkeystore</span> -storepass <span class="codeinlineitalic">agentkeystorepw</span>
</pre></li>
<li>
<p>(Optional) List the certificates that have been created in the keystore to verify the import. For example:</p>
<pre>
keytool -list -keystore <span class="codeinlineitalic">jagentkeystore </span>storepass <span class="codeinlineitalic">agentkeystorepw</span>
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="GMNAD330"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref136"></a>
<h3 class="sect2"><span class="secnum">5.3.2</span> Establishing a Self-signed Certificate for the Agent</h3>
<p>You need to create a self-signed certificate to verify the Oracle GoldenGate Monitor Agent and import the certificate to the Oracle GoldenGate Monitor Server.</p>
<a id="GMNAD331"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref137"></a>
<h4 class="sect3"><span class="secnum">5.3.2.1</span> Creating the Certificate to Verify the Agent</h4>
<p>Follow these steps to create the certificate for the agent. Refer to the Keytool documentation for detail on the commands and options.</p>
<ol>
<li>
<p>Navigate to the location of the Oracle GoldenGate agent keystore (<code><span class="codeinlineitalic">installation location</span></code><code>/dircrt</code>).</p>
</li>
<li>
<p>Generate the agent certificate using a Keytool command similar to the following:</p>
<pre>
keytool -genkeypair -alias <span class="codeinlineitalic">agentalias</span> -keystore <span class="codeinlineitalic">jagentkeystore</span> 
</pre>
<p>In this example we are using the same keystore, <code><span class="codeinlineitalic">jagentkeystore</span></code>, that we used for the trusted certificate from the Oracle GoldenGate Monitor Server.</p>
<p>Since we did not enter a keystore password, the Keytool will prompt the user to enter it.</p>
</li>
<li>
<p>(Optional) List the certificates in the keystore to verify the creation. For example:</p>
<pre>
keytool -list -keystore <span class="codeinlineitalic">jagentkeystore</span> -storepass <span class="codeinlineitalic">agentkeystorepw</span>
</pre></li>
<li>
<p>Export the certificate that verifies the agent into a file. For example:</p>
<pre>
keytool -exportcert -alias <span class="codeinlineitalic">agentalias</span> -file <span class="codeinlineitalic">agentclient.crt</span> -keystore <span class="codeinlineitalic">jagentkeystore</span> -storepass <span class="codeinlineitalic">agentkeystorepw</span>
</pre></li>
<li>
<p>(Optional) Print the certificate information.</p>
<pre>
keytool -printcert -file <span class="codeinlineitalic">agentclient.crt</span> 
</pre></li>
<li>
<p>Copy the certificate file (<code><span class="codeinlineitalic">agentclient.crt</span></code> in this example) to the Oracle GoldenGate Monitor Server <code><span class="codeinlineitalic">installation location</span></code><code>/cert</code> directory.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GMNAD332"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref138"></a>
<h4 class="sect3"><span class="secnum">5.3.2.2</span> Importing the Agent Certificate to the Monitor Server</h4>
<p>Follow these steps to import the certificate into the Oracle GoldenGate Monitor Server truststore.</p>
<ol>
<li>
<p>Navigate to the location of the Oracle GoldenGate Monitor Server keystore (<code><span class="codeinlineitalic">installation location</span></code><code>/cert</code>).</p>
</li>
<li>
<p>Import the agent certificate into the Oracle GoldenGate Monitor Server keystore. For example:</p>
<pre>
keytool -importcert -alias <span class="codeinlineitalic">agentalias</span> -file <span class="codeinlineitalic">agentclient.crt</span> -keystore <span class="codeinlineitalic">monitorkeystore</span> -storepass <span class="codeinlineitalic">keystorepw</span>
</pre></li>
<li>
<p>(Optional) List the certificate information to verify the import.</p>
<pre>
keytool -list -keystore <span class="codeinlineitalic">monitorkeystore</span> -storepass <span class="codeinlineitalic">keystorepw</span> 
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACFJAAD"></a><a id="GMNAD333"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.4</span> Using Certificate Authority (CA) Documents</h2>
<p>The Java Keytool can be used to request that a certificate be signed by a trusted third party. Once the Certificate Authority (CA) signs the certificate, it can be imported into a keystore or truststore to provide identification and validation.</p>
<a id="CHDGAIIE"></a><a id="GMNAD334"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.1</span> Generating a Certificate Signing Request</h3>
<p>Follow these steps to generate a Certificate Signing Request (CSR). In this example we are using different names for the keystores to avoid limiting the example to either the Oracle GoldenGate Monitor Server side or the Agent side.</p>
<ol>
<li>
<p>Generate the CSR using a Keytool command similar to the following.</p>
<pre>
keytool -certreq -v -alias <span class="codeinlineitalic">certalias</span> -file <span class="codeinlineitalic">cert.csr</span> -keypass <span class="codeinlineitalic">keypassword</span> -storepass <span class="codeinlineitalic">keystorepw</span> -keystore <span class="codeinlineitalic">keystore.jks</span> 
</pre>
<p>This command will create a file named <code><span class="codeinlineitalic">cert.csr</span></code> as specified in the <code>-file</code> option. The <code>-v</code> option signifies verbose mode, which will output more information.</p>
</li>
<li>
<p>Submit the CSR <code><span class="codeinlineitalic">cert.csr</span></code> to the third party that is to sign the certificate.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="GMNAD335"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref139"></a>
<h3 class="sect2"><span class="secnum">5.4.2</span> Importing the Certificate</h3>
<p>Once you get the signed certificate back from the third party CA, import both the signed certificate and the certificate of the CA that signed it into your keystore.</p>
<ol>
<li>
<p>Convert the CA certificates and the signed certificate into PEM format and store them in the directory of the keystore. Each certificate, including those in a chain, must be stored individually.</p>
</li>
<li>
<p>Import the top (or root) certificate in the chain, which must be the self-signed certificate of the CA, using a command similar to the following:</p>
<pre>
keytool -importcert -v -noprompt -trustcacerts -alias <span class="codeinlineitalic">rootCA</span> -file <span class="codeinlineitalic">rootCA.pem </span>-keystore <span class="codeinlineitalic">keystore.jks</span> -storepass <span class="codeinlineitalic">keystorepw</span>
</pre>
<p>In this example, <code><span class="codeinlineitalic">rootCA</span></code> is the alias of the certificate and <code><span class="codeinlineitalic">rootCA.pem</span></code> is the file that contains the top certificate in the chain.</p>
<p>If the import is successful, Keytool will display the message <code><span class="codeinlineitalic">Certificate was added to keystore</span></code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p>For some third party Certification Authorities, there may be two CA certificates in the chain: the root certificate and an intermediate CA certificate. In this case, the intermediate certificate should be imported directly after the root certificate.</p>
</div>
</li>
<li>
<p>Repeat the import for each of the certificates (<code>.pem</code> files) in the chain. Create a different <code>alias</code> for each one.</p>
</li>
<li>
<p>After all of the certificates have been successfully imported, import the signed reply certificate using a command similar to the following:</p>
<pre>
-keytool -importcert -v-alias <span class="codeinlineitalic">certalias</span> -file <span class="codeinlineitalic">cert.pem</span> -keystore <span class="codeinlineitalic">keystore</span>.jks -keypass <span class="codeinlineitalic">keypass</span> -storepass <span class="codeinlineitalic">keystorepw</span>
</pre>
<p>Use the same <code>alias</code> that you used when generating the certificate and the CSR.</p>
<p>If the import was successful, Keytool will display the message <code><span class="codeinlineitalic">Certificate reply was installed in the keystore</span></code>.</p>
</li>
<li>
<p>List all of the CA certificates that were imported.</p>
<pre>
keytool -list -keystore <span class="codeinlineitalic">keystore.jks </span>-storepass <span class="codeinlineitalic">keystorepw</span>
</pre></li>
<li>
<p>Export the public certificate using a command similar to the following, which will create the file <code><span class="codeinlineitalic">cert.cer</span></code>.</p>
<pre>
keytool -exportcert -alias <span class="codeinlineitalic">certalias</span> -file <span class="codeinlineitalic">cert.cer</span> -keystore <span class="codeinlineitalic">keystore.jks</span> -storepass <span class="codeinlineitalic">keystorepw</span>
</pre>
<p>Repeat the export for each of the certificates.</p>
</li>
<li>
<p>To import a certificate and its CA certificates to the keystore, first store all of the certificates in separate files in <code>.pem</code> format. Then import all of the certificates, starting with the top or root certificate, giving each one a different alias. For example to import the root certificate:</p>
<pre>
keytool -importcert -v -noprompt -trustcacerts -alias <span class="codeinlineitalic">IDrootCA</span> -file <span class="codeinlineitalic">IDrootCA.pem</span> -keystore <span class="codeinlineitalic">keystore.jks</span> -storepass <span class="codeinlineitalic">storepasspw</span>
</pre>
<p>Repeat the import for each of the certificates.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment24">
<tr>
<td class="cellalignment31">
<table class="cellalignment29">
<tr>
<td class="cellalignment28"><a href="mon_adm_alerts.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment28"><a href="mon_adm_ins_lvl_sec.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2011, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment33">
<table class="cellalignment27">
<tr>
<td class="cellalignment28"><a href="../../index.html"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment28"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment28"><a href="index.htm"><img width="24" height="24" src="../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment28"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
