<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>Mapping and Manipulating Data</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="description" content="This chapter describe how you can integrate data between source and target tables." />
<meta name="dcterms.created" content="2018-07-19T06:21:43Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Fusion Middleware Administering Oracle GoldenGate for Windows and UNIX" />
<meta name="dcterms.identifier" content="E66357-07" />
<meta name="dcterms.isVersionOf" content="GWUAD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2013, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="configuring-oracle-goldengate-security.htm" title="Previous" type="text/html" />
<link rel="Next" href="associating-replicated-data-metadata.htm" title="Next" type="text/html" />
<link rel="alternate" href="GWUAD.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6"></a> <span id="PAGE" style="display:none;">19/34</span> <!-- End Header -->
<a id="GWUAD392"></a><a id="GWUAD391"></a>
<h1 id="GWUAD-GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" class="sect1"><span class="enumeration_chapter">12</span> Mapping and Manipulating Data</h1>
<div>
<div><span>This chapter describe how you can integrate data between source and target tables.</span></div>
<p>This chapter includes the following sections:</p>
<ul style="list-style-type: disc;">
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-C2FDFDFF-3165-4DB4-AD91-CB629F1E2A4F">Limitations of Support</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-12D43258-167C-496A-A097-8EC9E0F0322B">Parameters that Control Mapping and Data Integration</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-1286923D-4F41-4C1D-B73F-FCE9EB2CCA87">Mapping between Dissimilar Databases</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-7D464C32-70BA-45CD-BAD2-E7F6F16C33B6">Deciding Where Data Mapping and Conversion Will Take Place</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9">Globalization Considerations when Mapping Data</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C">Selecting and Filtering Rows</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-A0B11A7F-5696-4BFD-923C-281AECA02FE0">Retrieving Before and After Values</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-5B7561FC-1CC3-4C80-AD82-AE6179EC4DE5">Selecting Columns</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-F95B57CA-8C3B-4C7B-BBA5-AB82DF66D080">Selecting and Converting SQL Operations</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9">Using Transaction History</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</li>
<li>
<p><a href="mapping-and-manipulating-data.htm#GUID-AD803728-4A08-46F5-AEEF-68D2881EB18D">Using Tokens</a></p>
</li>
</ul>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-C2FDFDFF-3165-4DB4-AD91-CB629F1E2A4F">Limitations of Support</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-12D43258-167C-496A-A097-8EC9E0F0322B">Parameters that Control Mapping and Data Integration</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-1286923D-4F41-4C1D-B73F-FCE9EB2CCA87">Mapping between Dissimilar Databases</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-7D464C32-70BA-45CD-BAD2-E7F6F16C33B6">Deciding Where Data Mapping and Conversion Will Take Place</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9">Globalization Considerations when Mapping Data</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C">Selecting and Filtering Rows</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-A0B11A7F-5696-4BFD-923C-281AECA02FE0">Retrieving Before and After Values</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-5B7561FC-1CC3-4C80-AD82-AE6179EC4DE5">Selecting Columns</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-F95B57CA-8C3B-4C7B-BBA5-AB82DF66D080">Selecting and Converting SQL Operations</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9">Using Transaction History</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-AD803728-4A08-46F5-AEEF-68D2881EB18D">Using Tokens</a><br /></li>
</ul>
</div>
<a id="GWUAD393"></a>
<div class="props_rev_3"><a id="GUID-C2FDFDFF-3165-4DB4-AD91-CB629F1E2A4F"></a>
<h2 id="GWUAD-GUID-C2FDFDFF-3165-4DB4-AD91-CB629F1E2A4F" class="sect2"><span class="enumeration_section">12.1</span> Limitations of Support</h2>
<div>
<p>The following are limitations to the support of data mapping and manipulation.</p>
<ul style="list-style-type: disc;">
<li>
<p>Oracle GoldenGate does not support the filtering, column mapping, or manipulation of large objects.</p>
</li>
<li>
<p>Some Oracle GoldenGate features and functionality do not support the use of data filtering and manipulation. Where applicable, this limitation is documented.</p>
</li>
</ul>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD394"></a>
<div class="props_rev_3"><a id="GUID-12D43258-167C-496A-A097-8EC9E0F0322B"></a>
<h2 id="GWUAD-GUID-12D43258-167C-496A-A097-8EC9E0F0322B" class="sect2"><span class="enumeration_section">12.2</span> Parameters that Control Mapping and Data Integration</h2>
<div>
<div class="section">
<p>All data selection, mapping, and manipulation that Oracle GoldenGate performs is accomplished by using one or more options of the <code class="codeph">TABLE</code> and <code class="codeph">MAP</code> parameters.</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Use <code class="codeph">TABLE</code> in the Extract parameter file.</p>
</li>
<li>
<p>Use <code class="codeph">MAP</code> in the Replicat parameter file.</p>
</li>
</ul>
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code> specify the database objects that are affected by the other parameters in the parameter file. See <a href="getting-started-oracle-goldengate-process-interfaces.htm#GUID-12E08D28-53C7-4C0A-8B37-6790A2C9C4BD">Specifying Object Names in Oracle GoldenGate Input</a> for instructions for specifying object names in these parameters.</p>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD395"></a>
<div class="props_rev_3"><a id="GUID-1286923D-4F41-4C1D-B73F-FCE9EB2CCA87"></a>
<h2 id="GWUAD-GUID-1286923D-4F41-4C1D-B73F-FCE9EB2CCA87" class="sect2"><span class="enumeration_section">12.3</span> Mapping between Dissimilar Databases</h2>
<div>
<p>Mapping and conversion between tables that have different data structures requires either a source-definitions file, a target-definitions file, or in some cases both. When used, this file must be specified with the <code class="codeph">SOURCEDEFS</code> or <code class="codeph">TARGETDEFS</code> parameter.</p>
<p>This is not applicable if you are using self-describing trail files.</p>
<p>For more information about how to create a source-definitions or target-definitions file, see <a href="associating-replicated-data-metadata.htm#GUID-6230CE3C-9C18-43E2-8C81-4847B4724E73" title="This chapter describes the uses of metadata and how to associate replicated data with metadata.">Associating Replicated Data with Metadata</a>.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD396"></a>
<div class="props_rev_3"><a id="GUID-7D464C32-70BA-45CD-BAD2-E7F6F16C33B6"></a>
<h2 id="GWUAD-GUID-7D464C32-70BA-45CD-BAD2-E7F6F16C33B6" class="sect2"><span class="enumeration_section">12.4</span> Deciding Where Data Mapping and Conversion Will Take Place</h2>
<div>
<p>If the configuration you are planning involves a large amount of column mapping or data conversion, observe the following guidelines to determine which process or processes will perform these functions.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-22C74D4B-B395-443C-9B8D-F20B9FAAB736">Mapping and Conversion on Windows and UNIX Systems</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-37B7E434-6893-4841-8ABB-1DCBB06AF4F6">Mapping and Conversion on NonStop Systems</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
<a id="GWUAD397"></a>
<div class="props_rev_3"><a id="GUID-22C74D4B-B395-443C-9B8D-F20B9FAAB736"></a>
<h3 id="GWUAD-GUID-22C74D4B-B395-443C-9B8D-F20B9FAAB736" class="sect3"><span class="enumeration_section">12.4.1</span> Mapping and Conversion on Windows and UNIX Systems</h3>
<div>
<p>When Oracle GoldenGate is operating only on Windows-based and UNIX-based systems, column mapping and conversion can be performed on the source system, on the target system, or on an intermediary system. To prevent the added overhead of this processing on the source system, you can configure the mapping and conversion to be performed on the target system or on an intermediary system.</p>
<p>In the case where there are multiple sources and one target, it might be more efficient to perform the mapping and conversion on the source. You can use one target-definitions file generated from the target tables, rather than having to manage an individual source-definitions file for each source database, which needs to be copied to the target each time the applications make layout changes.</p>
<p>For more information on which types of definitions files to use, and where, see <a href="associating-replicated-data-metadata.htm#GUID-6230CE3C-9C18-43E2-8C81-4847B4724E73" title="This chapter describes the uses of metadata and how to associate replicated data with metadata.">Associating Replicated Data with Metadata</a>.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-7D464C32-70BA-45CD-BAD2-E7F6F16C33B6">Deciding Where Data Mapping and Conversion Will Take Place</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD398"></a>
<div class="props_rev_3"><a id="GUID-37B7E434-6893-4841-8ABB-1DCBB06AF4F6"></a>
<h3 id="GWUAD-GUID-37B7E434-6893-4841-8ABB-1DCBB06AF4F6" class="sect3"><span class="enumeration_section">12.4.2</span> Mapping and Conversion on NonStop Systems</h3>
<div>
<p>If you are mapping or converting data from a Windows or UNIX system to a NonStop Enscribe target, the mapping or conversion must be performed on the Windows or UNIX source system. Replicat for NonStop cannot convert three-part or two-part SQL table names and data types to the three-part file names that are used for the Enscribe platform. Extract can format the trail data with Enscribe names and target data types.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-7D464C32-70BA-45CD-BAD2-E7F6F16C33B6">Deciding Where Data Mapping and Conversion Will Take Place</a></p>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD399"></a>
<div class="props_rev_3"><a id="GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9"></a>
<h2 id="GWUAD-GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9" class="sect2"><span class="enumeration_section">12.5</span> Globalization Considerations when Mapping Data</h2>
<div>
<p>When planning to map and convert data between databases and platforms, take into consideration what is supported or not supported by Oracle GoldenGate in terms of globalization. These considerations encompass the following topics:</p>
<p><a href="mapping-and-manipulating-data.htm#GUID-62DC3E49-BC71-4250-A080-14B81650F3E2">Conversion between Character Sets</a></p>
<p><a href="mapping-and-manipulating-data.htm#GUID-C9049E52-B13E-46D9-B119-7CBB1D231489">Preservation of Locale</a></p>
<p><a href="mapping-and-manipulating-data.htm#GUID-3FA8B525-0262-4443-80F6-8EA2471652F2">Support for Escape Sequences</a></p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-62DC3E49-BC71-4250-A080-14B81650F3E2">Conversion between Character Sets</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-C9049E52-B13E-46D9-B119-7CBB1D231489">Preservation of Locale</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-3FA8B525-0262-4443-80F6-8EA2471652F2">Support for Escape Sequences</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
<a id="GWUAD400"></a>
<div class="props_rev_3"><a id="GUID-62DC3E49-BC71-4250-A080-14B81650F3E2"></a>
<h3 id="GWUAD-GUID-62DC3E49-BC71-4250-A080-14B81650F3E2" class="sect3"><span class="enumeration_section">12.5.1</span> Conversion between Character Sets</h3>
<div>
<p>Oracle GoldenGate converts between source and target character sets if they are different, so that object names and column data are compared, mapped, and manipulated properly from one database to another. See <a href="supported-character-sets.htm#GUID-26E04A87-91E0-4DF4-ABED-26BA1F9AD9A8" title="This appendix lists the character sets that Oracle GoldenGate supports when converting data from source to target.">Supported Character Sets</a>, for a list of supported character sets.</p>
<p>To ensure accurate character representation from one database to another, the following must be true:</p>
<ul style="list-style-type: disc;">
<li>
<p>The character set of the target database must be a superset or equivalent of the character set of the source database. <span class="italic">Equivalent</span> means not equal, but having the same set of characters. For example, Shift-JIS and EUC-JP technically are not completely equal, but have the same characters in most cases.</p>
</li>
<li>
<p>If your client applications use different character sets, the database character set must also be a superset or equivalent of the character sets of the client applications.</p>
</li>
</ul>
<p>In this configuration, every character is represented when converting from a client or source character set to the local database character set.</p>
<p>A Replicat process can support conversion from one source character set to one target character set.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-83776EAC-14C7-4FA2-9939-497CA7DAF5BD">Database Object Names</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-36BD6BC7-FFE3-4FDA-A2DE-E924BB893B9E">Column Data</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9">Globalization Considerations when Mapping Data</a></p>
</div>
</div>
</div>
<a id="GWUAD401"></a>
<div class="props_rev_3"><a id="GUID-83776EAC-14C7-4FA2-9939-497CA7DAF5BD"></a>
<h4 id="GWUAD-GUID-83776EAC-14C7-4FA2-9939-497CA7DAF5BD" class="sect4"><span class="enumeration_section">12.5.1.1</span> Database Object Names</h4>
<div>
<p>Oracle GoldenGate processes catalog, schema, table and column names in their native language as determined by the character set encoding of the source and target databases. This support preserves single-byte and multibyte names, symbols, accent characters, and case-sensitivity with locale taken into account where available, at all levels of the database hierarchy.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-62DC3E49-BC71-4250-A080-14B81650F3E2">Conversion between Character Sets</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD402"></a>
<div class="props_rev_3"><a id="GUID-36BD6BC7-FFE3-4FDA-A2DE-E924BB893B9E"></a>
<h4 id="GWUAD-GUID-36BD6BC7-FFE3-4FDA-A2DE-E924BB893B9E" class="sect4"><span class="enumeration_section">12.5.1.2</span> Column Data</h4>
<div>
<p>Oracle GoldenGate supports the conversion of column data between character sets when the data is contained in the following column types:</p>
<ul style="list-style-type: disc;">
<li>
<p>Character-type columns: <code class="codeph">CHAR/VARCHAR/CLOB</code> to <code class="codeph">CHAR/VARCHAR/CLOB</code> of another character set; and <code class="codeph">CHAR/VARCHAR/CLOB</code> to and from <code class="codeph">NCHAR/NVARCHAR/NCLOB.</code></p>
</li>
<li>
<p>Columns that contain string-based numbers and date-time data. Conversions of these columns is performed between z/OS EBCDIC and non-z/OS ASCII data. Conversion is not performed between ASCII and ASCII versions of this data, nor between EBCDIC and EBCDIC versions, because the data are compatible in these cases.</p>
<div class="infobox-note" id="GUID-36BD6BC7-FFE3-4FDA-A2DE-E924BB893B9E__GUID-2AA3A7FC-B524-4008-A272-7C7482EC279C">
<p class="notep1">Note:</p>
<p>Oracle GoldenGate supports timestamp data from <code class="codeph">0001-01-03 00:00:00</code> to <code class="codeph">9999-12-31 23:59:59</code>. If a timestamp is converted from GMT to local time, these limits also apply to the resulting timestamp. Depending on the timezone, conversion may add or subtract hours, which can cause the timestamp to exceed the lower or upper supported limit.</p>
</div>
</li>
</ul>
<p>Character-set conversion for column data is limited to a direct mapping of a source column and a target column in the <code class="codeph">COLMAP</code> or <code class="codeph">USEDEFAULTS</code> clauses of the Replicat <code class="codeph">MAP</code> parameter. A direct mapping is a name-to-name mapping without the use of a stored procedure or column-conversion function. Replicat performs the character-set conversion. No conversion is performed by Extract or a data pump.</p>
<p>If the trail is written by a version of Extract that is prior to version 11.2.1, the character set for character-type columns must be supplied to Replicat with the <code class="codeph">SOURCECHARSET</code> parameter. For more information, see <a class="olink GWURF1123" target="_blank" href="../GWURF/sourcecharset.htm#GWURF1123"><span class="italic"><span id="GUID-36BD6BC7-FFE3-4FDA-A2DE-E924BB893B9E__GWURF"><cite>Reference for Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-62DC3E49-BC71-4250-A080-14B81650F3E2">Conversion between Character Sets</a></p>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD403"></a>
<div class="props_rev_3"><a id="GUID-C9049E52-B13E-46D9-B119-7CBB1D231489"></a>
<h3 id="GWUAD-GUID-C9049E52-B13E-46D9-B119-7CBB1D231489" class="sect3"><span class="enumeration_section">12.5.2</span> Preservation of Locale</h3>
<div>
<p>Oracle GoldenGate takes the locale of the database into account when comparing case-insensitive object names. See <a href="supported-locales.htm#GUID-D423055A-21A8-4A9B-9791-3945A17472C8" title="This appendix lists the locales that are supported by Oracle GoldenGate. The locale is used when comparing case-insensitive object names.">Supported Locales</a> for a list of supported locales.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9">Globalization Considerations when Mapping Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD1100"></a><a id="GWUAD1101"></a><a id="GWUAD1102"></a><a id="GWUAD404"></a>
<div class="props_rev_3"><a id="GUID-3FA8B525-0262-4443-80F6-8EA2471652F2"></a>
<h3 id="GWUAD-GUID-3FA8B525-0262-4443-80F6-8EA2471652F2" class="sect3"><span class="enumeration_section">12.5.3</span> Support for Escape Sequences</h3>
<div>
<p>Oracle GoldenGate supports the use of an escape sequence to represent a string column, literal text, or object name in the parameter file. You can use an escape sequence if the operating system does not support the required character, such as a control character, or for any other purpose that requires a character that cannot be used in a parameter file.</p>
<p>An escape sequence can be used anywhere in the parameter file, but is particularly useful in the following elements within a <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement:</p>
<ul style="list-style-type: disc;">
<li>
<p>An object name</p>
</li>
<li>
<p><code class="codeph">WHERE</code> clause</p>
</li>
<li>
<p><code class="codeph">COLMAP</code> clause to assign a Unicode character to a Unicode column, or to assign a native-encoded character to a column.</p>
</li>
<li>
<p>Oracle GoldenGate column conversion functions within a <code class="codeph">COLMAP</code> clause.</p>
</li>
</ul>
<p>Oracle GoldenGate supports the following types of escape sequence:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">\uFFFF</code> Unicode escape sequence. Any <code class="codeph">UNICODE</code> code point can be used except surrogate pairs.</p>
</li>
<li>
<p><code class="codeph">\377</code> Octal escape sequence</p>
</li>
<li>
<p><code class="codeph">\xFF</code> Hexadecimal escape sequence</p>
</li>
</ul>
<p>The following rules apply:</p>
<ul style="list-style-type: disc;">
<li>
<p>If used for mapping of an object name in <code class="codeph">TABLE</code> or <code class="codeph">MAP</code>, no restriction apply. For example, the following <code class="codeph">TABLE</code> specification is valid:</p>
<pre dir="ltr">
TABLE schema."\u3000ABC";
</pre></li>
<li>
<p>If used with a column-mapping function, any code point can be used, but only for an <code class="codeph">NCHAR/NVARCHAR</code> column. For an <code class="codeph">CHAR/VARCHAR</code> column, the code point is limited to the equivalent of 7-bit ASCII.</p>
</li>
<li>
<p>The source and target data types must be identical (for example, <code class="codeph">NCHAR</code> to <code class="codeph">NCHAR</code> ).</p>
</li>
<li>
<p>Begin each escape sequence with a reverse solidus (code point <code class="codeph">U+005C</code>), followed by the character code point. (A solidus is more commonly known as the backslash symbol.) Use the escape sequence, instead of the actual character, within your input string in the parameter statement or column-conversion function.</p>
</li>
</ul>
<div class="infobox-note" id="GUID-3FA8B525-0262-4443-80F6-8EA2471652F2__GUID-F08F18E2-1BA7-4A74-B089-F14D1CB265AD">
<p class="notep1">Note:</p>
<p>To specify an actual backslash in the parameter file, specify a double backslash. For example, the following finds a backslash in <code class="codeph">COL1: @STRFIND (COL1, '\\' )</code>.</p>
</div>
<div class="section">
<p class="subhead3">To Use the \uFFFF Unicode Escape Sequence</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The <code class="codeph">\uFFFF</code> Unicode escape sequence must begin with a lowercase <code class="codeph">u</code>, followed by exactly four hexadecimal digits.</p>
</li>
<li>
<p>Supported ranges are as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">0</code> to <code class="codeph">9</code> (<code class="codeph">U+0030</code> to <code class="codeph">U+0039</code>)</p>
</li>
<li>
<p><code class="codeph">A</code> to <code class="codeph">F</code> (<code class="codeph">U+0041</code> to <code class="codeph">U+0046</code>)</p>
</li>
<li>
<p><code class="codeph">a</code> to <code class="codeph">f</code> (<code class="codeph">U+0061</code> to <code class="codeph">U+0066</code>)</p>
</li>
</ul>
</li>
</ul>
<p><code class="codeph">\u20ac</code> is the Unicode escape sequence for the Euro currency sign.</p>
<div class="infobox-note" id="GUID-3FA8B525-0262-4443-80F6-8EA2471652F2__GUID-244543EC-C8DF-40BD-A3B2-2F64600B46FA">
<p class="notep1">Note:</p>
<p>For reliable cross-platform support, use the Unicode escape sequence. Octal and hexadecimal escape sequences are not standardized on different operating systems.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To Use the \377 Octal Escape Sequence</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Must contain exactly three octal digits.</p>
</li>
<li>
<p>Supported ranges:</p>
<ul style="list-style-type: disc;">
<li>
<p>Range for first digit is <code class="codeph">0</code> to <code class="codeph">3</code> (<code class="codeph">U+0030</code> to <code class="codeph">U+0033</code>)</p>
</li>
<li>
<p>Range for second and third digits is <code class="codeph">0</code> to <code class="codeph">7</code> (<code class="codeph">U+0030</code> to <code class="codeph">U+0037</code>)</p>
<p><code class="codeph">\200</code> is the octal escape sequence for the Euro currency sign on Microsoft Windows</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">To Use the \xFF Hexadecimal Escape Eequence</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Must begin with a lowercase <code class="codeph">x</code> followed by exactly two hexadecimal digits.</p>
</li>
<li>
<p>Supported ranges:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">0</code> to <code class="codeph">9</code> (<code class="codeph">U+0030</code> to <code class="codeph">U+0039</code>)</p>
</li>
<li>
<p><code class="codeph">A</code> to <code class="codeph">F</code> (<code class="codeph">U+0041</code> to <code class="codeph">U+0046</code>)</p>
</li>
<li>
<p><code class="codeph">a</code> to <code class="codeph">f</code> (<code class="codeph">U+0061</code> to <code class="codeph">U+0066</code>)</p>
</li>
</ul>
</li>
</ul>
<p><code class="codeph">\x80</code> is the hexadecimal escape sequence for the Euro currency sign on Microsoft Windows 1252 Latin1 code page.</p>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9">Globalization Considerations when Mapping Data</a></p>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD405"></a>
<div class="props_rev_3"><a id="GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85"></a>
<h2 id="GWUAD-GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85" class="sect2"><span class="enumeration_section">12.6</span> Mapping Columns</h2>
<div>
<p>Oracle GoldenGate provides for column mapping at the table level and at the global level. Default column mapping is also provided in the absence of explicit column mapping rules.</p>
<p>This section contains the following guidelines for mapping columns:</p>
<p><a href="mapping-and-manipulating-data.htm#GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE">Configuring Table-level Column Mapping with COLMAP</a></p>
<p><a href="mapping-and-manipulating-data.htm#GUID-E0D12D7B-D943-4126-B14F-4083C71AF673">Configuring Global Column Mapping with COLMATCH</a></p>
<p><a href="mapping-and-manipulating-data.htm#GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5">Understanding Default Column Mapping</a></p>
<p><a href="mapping-and-manipulating-data.htm#GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17">Mapping Data Types from Column to Column</a></p>
<p><a href="mapping-and-manipulating-data.htm#GUID-9526FADC-B023-4E0C-83AB-0F25C2148796">Supporting Case and Special Characters in Column Names</a></p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-9526FADC-B023-4E0C-83AB-0F25C2148796">Supporting Case and Special Characters in Column Names</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE">Configuring Table-level Column Mapping with COLMAP</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-E0D12D7B-D943-4126-B14F-4083C71AF673">Configuring Global Column Mapping with COLMATCH</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5">Understanding Default Column Mapping</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17">Mapping Data Types from Column to Column</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
<a id="GWUAD406"></a>
<div class="props_rev_3"><a id="GUID-9526FADC-B023-4E0C-83AB-0F25C2148796"></a>
<h3 id="GWUAD-GUID-9526FADC-B023-4E0C-83AB-0F25C2148796" class="sect3"><span class="enumeration_section">12.6.1</span> Supporting Case and Special Characters in Column Names</h3>
<div>
<p>By default, Oracle GoldenGate follows SQL-92 rules for specifying column names and literals. In Oracle GoldenGate parameter files, conversion functions, user exits, and commands, case-sensitive column names must be enclosed within double quotes if double quotes are required by the database to enforce case-sensitivity. For other case-sensitive databases that do not require quotes, case-sensitive column names must be specified as they are stored in the database. Literals must be enclosed within single quotes. See <a href="getting-started-oracle-goldengate-process-interfaces.htm#GUID-F97041EA-F080-4132-93F8-57C7D8EEDEA5">Differentiating Case-Sensitive Column Names from Literals</a> for more information.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD407"></a>
<div class="props_rev_3"><a id="GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE"></a>
<h3 id="GWUAD-GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE" class="sect3"><span class="enumeration_section">12.6.2</span> Configuring Table-level Column Mapping with COLMAP</h3>
<div>
<div class="section">
<p>Use the <code class="codeph">COLMAP</code> option of the <code class="codeph">MAP</code> and <code class="codeph">TABLE</code> parameters to:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>map individual source columns to target columns that have different names.</p>
</li>
<li>
<p>specify default column mapping when an explicit column mapping is not needed.</p>
</li>
<li>
<p>Provide instructions for selecting, mapping, translating, and moving data from a source column into a target column.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-CCD9ECFC-DBCC-46AA-BB71-3336E975E96E">Specifying the Columns to be Mapped in the COLMAP Clause</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-B5E5434C-CE91-492C-82A0-92FE0B3991CD">Using USEDEFAULTS to Enable Default Column Mapping</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-8B3BE0EF-895B-4868-B7E8-3DE36E49F289">Determining Whether COLMAP Requires a Data-definitions File</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a></p>
</div>
</div>
</div>
<a id="GWUAD901"></a>
<div class="props_rev_3"><a id="GUID-CCD9ECFC-DBCC-46AA-BB71-3336E975E96E"></a>
<h4 id="GWUAD-GUID-CCD9ECFC-DBCC-46AA-BB71-3336E975E96E" class="sect4"><span class="enumeration_section">12.6.2.1</span> Specifying the Columns to be Mapped in the COLMAP Clause</h4>
<div>
<div class="section">
<p>The <code class="codeph">COLMAP</code> syntax is the following:</p>
<pre dir="ltr">
COLMAP ([USEDEFAULTS, ] <span class="italic">target_column</span> = <span class="italic">source_expression</span>)
</pre>
<p>In this syntax, <span class="italic"><code class="codeph">target_column</code></span> is the name of the target column, and <span class="italic"><code class="codeph">source_expression</code></span> can be any of the following, allowing you to map the source column by name, so as to pass the source value exactly as recorded in the trail, or to transform the data before passing it to the target column:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>The name of a source column, such as <code class="codeph">ORD_DATE</code>.</p>
</li>
<li>
<p>Numeric constant, such as <code class="codeph">123</code>.</p>
</li>
<li>
<p>String constant enclosed within single quotes, such as <code class="codeph">'ABCD'</code>.</p>
</li>
<li>
<p>An expression using an Oracle GoldenGate column-conversion function. Within a <code class="codeph">COLMAP</code> statement, you can employ any of the Oracle GoldenGate column-conversion functions to transform data for the mapped columns, for example:</p>
<pre dir="ltr">
@STREXT (COL1, 1, 3)
 
</pre></li>
</ul>
<p>If the column mapping involves case-sensitive columns from different database types, specify each column as it is stored in the database.</p>
<ul style="list-style-type: disc;">
<li>
<p>If the database requires double quotes to enforce case-sensitivity, specify the case-sensitive column name within double quotes.</p>
</li>
<li>
<p>If the database is case-sensitive without requiring double quotes, specify the column name as it is stored in the database.</p>
</li>
</ul>
<p>The following shows a mapping between a target column in an Oracle database and a source column in a case-sensitive SQL Server database.</p>
<pre dir="ltr">
COLMAP ("ColA" = ColA)
</pre>
<p>See <a href="getting-started-oracle-goldengate-process-interfaces.htm#GUID-12E08D28-53C7-4C0A-8B37-6790A2C9C4BD">Specifying Object Names in Oracle GoldenGate Input</a> for more information about specifying names to Oracle GoldenGate.</p>
<p>See <a href="mapping-and-manipulating-data.htm#GUID-5EC6F097-0924-45D5-A782-8BF1F97A7FA9">Globalization Considerations when Mapping Data</a> for globalization considerations when mapping source and target columns in databases that have different character sets and locales.</p>
<p>Avoid using <code class="codeph">COLMAP</code> to map a value to a key column (which causes the operation to become a primary key update), The <code class="codeph">WHERE</code> clause that Oracle GoldenGate uses to locate the target row will not use the correct before image of the key column. Instead, it will use the after image. This will cause errors if you are using any functions based on that key column, such as a <code class="codeph">SQLEXEC</code> statement, as shown in the following example.</p>
<ul style="list-style-type: disc;">
<li>
<p>Source table <code class="codeph">TCUSTMER1</code></p>
</li>
<li>
<p>Target table <code class="codeph">TCUSTMER2</code></p>
</li>
<li>
<p>Column layout, both tables:</p>
<ul class="simple" style="list-style-type: none;padding-left:0;">
<li>Column 1 = <code class="codeph">Cust</code></li>
<li>Column 2 = <code class="codeph">Name</code></li>
<li>Column 3 = <code class="codeph">City</code></li>
<li>Column 4 = <code class="codeph">State</code></li>
</ul>
</li>
<li>
<p>Primary key consiste of the <code class="codeph">Cust</code>, <code class="codeph">Name</code>, and <code class="codeph">City</code> columns.</p>
</li>
<li>
<p><code class="codeph">SQLEXEC</code> query in the <code class="codeph">MAP</code> statement:</p>
<pre dir="ltr">
SQLEXEC (id mytest, query 'select city from TCUSTMER1 WHERE state = 'CA'', noparams, ERROR RAISE)
</pre></li>
<li>
<p><code class="codeph">COLMAP</code> statement in the <code class="codeph">MAP</code> statement:</p>
<pre dir="ltr">
COLMAP ( usedefaults, city = mytest.city )
</pre></li>
</ul>
<p>This is the sequence of events that causes the error:</p>
</div>
<!-- class="section" -->
<ol>
<li class="stepexpand"><span><code class="codeph">INSERT</code> statement inserts the following:</span>
<div>
<pre dir="ltr">
INSERT into TCUSTMER1 values (Cust = '1234', Name = 'Ace', City = 'SF', State = 'CA');
Commit;
</pre>
<p>The <code class="codeph">SQLEXEC</code> query returns the correct value, and the target table also has a value of <code class="codeph">SF</code> for <code class="codeph">City</code> and <code class="codeph">CA</code> for <code class="codeph">State</code>.</p>
<pre dir="ltr">
mytest.city = 'SF'
</pre></div>
</li>
<li class="stepexpand"><span><code class="codeph">UPDATE</code> statement changes <code class="codeph">City</code> from <code class="codeph">SF</code> to <code class="codeph">LA</code> on the source. This does not succeed on the target. The <code class="codeph">SQLEXEC</code> query looks up the <code class="codeph">City</code> column in <code class="codeph">TCUSTMER1</code> and returns a value of <code class="codeph">LA</code>. Based on the <code class="codeph">COLMAP</code> clause, the before and after versions of <code class="codeph">City</code> both are now <code class="codeph">LA</code>. This generates SQL error 1403 when executing the target <code class="codeph">WHERE</code> clause, because a value of <code class="codeph">LA</code> does not exist for the <code class="codeph">City</code> column in the target table.</span></li>
</ol>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE">Configuring Table-level Column Mapping with COLMAP</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD902"></a><a id="GWUAD900"></a>
<div class="sect4"><a id="GUID-B5E5434C-CE91-492C-82A0-92FE0B3991CD"></a>
<h4 id="GWUAD-GUID-B5E5434C-CE91-492C-82A0-92FE0B3991CD" class="sect4"><span class="enumeration_section">12.6.2.2</span> Using USEDEFAULTS to Enable Default Column Mapping</h4>
<div>
<p>You can use the <code class="codeph">USEDEFAULTS</code> option of <code class="codeph">COLMAP</code> to specify automatic default column mapping for any corresponding source and target columns that have identical names. <code class="codeph">USEDEFAULTS</code> can save you time by eliminating the need to map every target column explicitly.</p>
<p>Default mapping causes Oracle GoldenGate to map those columns and, if required, translate the data types based on the data-definitions file (see <a href="mapping-and-manipulating-data.htm#GUID-8B3BE0EF-895B-4868-B7E8-3DE36E49F289">Determining Whether COLMAP Requires a Data-definitions File</a>). Do not specify default mapping for columns that are mapped already with an explicit mapping statement.</p>
<p>The following example of a column mapping illustrates the use of both default and explicit column mapping for a source table <code class="codeph">ACCTBL</code> and a target table <code class="codeph">ACCTTAB</code>. Most columns are the same in both tables, except for the following differences:</p>
<ul style="list-style-type: disc;">
<li>
<p>The source table has a <code class="codeph">CUST_NAME</code> column, whereas the target table has a <code class="codeph">NAME</code> column.</p>
</li>
<li>
<p>A ten-digit <code class="codeph">PHONE_NO</code> column in the source table corresponds to separate <code class="codeph">AREA_CODE</code>, <code class="codeph">PHONE_PREFIX</code>, and <code class="codeph">PHONE_NUMBER</code> columns in the target table.</p>
</li>
<li>
<p>Separate <code class="codeph">YY, MM</code>, and <code class="codeph">DD</code> columns in the source table correspond to a single <code class="codeph">TRANSACTION_DATE</code> column in the target table.</p>
</li>
</ul>
<p>To address those differences, <code class="codeph">USEDEFAULTS</code> is used to map the similar columns automatically, while explicit mapping and conversion functions are used for dissimilar columns.</p>
<div class="tblformal" id="GUID-B5E5434C-CE91-492C-82A0-92FE0B3991CD__GUID-77DF6905-09A0-4D7F-B676-2311D55867CA">
<p class="titleintable">Table 12-1 Sample Column Mapping</p>
<table class="cellalignment80" title="Sample Column Mapping" summary="This table shows sample column mappings using the COLMAP option of the MAP and TABLE parameters.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment62" id="d41518e1492">Parameter statement</th>
<th class="cellalignment107" id="d41518e1495">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment64" id="d41518e1500" headers="d41518e1492">
<pre dir="ltr">
MAP SALES.ACCTBL,
TARGET SALES.ACCTTAB,
</pre></td>
<td class="cellalignment108" headers="d41518e1500 d41518e1495">
<p>Maps the source table <code class="codeph">ACCTBL</code> to the target table <code class="codeph">ACCTTAB</code>.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment64" id="d41518e1513" headers="d41518e1492">
<pre dir="ltr">
COLMAP(
</pre></td>
<td class="cellalignment108" headers="d41518e1513 d41518e1495">
<p>Begins the <code class="codeph">COLMAP</code> statement.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment64" id="d41518e1523" headers="d41518e1492">
<pre dir="ltr">
USEDEFAULTS,
</pre></td>
<td class="cellalignment108" headers="d41518e1523 d41518e1495">
<p>Maps source columns as-is when the target column names are identical.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment64" id="d41518e1530" headers="d41518e1492">
<pre dir="ltr">
NAME = CUST_NAME,
</pre></td>
<td class="cellalignment108" headers="d41518e1530 d41518e1495">
<p>Maps the source column <code class="codeph">CUST_NAME</code> to the target column <code class="codeph">NAME</code>.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment64" id="d41518e1543" headers="d41518e1492">
<pre dir="ltr">
TRANSACTION_DATE =
@DATE ('YYYY-MM-DD', 'YY',
YEAR, 'MM', MONTH, 'DD', DAY),
</pre></td>
<td class="cellalignment108" headers="d41518e1543 d41518e1495">
<p>Converts the transaction date from the source date columns to the target column <code class="codeph">TRANSACTION_DATE</code> by using the <code class="codeph">@DATE</code> column conversion function.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment64" id="d41518e1556" headers="d41518e1492">
<pre dir="ltr">
AREA_CODE =
@STREXT (PHONE_NO, 1, 3),
PHONE_PREFIX =
@STREXT (PHONE_NO, 4, 6),
PHONE_NUMBER =
@STREXT (PHONE_NO, 7, 10))
;
</pre></td>
<td class="cellalignment108" headers="d41518e1556 d41518e1495">
<p>Converts the source column <code class="codeph">PHONE_NO</code> into the separate target columns of <code class="codeph">AREA_CODE</code>, <code class="codeph">PHONE_PREFIX</code>, and <code class="codeph">PHONE_NUMBER</code> by using the <code class="codeph">@STREXT</code> column conversion function.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>See <a href="mapping-and-manipulating-data.htm#GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5">Understanding Default Column Mapping</a> for more information about the rules followed by Oracle GoldenGate for default column mapping.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE">Configuring Table-level Column Mapping with COLMAP</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD408"></a>
<div class="props_rev_3"><a id="GUID-8B3BE0EF-895B-4868-B7E8-3DE36E49F289"></a>
<h4 id="GWUAD-GUID-8B3BE0EF-895B-4868-B7E8-3DE36E49F289" class="sect4"><span class="enumeration_section">12.6.2.3</span> Determining Whether COLMAP Requires a Data-definitions File</h4>
<div>
<p>When using <code class="codeph">COLMAP</code>, you might need to create a data-definitions file. To make this determination, you must consider whether the source and target column structures are identical, as defined by Oracle GoldenGate.</p>
<p>For source and target structures to be identical, they must:</p>
<ul style="list-style-type: disc;">
<li>
<p>be of the same database type, that is, all Oracle.</p>
</li>
<li>
<p>have the same character set and locale.</p>
</li>
<li>
<p>contain the same number of columns.</p>
</li>
<li>
<p>have identical column names (including case, white spaces, and quotes if applicable).</p>
</li>
<li>
<p>have identical data types.</p>
</li>
<li>
<p>have identical column lengths.</p>
</li>
<li>
<p>have the same column length semantics for character columns (bytes versus characters).</p>
</li>
<li>
<p>define all of the columns in the same order.</p>
</li>
</ul>
<p>When using <code class="codeph">COLMAP</code> for source and target tables that are not identical in structure, you must:</p>
<ul style="list-style-type: disc;">
<li>
<p>generate data definitions for the source tables, the target tables, or both, depending on the Oracle GoldenGate configuration and the databases that are being used.</p>
</li>
<li>
<p>transfer the definitions file to the system where they will be used.</p>
</li>
<li>
<p>use the <code class="codeph">SOURCEDEFS</code> parameter to identify the definitions file for Replicat on a target system or use the <code class="codeph">TARGETDEFS</code> parameter to identify the definitions file for Extract or a data pump on a source system or intermediary system.</p>
</li>
</ul>
<p>When using <code class="codeph">COLMAP</code> for source and target tables that are identical in structure, and you are only using <code class="codeph">COLMAP</code> for other functions such as conversion, a source definitions file is not needed. When a definitions file is not being used, you must use the <code class="codeph">ASSUMETARGETDEFS</code> parameter instead, unless you are using self-describing trail files. See <a class="olink GWURF401" target="_blank" href="../GWURF/assumetargetdefs.htm#GWURF401"><span class="italic"><span id="GUID-8B3BE0EF-895B-4868-B7E8-3DE36E49F289__GWURF"><cite>Reference for Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information.</p>
<p>See <a href="associating-replicated-data-metadata.htm#GUID-6230CE3C-9C18-43E2-8C81-4847B4724E73" title="This chapter describes the uses of metadata and how to associate replicated data with metadata.">Associating Replicated Data with Metadata</a> for more information about using a definitions file.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-1E90DDBC-87C6-4FA4-941D-CD01665EBCEE">Configuring Table-level Column Mapping with COLMAP</a></p>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD416"></a><a id="GWUAD417"></a><a id="GWUAD418"></a><a id="GWUAD419"></a><a id="GWUAD413"></a>
<div class="props_rev_3"><a id="GUID-E0D12D7B-D943-4126-B14F-4083C71AF673"></a>
<h3 id="GWUAD-GUID-E0D12D7B-D943-4126-B14F-4083C71AF673" class="sect3"><span class="enumeration_section">12.6.3</span> Configuring Global Column Mapping with COLMATCH</h3>
<div>
<div class="section">
<p>Use the <code class="codeph">COLMATCH</code> parameter to create global rules for column mapping. With <code class="codeph">COLMATCH</code>, you can map between similarly structured tables that have different column names for the same sets of data. <code class="codeph">COLMATCH</code> provides a more convenient way to map columns of this type than does using table-level mapping with a <code class="codeph">COLMAP</code> clause in individual <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements.</p>
<p>Case-sensitivity is supported as follows:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>For MySQL, SQL Server, and Teradata, if the database is case-sensitive, <code class="codeph">COLMATCH</code> looks for an exact case and name match regardless of whether or not a name is specified in quotes.</p>
</li>
<li>
<p>For Oracle Database and DB2 databases, where names can be either case-sensitive or case-insensitive in the same database and double quotes are required to show case-sensitivity, <code class="codeph">COLMATCH</code> requires an exact case and name match when a name is in quotes in the database.</p>
</li>
</ul>
<p>See <a href="getting-started-oracle-goldengate-process-interfaces.htm#GUID-12E08D28-53C7-4C0A-8B37-6790A2C9C4BD">Specifying Object Names in Oracle GoldenGate Input</a> for more information about case-sensitivity support.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">
COLMATCH
{NAMES <span class="italic">target_column</span> = <span class="italic">source_column</span> |
PREFIX <span class="italic">prefix</span> |
SUFFIX <span class="italic">suffix</span> |
RESET}
</pre>
<div class="tblformal" id="GUID-E0D12D7B-D943-4126-B14F-4083C71AF673__GUID-3C19D695-9988-4DC3-AF5D-FA0979141493">
<p class="titleintable">Table 12-2 COLMATCH Options</p>
<table class="cellalignment80" title="COLMATCH Options" summary="This table describes the COLMATCH options.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment43" id="d41518e1790">Argument</th>
<th class="cellalignment43" id="d41518e1793">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e1798" headers="d41518e1790">
<pre dir="ltr">
NAMES <span class="italic">target_column</span> = <span class="italic">source_column</span>
</pre></td>
<td class="cellalignment44" headers="d41518e1798 d41518e1793">
<p>Maps based on column names.</p>
<p>Put double quotes around the column name if it is case-sensitive and the database requires quotes to enforce case-sensitivity. For these database types, an unquoted column name is treated as case-insensitive by Oracle GoldenGate.</p>
<p>For databases that support case-sensitivity without requiring quotes, specify the column name as it is stored in the database.</p>
<p>If the <code class="codeph">COLMATCH</code> is between columns in different database types, make certain the names reflect the appropriate case representation for each one. For example, the following specifies a case-sensitive target column name <code class="codeph">"aBc</code>" in an Oracle Database and a case-sensitive source column name <code class="codeph">aBc</code> in a case-sensitive SQL Server database.</p>
<pre dir="ltr">
COLMATCH NAMES "aBc" = aBc
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e1829" headers="d41518e1790">
<pre dir="ltr">
PREFIX <span class="italic">prefix</span> | SUFFIX <span class="italic">suffix</span>
</pre></td>
<td class="cellalignment44" headers="d41518e1829 d41518e1793">
<p>Ignores the specified name prefix or suffix.</p>
<p>Put double quotes around the prefix or suffix if the database requires quotes to enforce case-sensitivity, for example "<code class="codeph">P_"</code>. For those database types, an unquoted prefix or suffix is treated as case-insensitive.</p>
<p>For databases that support case-sensitivity without requiring quotes, specify the prefix or suffix as it is stored in the database. For example, <code class="codeph">P_</code> specifies a capital <code class="codeph">P</code> prefix.</p>
<p>The following example specifies a case-insensitive prefix to ignore. The target column name <code class="codeph">P_ABC</code> is mapped to source column name <code class="codeph">ABC</code>, and target column name <code class="codeph">P_abc</code> is mapped to source column name <code class="codeph">abc</code>.</p>
<pre dir="ltr">
COLMATCH PREFIX p_
</pre>
<p>The following example specifies a case-sensitive <code class="codeph">suffix</code> to ignore. The target column name <code class="codeph">ABC_k</code> is mapped to the source column name <code class="codeph">ABC</code>, and the target column name "<code class="codeph">abc_k</code>" is mapped to the source column name "abc".</p>
<pre dir="ltr">
SUFFIX "_k"
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e1888" headers="d41518e1790">
<pre dir="ltr">
RESET
</pre></td>
<td class="cellalignment44" headers="d41518e1888 d41518e1793">
<p>Turns off previously defined <code class="codeph">COLMATCH</code> rules for subsequent <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>The following example illustrates when to use <code class="codeph">COLMATCH.</code> The source and target tables are identical except for slightly different table and column names.The database is case-insensitive.</p>
<div class="tblformal" id="GUID-E0D12D7B-D943-4126-B14F-4083C71AF673__GUID-8EC5C2A7-9BB0-483B-8318-FB272E6ED1D7">
<p class="titleintable">Table 12-3 COLMATCH Example Table: Source Database</p>
<table class="cellalignment80" title="COLMATCH Example Table: Source Database" summary="This table shows a COLMATCH example table for the source database.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment109" id="d41518e1918">ACCT Table</th>
<th class="cellalignment110" id="d41518e1921">ORD Table</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment111" id="d41518e1926" headers="d41518e1918">
<pre dir="ltr">
CUST_CODE
CUST_NAME
CUST_ADDR
PHONE
S_REP
S_REPCODE
</pre></td>
<td class="cellalignment112" headers="d41518e1926 d41518e1921">
<pre dir="ltr">
CUST_CODE
CUST_NAME
ORDER_ID
ORDER_AMT
S_REP
S_REPCODE
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformal" id="GUID-E0D12D7B-D943-4126-B14F-4083C71AF673__GUID-5BD96367-47B7-4E63-886C-ACC3F93DA2DA">
<p class="titleintable">Table 12-4 COLMATCH Example Table: Target Database</p>
<table class="cellalignment80" title="COLMATCH Example Table: Target Database" summary="This table shows a COLMATCH example table for the target database.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment35" id="d41518e1942">ACCOUNT Table</th>
<th class="cellalignment36" id="d41518e1945">ORDER Table</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment37" id="d41518e1950" headers="d41518e1942">
<pre dir="ltr">
CUSTOMER_CODE
CUSTOMER_NAME
CUSTOMER_ADDRESS
PHONE
REP
REPCODE
</pre></td>
<td class="cellalignment38" headers="d41518e1950 d41518e1945">
<pre dir="ltr">
CUSTOMER_CODE
CUSTOMER_NAME
ORDER_ID
ORDER_AMT
REP
REPCODE
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>To map the source columns to the target columns in this example, as well as to handle subsequent maps for other tables, the syntax is:</p>
<pre dir="ltr">
COLMATCH NAMES CUSTOMER_CODE = CUST_CODE
COLMATCH NAMES CUSTOMER_NAME = CUST_NAME
COLMATCH NAMES CUSTOMER_ADDRESS = CUST_ADDR
COLMATCH PREFIX S_
MAP SALES.ACCT, TARGET SALES.ACCOUNT, COLMAP (USEDEFAULTS);
MAP SALE.ORD, TARGET SALES.ORDER, COLMAP (USEDEFAULTS);
COLMATCH RESET
MAP SALES.REG, TARGET SALE.REG;
MAP SALES.PRICE, TARGET SALES.PRICE;
</pre>
<pre dir="ltr">
</pre>
<p>Based on the rules in the example, the following occurs:</p>
<ul style="list-style-type: disc;">
<li>
<p>Data is mapped from the <code class="codeph">CUST_CODE</code> columns in the source <code class="codeph">ACCT</code> and <code class="codeph">ORD</code> tables to the <code class="codeph">CUSTOMER_CODE</code> columns in the target <code class="codeph">ACCOUNT</code> and <code class="codeph">ORDER</code> tables.</p>
</li>
<li>
<p>The <code class="codeph">S_</code> prefix will be ignored.</p>
</li>
<li>
<p>Columns with the same names, such as the <code class="codeph">PHONE</code> and <code class="codeph">ORDER_AMT</code> columns, are automatically mapped by means of <code class="codeph">USEDEFAULTS</code> without requiring explicit rules. See <a href="mapping-and-manipulating-data.htm#GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5">Understanding Default Column Mapping</a> for more information.</p>
</li>
<li>
<p>The previous global column mapping is turned off for the tables <code class="codeph">REG</code> and <code class="codeph">PRICE</code>. Source and target columns in those tables are automatically mapped because all of the names are identical.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD903"></a><a id="GWUAD420"></a>
<div class="props_rev_3"><a id="GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5"></a>
<h3 id="GWUAD-GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5" class="sect3"><span class="enumeration_section">12.6.4</span> Understanding Default Column Mapping</h3>
<div>
<p>If an explicit column mapping does not exist, either by using <code class="codeph">COLMATCH</code> or <code class="codeph">COLMAP</code>, Oracle GoldenGate maps source and target columns by default according to the following rules.</p>
<ul style="list-style-type: disc;">
<li>
<p>If a source column is found whose name and case exactly match those of the target column, the two are mapped.</p>
</li>
<li>
<p>If no case match is found, fallback name mapping is used. Fallback mapping performs a case-insensitive target table mapping to find a name match. Inexact column name matching is applied using upper cased names.This behavior is controlled by the <code class="codeph">GLOBALS</code> parameter <code class="codeph">NAMEMATCHIGNORECASE</code>. You can disable fallback name matching with the <code class="codeph">NAMEMATCHEXACT</code> parameter, or you can keep it enabled but with a warning message by using the <code class="codeph">NAMEMATCHNOWARNING</code> parameter.</p>
</li>
<li>
<p>Target columns that do not correspond to any source column take default values determined by the database.</p>
</li>
</ul>
<p>If the default mapping cannot be performed, the target column defaults to one of the values shown in <a href="mapping-and-manipulating-data.htm#GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5__BCGFABFD" title="This table lists the default values for target columns.">Table 12-5</a>.</p>
<div class="tblformal" id="GUID-857648EF-89CD-42B2-916D-882AAFAB2EB5__BCGFABFD">
<p class="titleintable">Table 12-5 Defaults Values for Target Columns</p>
<table class="cellalignment80" title="Defaults Values for Target Columns" summary="This table lists the default values for target columns.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment43" id="d41518e2089">Column Type</th>
<th class="cellalignment43" id="d41518e2092">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e2097" headers="d41518e2089">
<p>Numeric</p>
</td>
<td class="cellalignment44" headers="d41518e2097 d41518e2092">
<p>Zero (0)</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e2104" headers="d41518e2089">
<p>Character or <code class="codeph">VARCHAR</code></p>
</td>
<td class="cellalignment44" headers="d41518e2104 d41518e2092">
<p>Spaces</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e2113" headers="d41518e2089">
<p>Date or Datetime</p>
</td>
<td class="cellalignment44" headers="d41518e2113 d41518e2092">
<p>Current date and time</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e2120" headers="d41518e2089">
<p>Columns that can take a <code class="codeph">NULL</code> value</p>
</td>
<td class="cellalignment44" headers="d41518e2120 d41518e2092">
<p>Null</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD422"></a>
<div class="props_rev_3"><a id="GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17"></a>
<h3 id="GWUAD-GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17" class="sect3"><span class="enumeration_section">12.6.5</span> Mapping Data Types from Column to Column</h3>
<div>
<p>The following explains how Oracle GoldenGate maps data types.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-9A84E2CA-04D2-41C9-B277-FA2E458A7A1E">Numeric Columns</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-471FAB1C-4811-45D3-8BA3-CA819ABA0D19">Character-type Columns</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-0AE64892-6962-4072-B92E-BF8F274E7055">Datetime Columns</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-FC4FD2CF-581E-45A0-A46F-3319094DDD85">Mapping Columns</a></p>
</div>
</div>
</div>
<a id="GWUAD423"></a>
<div class="props_rev_3"><a id="GUID-9A84E2CA-04D2-41C9-B277-FA2E458A7A1E"></a>
<h4 id="GWUAD-GUID-9A84E2CA-04D2-41C9-B277-FA2E458A7A1E" class="sect4"><span class="enumeration_section">12.6.5.1</span> Numeric Columns</h4>
<div>
<p>Numeric columns are converted to match the type and scale of the target column. If the scale of the target column is smaller than that of the source, the number is truncated on the right. If the scale of the target column is larger than that of the source, the number is padded with zeros on the right.</p>
<p>You can specify a substitution value for invalid numeric data encountered when mapping number columns by using the <code class="codeph">REPLACEBADNUM</code> parameter. See <a class="olink GWURF613" target="_blank" href="../GWURF/replacebadnum.htm#GWURF613"><span class="italic"><span id="GUID-9A84E2CA-04D2-41C9-B277-FA2E458A7A1E__GWURF"><cite>Reference for Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17">Mapping Data Types from Column to Column</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD424"></a>
<div class="props_rev_3"><a id="GUID-471FAB1C-4811-45D3-8BA3-CA819ABA0D19"></a>
<h4 id="GWUAD-GUID-471FAB1C-4811-45D3-8BA3-CA819ABA0D19" class="sect4"><span class="enumeration_section">12.6.5.2</span> Character-type Columns</h4>
<div>
<p>Character-type columns can accept character-based data types such as <code class="codeph">VARCHAR</code>, numeric in string form, date and time in string form, and string literals. If the scale of the target column is smaller than that of the source, the column is truncated on the right. If the scale of the target column is larger than that of the source, the column is padded with spaces on the right.</p>
<p>Literals must be enclosed within single quotes.</p>
<p>You can control the response of the Oracle GoldenGate process when a valid code point does not exist for either the source or target character set when mapping character columns by using the <code class="codeph">REPLACEBADCHAR</code> parameter. See <a class="olink GWURF610" target="_blank" href="../GWURF/replacebadchar.htm#GWURF610"><span class="italic"><span id="GUID-471FAB1C-4811-45D3-8BA3-CA819ABA0D19__GWURF"><cite>Reference for Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17">Mapping Data Types from Column to Column</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD425"></a>
<div class="props_rev_3"><a id="GUID-0AE64892-6962-4072-B92E-BF8F274E7055"></a>
<h4 id="GWUAD-GUID-0AE64892-6962-4072-B92E-BF8F274E7055" class="sect4"><span class="enumeration_section">12.6.5.3</span> Datetime Columns</h4>
<div>
<p>Datetime <code class="codeph">(DATE</code>, <code class="codeph">TIME</code>, and <code class="codeph">TIMESTAMP</code>) columns can accept datetime and character columns, as well as string literals. Literals must be enclosed within single quotes. To map a character column to a datetime column, make certain it conforms to the Oracle GoldenGate external SQL format of <code class="codeph">YYYY-MM-DD HH:MI:SS.FFFFFF.</code></p>
<p>Oracle GoldenGate supports timestamp data from <code class="codeph">0001-01-03 00:00:00</code> to <code class="codeph">9999-12-31 23:59:59</code>. If a timestamp is converted from GMT to local time, these limits also apply to the resulting timestamp. Depending on the timezone, conversion may add or subtract hours, which can cause the timestamp to exceed the lower or upper supported limit.</p>
<p>Required precision varies according to the data type and target platform. If the scale of the target column is smaller than that of the source, data is truncated on the right. If the scale of the target column is larger than that of the source, the column is extended on the right with the values for the current date and time.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-6FCA846E-D324-4FD3-B3A3-9DF65DF2CF17">Mapping Data Types from Column to Column</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD426"></a>
<div class="props_rev_3"><a id="GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C"></a>
<h2 id="GWUAD-GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C" class="sect2"><span class="enumeration_section">12.7</span> Selecting and Filtering Rows</h2>
<div>
<div class="section">
<p>To filter out or select rows for extraction or replication, use the <code class="codeph">FILTER</code> and <code class="codeph">WHERE</code> clauses of the <code class="codeph">TABLE</code> and <code class="codeph">MAP</code> parameters.</p>
<p>The <code class="codeph">FILTER</code> clause offers you more functionality than the <code class="codeph">WHERE</code> clause because you can employ any of the Oracle GoldenGate column conversion functions, whereas the <code class="codeph">WHERE</code> clause accepts basic <code class="codeph">WHERE</code> operators.</p>
</div>
<!-- class="section" --></div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6">Selecting Rows with a FILTER Clause</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-AD3E0178-A819-4777-9A3F-CB3DA9ED9FDF">Selecting Rows with a WHERE Clause</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68">Considerations for Selecting Rows with FILTER and WHERE</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
<a id="GWUAD428"></a><a id="GWUAD434"></a><a id="GWUAD430"></a><a id="GWUAD431"></a><a id="GWUAD432"></a><a id="GWUAD433"></a><a id="GWUAD427"></a>
<div class="props_rev_3"><a id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6"></a>
<h3 id="GWUAD-GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6" class="sect3"><span class="enumeration_section">12.7.1</span> Selecting Rows with a FILTER Clause</h3>
<div>
<div class="section">
<p>Use a <code class="codeph">FILTER</code> clause to select rows based on a numeric value by using basic operators or one or more Oracle GoldenGate column-conversion functions.</p>
<div class="infobox-note" id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__GUID-15B828AB-17F4-4861-9DF4-B43B61BA5DB6">
<p class="notep1">Note:</p>
<p>To filter a column based on a string, use one of the Oracle GoldenGate string functions or use a <code class="codeph">WHERE</code> clause.</p>
</div>
<p>The syntax for <code class="codeph">FILTER</code> in a <code class="codeph">TABLE</code> statement is as follows:</p>
<pre dir="ltr">
TABLE source_table,
, FILTER (
[, ON INSERT | ON UPDATE| ON DELETE]
[, IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE]
, <span class="italic">filter_clause</span>);
</pre>
<p>The sytax for <code class="codeph">FILTER</code> in a <code class="codeph">MAP</code> statement is as follows and includes an error-handling option.</p>
<pre dir="ltr">
MAP <span class="italic">source_table</span>, TARGET <span class="italic">target_table</span>,
, FILTER (
[, ON INSERT | ON UPDATE| ON DELETE]
[, IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE]
[, RAISEERROR <span class="italic">error_number</span>]
, <span class="italic">filter_clause</span>);
</pre>
<p>Valid <code class="codeph">FILTER</code> clause elements are the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>An Oracle GoldenGate column-conversion function. These functions are built into Oracle GoldenGate so that you can perform tests, manipulate data, retrieve values, and so forth. See <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a> for more information about Oracle GoldenGate conversion functions.</p>
</li>
<li>
<p>Numbers</p>
</li>
<li>
<p>Columns that contain numbers</p>
</li>
<li>
<p>Functions that return numbers</p>
</li>
<li>
<p>Arithmetic operators:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">+</code> (plus)</p>
</li>
<li>
<p><code class="codeph">-</code> (minus)</p>
</li>
<li>
<p><code class="codeph">*</code> (multiply)</p>
</li>
<li>
<p><code class="codeph">/</code> (divide)</p>
</li>
<li>
<p><code class="codeph">\</code> (remainder)</p>
</li>
</ul>
</li>
<li>
<p>Comparison operators:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">&gt;</code> (greater than)</p>
</li>
<li>
<p><code class="codeph">&gt;=</code> (greater than or equal)</p>
</li>
<li>
<p><code class="codeph">&lt;</code> (less than)</p>
</li>
<li>
<p><code class="codeph">&lt;=</code> (less than or equal)</p>
</li>
<li>
<p><code class="codeph">=</code> (equal)</p>
</li>
<li>
<p><code class="codeph">&lt;&gt;</code> (not equal)</p>
</li>
<li>
<p>Results derived from comparisons can be zero (indicating <code class="codeph">FALSE</code>) or non-zero (indicating <code class="codeph">TRUE</code>).</p>
</li>
</ul>
</li>
<li>
<p>Parentheses (for grouping results in the expression)</p>
</li>
<li>
<p>Conjunction operators: <code class="codeph">AND</code>, <code class="codeph">OR</code></p>
</li>
</ul>
<p>Use the following <code class="codeph">FILTER</code> options to specify which SQL operations a filter clause affects. Any of these options can be combined.</p>
<p><code class="codeph">ON INSERT | ON UPDATE | ON DELETE</code>&nbsp;&nbsp;<code class="codeph">IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE</code></p>
<p>Use the <code class="codeph">RAISEERROR</code> option of <code class="codeph">FILTER</code> in the <code class="codeph">MAP</code> parameter to generate a user-defined error when the filter fails. This option is useful when you need to trigger an event in response to the failure.</p>
<p>You can use the <code class="codeph">@RANGE</code> function to divide the processing workload among multiple <code class="codeph">FILTER</code> clauses, using separate <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements. For example, the following splits the replication workload into two ranges (between two Replicat processes or two threads of a coordinated Replicat) based on the <code class="codeph">ID</code> column of the source <code class="codeph">acct</code> table.</p>
<div class="tblformal" id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__G1110854">
<p class="titleintable">Table 12-6 Using Multiple FILTER Statements</p>
<table class="cellalignment80" title="Using Multiple FILTER Statements" summary="This table describes how to use multiple FILTER statements. It lists the parameter file and describes it.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment95" id="d41518e2625">Parameter file</th>
<th class="cellalignment113" id="d41518e2628">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2633" headers="d41518e2625">
<pre dir="ltr">
REPERROR (9999, EXCEPTION)
</pre></td>
<td class="cellalignment114" headers="d41518e2633 d41518e2628">
<p>Raises an exception for the specified error.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2640" headers="d41518e2625">
<pre dir="ltr">
MAP OWNER.SRCTAB,
TARGET OWNER.TARGTAB,
</pre></td>
<td class="cellalignment114" headers="d41518e2640 d41518e2628">
<p>Starts the <code class="codeph">MAP</code> statement.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2650" headers="d41518e2625">
<pre dir="ltr">
SQLEXEC (ID CHECK, ON UPDATE,
QUERY ' SELECT COUNT FROM TARGTAB '
'WHERE PKCOL = :P1 ',
PARAMS (P1 = PKCOL)),
</pre></td>
<td class="cellalignment114" headers="d41518e2650 d41518e2628">
<p>Performs a query to retrieve the present value of the <code class="codeph">COUNT</code> column whenever an update is encountered.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2660" headers="d41518e2625">
<pre dir="ltr">
FILTER (BALANCE &gt; 15000),
</pre></td>
<td class="cellalignment114" headers="d41518e2660 d41518e2628">
<p>Uses a <code class="codeph">FILTER</code> clause to select rows where the balance is greater than 15000.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2670" headers="d41518e2625">
<pre dir="ltr">
FILTER (ON UPDATE, @BEFORE (COUNT) = CHECK.COUNT)
</pre></td>
<td class="cellalignment114" headers="d41518e2670 d41518e2628">
<p>Uses another <code class="codeph">FILTER</code> clause to ensure that the value of the source <code class="codeph">COUNT</code> column before an update matches the value in the target column before applying the target update.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2683" headers="d41518e2625">
<pre dir="ltr">
;
</pre></td>
<td class="cellalignment114" headers="d41518e2683 d41518e2628">
<p>The semicolon concludes the <code class="codeph">MAP</code> statement.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment97" id="d41518e2693" headers="d41518e2625">
<pre dir="ltr">
MAP OWNER.SRCTAB,
TARGET OWNER.TARGEXC,
EXCEPTIONSONLY,
COLMAP (USEDEFAULTS,
ERRTYPE = 'UPDATE FILTER FAILED');
</pre></td>
<td class="cellalignment114" headers="d41518e2693 d41518e2628">
<p>Designates an exceptions <code class="codeph">MAP</code> statement. The <code class="codeph">REPERROR</code> clause for error 9999 ensures that the exceptions map to <code class="codeph">TARGEXC</code> will be executed.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="example" id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__GUID-EBDC459B-D58D-404B-86C4-C27EC8662626">
<p class="titleinexample">Example 12-1 Calling the @COMPUTE Function</p>
<p>The following example calls the <code class="codeph">@COMPUTE</code> function to extract records in which the price multiplied by the amount exceeds 10,000.</p>
<pre dir="ltr">
MAP SALES.TCUSTORD, TARGET SALES.TORD,
FILTER (@COMPUTE (PRODUCT_PRICE * PRODUCT_AMOUNT) &gt; 10000);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__GUID-A8A5C07F-EED9-4FD1-AE88-9CE1ADCDF45A">
<p class="titleinexample">Example 12-2 Calling the @STREQ Function</p>
<p>The following uses the <code class="codeph">@STREQ</code> function to extract records where the value of a character column is <code class="codeph">'JOE'.</code></p>
<pre dir="ltr">
TABLE ACCT.TCUSTORD, FILTER (@STREQ ("Name", 'joe') &gt; 0);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__GUID-6706FD85-7AF8-4D46-976D-A842CEEA1C3A">
<p class="titleinexample">Example 12-3 Selecting Records</p>
<p>The following selects records in which the <code class="codeph">AMOUNT</code> column is greater than 50 and executes the filter on <code class="codeph">UPDATE</code> and <code class="codeph">DELETE</code> operations.</p>
<pre dir="ltr">
TABLE ACT.TCUSTORD, FILTER (ON UPDATE, ON DELETE, AMOUNT &gt; 50);
</pre></div>
<!-- class="example" -->
<div class="example" id="GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__GUID-8F01E417-2A35-4349-81CD-10AD0E331737">
<p class="titleinexample">Example 12-4 Using the @RANGE Function</p>
<p>(Replicat group 1 parameter file)</p>
<pre dir="ltr">
MAP sales.acct, TARGET sales.acct, FILTER (@RANGE (1, 2, ID));
</pre>
<p>(Replicat group 2 parameter file)</p>
<pre dir="ltr">
MAP sales.acct, TARGET sales.acct, FILTER (@RANGE (2, 2, ID));
</pre>
<p>You can combine several <code class="codeph">FILTER</code> clauses in one <code class="codeph">MAP</code> or <code class="codeph">TABLE</code> statement, as shown in <a href="mapping-and-manipulating-data.htm#GUID-AFC2540C-FB00-4B86-A455-2B1DDFDCF2E6__G1110854" title="This table describes how to use multiple FILTER statements. It lists the parameter file and describes it.">Table 12-6</a>, which shows part of a Replicat parameter file. Oracle GoldenGate executes the filters in the order listed, until one fails or until all are passed. If one filter fails, they all fail.</p>
</div>
<!-- class="example" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C">Selecting and Filtering Rows</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD436"></a><a id="GWUAD437"></a><a id="GWUAD435"></a>
<div class="props_rev_3"><a id="GUID-AD3E0178-A819-4777-9A3F-CB3DA9ED9FDF"></a>
<h3 id="GWUAD-GUID-AD3E0178-A819-4777-9A3F-CB3DA9ED9FDF" class="sect3"><span class="enumeration_section">12.7.2</span> Selecting Rows with a WHERE Clause</h3>
<div>
<div class="section">
<p>Use any of the elements in <a href="mapping-and-manipulating-data.htm#GUID-AD3E0178-A819-4777-9A3F-CB3DA9ED9FDF__G1110882" title="This table lists the permissible WHERE operators and gives examples of each element.">Table 12-7</a> in a <code class="codeph">WHERE</code> clause to select or exclude rows (or both) based on a conditional statement. Each <code class="codeph">WHERE</code> clause must be enclosed within parentheses. Literals must be enclosed within single quotes.</p>
<div class="tblformal" id="GUID-AD3E0178-A819-4777-9A3F-CB3DA9ED9FDF__G1110882">
<p class="titleintable">Table 12-7 Permissible WHERE Operators</p>
<table class="cellalignment80" title="Permissible WHERE Operators" summary="This table lists the permissible WHERE operators and gives examples of each element.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment89" id="d41518e2825">Element</th>
<th class="cellalignment115" id="d41518e2828">Examples</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2833" headers="d41518e2825">
<p>Column names</p>
</td>
<td class="cellalignment116" headers="d41518e2833 d41518e2828">
<pre dir="ltr">
PRODUCT_AMT
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2841" headers="d41518e2825">
<p>Numeric values</p>
</td>
<td class="cellalignment116" headers="d41518e2841 d41518e2828">
<pre dir="ltr">
-123, 5500.123
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2848" headers="d41518e2825">
<p>Literal strings</p>
</td>
<td class="cellalignment116" headers="d41518e2848 d41518e2828">
<pre dir="ltr">
'AUTO', 'Ca'
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2855" headers="d41518e2825">
<p>Built-in column tests</p>
</td>
<td class="cellalignment116" headers="d41518e2855 d41518e2828">
<p><code class="codeph">@NULL</code>, <code class="codeph">@PRESENT</code>, <code class="codeph">@ABSENT</code> (column is null, present or absent in the row). These tests are built into Oracle GoldenGate. See <a href="mapping-and-manipulating-data.htm#GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68">Considerations for Selecting Rows with FILTER and WHERE</a>.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2873" headers="d41518e2825">
<p>Comparison operators</p>
</td>
<td class="cellalignment116" headers="d41518e2873 d41518e2828">
<p>=, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;<code class="codeph">=</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2882" headers="d41518e2825">
<p>Conjunctive operators</p>
</td>
<td class="cellalignment116" headers="d41518e2882 d41518e2828">
<pre dir="ltr">
AND, OR
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment90" id="d41518e2893" headers="d41518e2825">
<p>Grouping parentheses</p>
</td>
<td class="cellalignment116" headers="d41518e2893 d41518e2828">
<p>Use open and close parentheses ( ) for logical grouping of multiple elements.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Oracle GoldenGate does not support <code class="codeph">FILTER</code> for columns that have a multi-byte character set or a character set that is incompatible with the character set of the local operating system.</p>
<p>Arithmetic operators and floating-point data types are not supported by <code class="codeph">WHERE</code>. To use more complex selection conditions, use a <code class="codeph">FILTER</code> clause or a user exit routine. See <a href="customizing-oracle-goldengate-processing.htm#GUID-0818E549-40DA-48E8-95F7-501C7DE11480">Using User Exits to Extend Oracle GoldenGate Capabilities</a> for more information.</p>
<p>The syntax for <code class="codeph">WHERE</code> is identical in the <code class="codeph">TABLE</code> and <code class="codeph">MAP</code> statements:</p>
<pre dir="ltr">
TABLE <span class="italic">table</span>, WHERE (<span class="italic">clause</span>);
</pre>
<pre dir="ltr">
MAP <span class="italic">source_table</span>, TARGET <span class="italic">target_table</span>, WHERE (<span class="italic">clause</span>);
</pre></div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C">Selecting and Filtering Rows</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD438"></a>
<div class="props_rev_3"><a id="GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68"></a>
<h3 id="GWUAD-GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68" class="sect3"><span class="enumeration_section">12.7.3</span> Considerations for Selecting Rows with FILTER and WHERE</h3>
<div>
<p>The following suggestions can help you create a successful selection clause.</p>
<div class="infobox-note" id="GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68__GUID-6C4811C9-0BE9-4B4C-84D4-744C8651C8B3">
<p class="notep1">Note:</p>
<p>The examples in this section assume a case-insensitive database.</p>
</div>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-0FFD220B-F32B-4BB8-8657-97248024F71C">Ensuring Data Availability for Filters</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-13FE8C13-498E-4FC4-BE2A-D9E0C8E7280C">Comparing Column Values</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-2F275965-C18B-4793-9D78-F7F431F97C4D">Testing for NULL Values</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-9E830D28-A509-4B6C-A792-1B1092CCD67C">Selecting and Filtering Rows</a></p>
</div>
</div>
</div>
<a id="GWUAD439"></a>
<div class="props_rev_3"><a id="GUID-0FFD220B-F32B-4BB8-8657-97248024F71C"></a>
<h4 id="GWUAD-GUID-0FFD220B-F32B-4BB8-8657-97248024F71C" class="sect4"><span class="enumeration_section">12.7.3.1</span> Ensuring Data Availability for Filters</h4>
<div>
<div class="section">
<p>If the database only logs values for <span class="italic">changed</span> columns to the transaction log, there can be errors if any of the unchanged columns are referenced by selection criteria. Oracle GoldenGate ignores such row operations, outputs them to the discard file, and issues a warning.</p>
<p>To avoid missing-column errors, create your selection conditions as follows:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Use only primary-key columns as selection criteria, if possible.</p>
</li>
<li>
<p>Make required column values available by enabling supplemental logging for those columns. Alternatively, you can use the <code class="codeph">FETCHCOLS</code> or <code class="codeph">FETCHCOLSEXCEPT</code> option of the <code class="codeph">TABLE</code> parameter. These options are valid for all supported databases except SQL/MX. They query the database to fetch the values if they are not present in the log. To retrieve the values before the <code class="codeph">FILTER</code> or <code class="codeph">WHERE</code> clause is executed, include the <code class="codeph">FETCHBEFOREFILTER</code> option in the <code class="codeph">TABLE</code> statement before the <code class="codeph">FILTER</code> or <code class="codeph">WHERE</code> clause. For example:</p>
<pre dir="ltr">
TABLE DEMO.PEOPLE, FETCHBEFOREFILTER, FETCHCOLS (age), FILTER (age &gt; 50);
</pre></li>
<li>
<p>Test for a column's presence first, then for the column's value. To test for a column's presence, use the following syntax.</p>
<pre dir="ltr">
<span class="italic">column_name</span> {= | &lt;&gt;} {@PRESENT | @ABSENT}
</pre>
<p>The following example returns all records when the <code class="codeph">amount</code> column is over 10,000 and does not cause a record to be discarded when <code class="codeph">amount</code> is absent.</p>
<pre dir="ltr">
WHERE (amount = @PRESENT AND amount &gt; 10000)
</pre></li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68">Considerations for Selecting Rows with FILTER and WHERE</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD440"></a>
<div class="props_rev_3"><a id="GUID-13FE8C13-498E-4FC4-BE2A-D9E0C8E7280C"></a>
<h4 id="GWUAD-GUID-13FE8C13-498E-4FC4-BE2A-D9E0C8E7280C" class="sect4"><span class="enumeration_section">12.7.3.2</span> Comparing Column Values</h4>
<div>
<p>To ensure that elements used in a comparison match, compare appropriate column types:</p>
<ul style="list-style-type: disc;">
<li>
<p>Character columns to literal strings.</p>
</li>
<li>
<p>Numeric columns to numeric values, which can include a sign and decimal point.</p>
</li>
<li>
<p>Date and time columns to literal strings, using the format in which the column is retrieved by the application.</p>
</li>
</ul>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68">Considerations for Selecting Rows with FILTER and WHERE</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD441"></a>
<div class="props_rev_3"><a id="GUID-2F275965-C18B-4793-9D78-F7F431F97C4D"></a>
<h4 id="GWUAD-GUID-2F275965-C18B-4793-9D78-F7F431F97C4D" class="sect4"><span class="enumeration_section">12.7.3.3</span> Testing for NULL Values</h4>
<div>
<div class="section">
<p>To evaluate columns for <code class="codeph">NULL</code> values, use the following syntax.</p>
<pre dir="ltr">
<span class="italic">column</span> {= | &lt;&gt;} @NULL
</pre>
<p>The following returns <code class="codeph">TRUE</code> if the column is <code class="codeph">NULL</code>, and <code class="codeph">FALSE</code> for all other cases (including a column missing from the record).</p>
<pre dir="ltr">
WHERE (amount = @NULL)
</pre>
<p>The following returns <code class="codeph">TRUE</code> only if the column is present in the record and not <code class="codeph">NULL</code>.</p>
<pre dir="ltr">
WHERE (amount = @PRESENT AND amount &lt;&gt; @NULL)
</pre></div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-6ADD27B3-E9D0-469E-9016-A7281C893D68">Considerations for Selecting Rows with FILTER and WHERE</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD1103"></a><a id="GWUAD442"></a>
<div class="props_rev_3"><a id="GUID-A0B11A7F-5696-4BFD-923C-281AECA02FE0"></a>
<h2 id="GWUAD-GUID-A0B11A7F-5696-4BFD-923C-281AECA02FE0" class="sect2"><span class="enumeration_section">12.8</span> Retrieving Before and After Values</h2>
<div>
<p>For update operations, it can be advantageous to retrieve the <span class="italic">before</span> values of source columns: the values before the update occurred. These values are stored in the trail and can be used in filters and column mappings. For example, you can:</p>
<ul style="list-style-type: disc;">
<li>
<p>Retrieve the before image of a row as part of a column-mapping specification in an exceptions <code class="codeph">MAP</code> statement, and map those values to an exceptions table for use in testing or troubleshooting conflict resolution routines.</p>
</li>
<li>
<p>Perform delta calculations. For example, if a table has a <code class="codeph">Balance</code> column, you can calculate the net result of a particular transaction by subtracting the original balance from the new balance, as in the following example:</p>
<pre dir="ltr">
MAP "owner"."src", TARGET "owner"."targ",
COLMAP (PK1 = PK1, delta = balance &ndash; @BEFORE (balance));
</pre>
<div class="infobox-note" id="GUID-A0B11A7F-5696-4BFD-923C-281AECA02FE0__GUID-EC4F2A35-33B4-4F46-B2DB-7A563E8D2B1A">
<p class="notep1">Note:</p>
<p>The previous example indicates a case-sensitive database such as Oracle. The table names are in quote marks to reflect case-sensitivity.</p>
</div>
</li>
</ul>
<div class="section">
<p class="subhead2">To Reference the Before Value</p>
</div>
<!-- class="section" -->
<div class="section">
<ol>
<li>
<p>Use the <code class="codeph">@BEFORE</code> column conversion function with the name of the column for which you want a before value, as follows:</p>
<pre dir="ltr">
@BEFORE (<span class="italic">column_name</span>)
</pre></li>
<li>
<p>Use the <code class="codeph">GETUPDATEBEFORES</code> parameter in the Extract parameter file to capture before images from the transaction record, or use it in the Replicat parameter file to use the before image in a column mapping or filter. If using the Conflict Resolution and Detection (CDR) feature, you can use the <code class="codeph">GETBEFORECOLS</code> option of <code class="codeph">TABLE</code>. To use these parameters, all columns must be present in the transaction log. If the database only logs the values of columns that changed, using the <code class="codeph">@BEFORE</code> function may result in a "column missing" condition and the column map is executed as if the column were not in the record. See <a href="mapping-and-manipulating-data.htm#GUID-0FFD220B-F32B-4BB8-8657-97248024F71C">Ensuring Data Availability for Filters</a> to ensure that column values are available.</p>
<p>Oracle GoldenGate also provides the <code class="codeph">@AFTER</code> function to retrieve after values when needed for filtering, for use in conversion functions, or other purposes. For more information about <code class="codeph">@BEFORE</code> and <code class="codeph">@AFTER</code>, see <a class="olink GWURF747" target="_blank" href="../GWURF/column-conversion-functions.htm#GWURF747"><span class="italic"><span id="GUID-A0B11A7F-5696-4BFD-923C-281AECA02FE0__GWURF"><cite>Reference for Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</li>
</ol>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD443"></a>
<div class="props_rev_3"><a id="GUID-5B7561FC-1CC3-4C80-AD82-AE6179EC4DE5"></a>
<h2 id="GWUAD-GUID-5B7561FC-1CC3-4C80-AD82-AE6179EC4DE5" class="sect2"><span class="enumeration_section">12.9</span> Selecting Columns</h2>
<div>
<div class="section">
<p>To control which columns of a source table are extracted by Oracle GoldenGate, use the <code class="codeph">COLS</code> and <code class="codeph">COLSEXCEPT</code> options of the <code class="codeph">TABLE</code> parameter. Use <code class="codeph">COLS</code> to select columns for extraction, and use <code class="codeph">COLSEXCEPT</code> to select all columns except those designated by <code class="codeph">COLSEXCEPT</code>.</p>
<p>Restricting the columns that are extracted can be useful when a target table does not contain the same columns as the source table, or when the columns contain sensitive information, such as a personal identification number or other proprietary business information.</p>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD444"></a>
<div class="props_rev_3"><a id="GUID-F95B57CA-8C3B-4C7B-BBA5-AB82DF66D080"></a>
<h2 id="GWUAD-GUID-F95B57CA-8C3B-4C7B-BBA5-AB82DF66D080" class="sect2"><span class="enumeration_section">12.10</span> Selecting and Converting SQL Operations</h2>
<div>
<div class="section">
<p>By default, Oracle GoldenGate captures and applies <code class="codeph">INSERT</code>, <code class="codeph">UPDATE</code>, and <code class="codeph">DELETE</code> operations. You can use the following parameters in the Extract or Replicat parameter file to control which kind of operations are processed, such as only inserts or only inserts and updates.</p>
<p><code class="codeph">GETINSERTS | IGNOREINSERTS</code></p>
<p><code class="codeph">GETUPDATES | IGNOREUPDATES</code></p>
<p><code class="codeph">GETDELETES | IGNOREDELETES</code></p>
<p>You can convert one type of SQL operation to another by using the following parameters in the Replicat parameter file:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p>Use <code class="codeph">INSERTUPDATES</code> to convert source update operations to inserts into the target table. This is useful for maintaining a transaction history on that table. The transaction log record must contain all of the column values of the table, not just changed values. Some databases do not log full row values to their transaction log, but only values that changed.</p>
</li>
<li>
<p>Use <code class="codeph">INSERTDELETES</code> to convert all source delete operations to inserts into the target table. This is useful for retaining a history of all records that were ever in the source database.</p>
</li>
<li>
<p>Use <code class="codeph">UPDATEDELETES</code> to convert source deletes to updates on the target.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD446"></a><a id="GWUAD1104"></a><a id="GWUAD445"></a>
<div class="props_rev_3"><a id="GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9"></a>
<h2 id="GWUAD-GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9" class="sect2"><span class="enumeration_section">12.11</span> Using Transaction History</h2>
<div>
<div class="section">
<p>Oracle GoldenGate enables you to retain a history of changes made to a target record and to map information about the operation that caused each change. This history can be useful for creating a transaction-based reporting system that contains a separate record for every operation performed on a table, as opposed to containing only the most recent version of each record.</p>
<p>For example, the following series of operations made to a target table named <code class="codeph">CUSTOMER</code> would leave no trace of the ID of <code class="codeph">Dave</code>. The last operation deletes the record, so there is no way to find out Dave's account history or his ending balance.</p>
<div class="tblformal" id="GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9__G1111011">
<p class="titleintable">Table 12-8 Operation History for Table CUSTOMER</p>
<table class="cellalignment80" title="Operation History for Table CUSTOMER" summary="This table gives an example of a series of operations made to a target table named CUSTOMER that will leave no trace of the ID of Dave. There are four columns: Sequence, Operation, ID, Balance.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment81" id="d41518e3462">Sequence</th>
<th class="cellalignment50" id="d41518e3465">Operation</th>
<th class="cellalignment74" id="d41518e3468">ID</th>
<th class="cellalignment117" id="d41518e3471">BALANCE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment83" id="d41518e3476" headers="d41518e3462">
<p><code class="codeph">1</code></p>
</td>
<td class="cellalignment53" headers="d41518e3476 d41518e3465">
<p><code class="codeph">Insert</code></p>
</td>
<td class="cellalignment75" headers="d41518e3476 d41518e3468">
<p><code class="codeph">Dave</code></p>
</td>
<td class="cellalignment118" headers="d41518e3476 d41518e3471">
<p><code class="codeph">1000</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment83" id="d41518e3497" headers="d41518e3462">
<p><code class="codeph">2</code></p>
</td>
<td class="cellalignment53" headers="d41518e3497 d41518e3465">
<p><code class="codeph">Update</code></p>
</td>
<td class="cellalignment75" headers="d41518e3497 d41518e3468">
<p><code class="codeph">Dave</code></p>
</td>
<td class="cellalignment118" headers="d41518e3497 d41518e3471">
<p><code class="codeph">900</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment83" id="d41518e3518" headers="d41518e3462">
<p><code class="codeph">3</code></p>
</td>
<td class="cellalignment53" headers="d41518e3518 d41518e3465">
<p><code class="codeph">Update</code></p>
</td>
<td class="cellalignment75" headers="d41518e3518 d41518e3468">
<p><code class="codeph">Dave</code></p>
</td>
<td class="cellalignment118" headers="d41518e3518 d41518e3471">
<p><code class="codeph">1250</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment83" id="d41518e3539" headers="d41518e3462">
<p><code class="codeph">4</code></p>
</td>
<td class="cellalignment53" headers="d41518e3539 d41518e3465">
<p><code class="codeph">Delete</code></p>
</td>
<td class="cellalignment75" headers="d41518e3539 d41518e3468">
<p><code class="codeph">Dave</code></p>
</td>
<td class="cellalignment118" headers="d41518e3539 d41518e3471">
<p><code class="codeph">1250</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<p>Retaining this history as a series of records can be useful in many ways. For example, you can generate the net effect of transactions.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead2">To Implement Transaction Reporting</p>
</div>
<!-- class="section" -->
<ol>
<li><span>To prepare Extract to capture before values, use the <code class="codeph">GETUPDATEBEFORES</code> parameter in the Extract parameter file. A before value (or before image) is the existing value of a column before an update is performed. Before images enable Oracle GoldenGate to create the transaction record.</span></li>
<li><span>To prepare Replicat to post all operations as inserts, use the <code class="codeph">INSERTALLRECORDS</code> parameter in the Replicat parameter file. Each operation on a table becomes a new record in that table.</span></li>
<li><span>To map the transaction history, use the return values of the <code class="codeph">GGHEADER</code> option of the <code class="codeph">@GETENV</code> column conversion function. Include the conversion function as the source expression in a <code class="codeph">COLMAP</code> statement in the <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> parameter.</span></li>
</ol>
<div class="section">
<p>Using the sample series of transactions shown in <a href="mapping-and-manipulating-data.htm#GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9__G1111011" title="This table gives an example of a series of operations made to a target table named CUSTOMER that will leave no trace of the ID of Dave. There are four columns: Sequence, Operation, ID, Balance.">Table 12-8</a> the following parameter configurations can be created to generate a more transaction-oriented view of customers, rather than the latest state of the database.</p>
<div class="tblformal" id="GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9__GUID-2A760E07-61F1-4D9A-997B-2C79880ABBEB">
<table class="cellalignment80" summary="This table provides sample parameter configurations.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment85" id="d41518e3611">Process</th>
<th class="cellalignment86" id="d41518e3614">Parameter statements</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment87" id="d41518e3619" headers="d41518e3611">
<p>Extract</p>
</td>
<td class="cellalignment88" headers="d41518e3619 d41518e3614">
<pre dir="ltr">
GETUPDATEBEFORES
TABLE ACCOUNT.CUSTOMER;
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment87" id="d41518e3626" headers="d41518e3611">
<p>Replicat</p>
</td>
<td class="cellalignment88" headers="d41518e3626 d41518e3614">
<pre dir="ltr">
INSERTALLRECORDS
MAP SALES.CUSTOMER, TARGET SALES.CUSTHIST,
COLMAP (TS = @GETENV ('GGHEADER', 'COMMITTIMESTAMP'),
BEFORE_AFTER = @GETENV ('GGHEADER', 'BEFOREAFTERINDICATOR'),
OP_TYPE = @GETENV ('GGHEADER', 'OPTYPE'),
ID = ID,
BALANCE = BALANCE);
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note" id="GUID-D1211C29-00F7-47BB-94EB-F583EA16CEB9__GUID-DB6ED387-54D3-4121-881B-AAA018A6949E">
<p class="notep1">Note:</p>
<p>This is not representative of a complete parameter file for an Oracle GoldenGate process. Also note that these examples represent a case-insensitive database.</p>
</div>
<p>This configuration makes possible queries such as the following, which returns the net sum of each transaction along with the time of the transaction and the customer ID.</p>
<pre dir="ltr">
SELECT AFTER.ID, AFTER.TS, AFTER.BALANCE - BEFORE.BALANCE
FROM CUSTHIST AFTER, CUSTHIST BEFORE
WHERE AFTER.ID = BEFORE.ID AND AFTER.TS = BEFORE.TS AND
AFTER.BEFORE_AFTER = 'A' AND BEFORE.BEFORE_AFTER = 'B';
</pre></div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD448"></a><a id="GWUAD449"></a><a id="GWUAD450"></a><a id="GWUAD447"></a>
<div class="props_rev_3"><a id="GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486"></a>
<h2 id="GWUAD-GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486" class="sect2"><span class="enumeration_section">12.12</span> Testing and Transforming Data</h2>
<div>
<p>Data testing and transformation can be performed by either Extract or Replicat and is implemented by using the Oracle GoldenGate built-in column-conversion functions within a <code class="codeph">COLMAP</code> clause of a <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement. With these conversion functions, you can:</p>
<ul style="list-style-type: disc;">
<li>
<p>Transform dates.</p>
</li>
<li>
<p>Test for the presence of column values.</p>
</li>
<li>
<p>Perform arithmetic operations.</p>
</li>
<li>
<p>Manipulate numbers and character strings.</p>
</li>
<li>
<p>Handle null, invalid, and missing data.</p>
</li>
<li>
<p>Perform tests.</p>
</li>
</ul>
<p>This chapter provides an overview of some of the Oracle GoldenGate functions related to data manipulation. For the complete reference, see <a class="olink GWURF-GUID-ADDD81D1-35B8-4E5B-A9EB-0CD581333074" target="_blank" href="../GWURF/column-conversion-functions.htm#GWURF-GUID-ADDD81D1-35B8-4E5B-A9EB-0CD581333074">Reference for Oracle GoldenGate for Windows and UNIX</a>.</p>
<p>If you need to use logic beyond that which is supplied by the Oracle GoldenGate functions, you can call your own functions by implementing Oracle GoldenGate user exits. See <a href="customizing-oracle-goldengate-processing.htm#GUID-0818E549-40DA-48E8-95F7-501C7DE11480">Using User Exits to Extend Oracle GoldenGate Capabilities</a> for more information about user exits.</p>
<p>Oracle GoldenGate conversion functions take the following general syntax:</p>
<div class="section">
<p class="subhead2">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">
@<span class="italic">function</span> (<span class="italic">argument</span>)
</pre>
<div class="tblformal" id="GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486__GUID-CB63FAAC-82A7-4EE5-99B9-B11E3D01C4F0">
<p class="titleintable">Table 12-9 Conversion Function Syntax</p>
<table class="cellalignment80" title="Conversion Function Syntax" summary="This table shows conversion function syntax. It lists and describes the syntax elements.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment43" id="d41518e3736">Syntax element</th>
<th class="cellalignment43" id="d41518e3739">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3744" headers="d41518e3736">
<p>@<span class="italic"><code class="codeph">function</code></span></p>
</td>
<td class="cellalignment44" headers="d41518e3744 d41518e3739">
<p>The Oracle GoldenGate function name. Function names have the prefix <code class="codeph">@</code>, as in <code class="codeph">@COMPUTE</code> or <code class="codeph">@DATE</code>. A space between the function name and the open-parenthesis before the input argument is optional.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3763" headers="d41518e3736">
<p><span class="italic"><code class="codeph">argument</code></span></p>
</td>
<td class="cellalignment44" headers="d41518e3763 d41518e3739">
<p>A function argument.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="tblformal" id="GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486__GUID-1CA33269-9CF9-45A4-86DB-CB4508732907">
<p class="titleintable">Table 12-10 Function Arguments</p>
<table class="cellalignment80" title="Function Arguments" summary="This table shows function arguments and gives an example of each.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment43" id="d41518e3781">Argument element</th>
<th class="cellalignment43" id="d41518e3784">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3789" headers="d41518e3781">
<p>A numeric constant</p>
</td>
<td class="cellalignment44" headers="d41518e3789 d41518e3784">
<pre dir="ltr">
123
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3797" headers="d41518e3781">
<p>A string literal enclosed within single quote marks</p>
</td>
<td class="cellalignment44" headers="d41518e3797 d41518e3784">
<pre dir="ltr">
'ABCD'
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3804" headers="d41518e3781">
<p>The name of a source column</p>
</td>
<td class="cellalignment44" headers="d41518e3804 d41518e3784">
<pre dir="ltr">
PHONE_NO or phone_no, or "Phone_No" or Phone_no
</pre>
<p>Depends on whether the database is case-insensitive, is case-sensitive and requires quote marks to enforce the case, or is case-sensitive and does not require quotes.</p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3815" headers="d41518e3781">
<p>An arithmetic expression</p>
</td>
<td class="cellalignment44" headers="d41518e3815 d41518e3784">
<pre dir="ltr">
COL2 * 100
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3823" headers="d41518e3781">
<p>A comparison expression</p>
</td>
<td class="cellalignment44" headers="d41518e3823 d41518e3784">
<pre dir="ltr">
((COL3 &gt; 100) AND (COL4 &gt; 0))
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment44" id="d41518e3831" headers="d41518e3781">
<p>Other Oracle GoldenGate functions</p>
</td>
<td class="cellalignment44" headers="d41518e3831 d41518e3784">
<pre dir="ltr">
AMOUNT = @IF (@COLTEST (AMT, MISSING, INVALID), 0, AMT)
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" --></div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-22BAC88D-86D1-432C-91DA-0A91846C86DB">Handling Column Names and Literals in Functions</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-CC5AE6AB-211E-4A42-9003-94D02E691E67">Using the Appropriate Function</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-DEA5C823-9E16-46AF-A13A-DA5EB3A19674">Transforming Dates</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-C3EE4956-6E8F-4E99-9ECB-F88A6423B67F">Performing Arithmetic Operations</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-F49AD29C-B3ED-4C2D-A9AC-0BF8CC75E08D">Manipulating Numbers and Character Strings</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-665E8CC6-828D-45A8-B327-73E8C34A1878">Handling Null, Invalid, and Missing Data</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-606C18B9-7646-4469-8EDD-8DA9B872816C">Performing Tests</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
<a id="GWUAD451"></a>
<div class="props_rev_3"><a id="GUID-22BAC88D-86D1-432C-91DA-0A91846C86DB"></a>
<h3 id="GWUAD-GUID-22BAC88D-86D1-432C-91DA-0A91846C86DB" class="sect3"><span class="enumeration_section">12.12.1</span> Handling Column Names and Literals in Functions</h3>
<div>
<p>By default, literal strings must be enclosed in single quotes in a column-conversion function. Case-sensitive column names must be enclosed within double quotes if required by the database, or otherwise entered in the case in which they are stored in the database.</p>
</div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD452"></a>
<div class="props_rev_3"><a id="GUID-CC5AE6AB-211E-4A42-9003-94D02E691E67"></a>
<h3 id="GWUAD-GUID-CC5AE6AB-211E-4A42-9003-94D02E691E67" class="sect3"><span class="enumeration_section">12.12.2</span> Using the Appropriate Function</h3>
<div>
<div class="section">
<p>Use the appropriate function for the type of column that is being manipulated or evaluated. For example, numeric functions can be used only to compare numeric values. To compare character values, use one of the Oracle GoldenGate character-comparison functions. LOB columns cannot be used in conversion functions.</p>
<p>This statement would fail because it uses <code class="codeph">@IF</code>, which is a numerical function, to compare string values.</p>
<pre dir="ltr">
@IF (SR_AREA = 'Help Desk', 'TRUE', 'FALSE')
</pre>
<p>The following statement would succeed because it compares a numeric value.</p>
<pre dir="ltr">
@IF (SR_AREA = 20, 'TRUE', 'FALSE')
</pre>
<p>See <a href="mapping-and-manipulating-data.htm#GUID-F49AD29C-B3ED-4C2D-A9AC-0BF8CC75E08D">Manipulating Numbers and Character Strings</a> for more information.</p>
<div class="infobox-note" id="GUID-CC5AE6AB-211E-4A42-9003-94D02E691E67__GUID-7D45D00C-1B78-42B2-BD14-33974E9DD890">
<p class="notep1">Note:</p>
<p>Errors in argument parsing sometimes are not detected until records are processed. Verify syntax before starting processes.</p>
</div>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD454"></a><a id="GWUAD453"></a>
<div class="props_rev_3"><a id="GUID-DEA5C823-9E16-46AF-A13A-DA5EB3A19674"></a>
<h3 id="GWUAD-GUID-DEA5C823-9E16-46AF-A13A-DA5EB3A19674" class="sect3"><span class="enumeration_section">12.12.3</span> Transforming Dates</h3>
<div>
<div class="section">
<p>Use the <code class="codeph">@DATE</code>, <code class="codeph">@DATEDIF</code>, and <code class="codeph">@DATENOW</code> functions to retrieve dates and times, perform computations on them, and convert them.</p>
<p>This example computes the time that an order is filled</p>
</div>
<!-- class="section" -->
<div class="example" id="GUID-DEA5C823-9E16-46AF-A13A-DA5EB3A19674__GUID-F03C5048-5755-4EAC-8AA3-2ECA6C6F2A3C">
<p class="titleinexample">Example 12-5 Computing Time</p>
<pre dir="ltr">
ORDER_FILLED = @DATE (
    'YYYY-MM-DD HH:MI:SS',
    'JTS',
    @DATE ('JTS',
    'YYMMDDHHMISS',
    ORDER_TAKEN_TIME) +
    ORDER_MINUTES * 60 * 1000000)
</pre></div>
<!-- class="example" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD455"></a>
<div class="props_rev_3"><a id="GUID-C3EE4956-6E8F-4E99-9ECB-F88A6423B67F"></a>
<h3 id="GWUAD-GUID-C3EE4956-6E8F-4E99-9ECB-F88A6423B67F" class="sect3"><span class="enumeration_section">12.12.4</span> Performing Arithmetic Operations</h3>
<div>
<p>To return the result of an arithmetic expression, use the <code class="codeph">@COMPUTE</code> function. The value returned from the function is in the form of a string. Arithmetic expressions can be combinations of the following elements.</p>
<ul style="list-style-type: disc;">
<li>
<p>Numbers</p>
</li>
<li>
<p>The names of columns that contain numbers</p>
</li>
<li>
<p>Functions that return numbers</p>
</li>
<li>
<p>Arithmetic operators:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">+</code> (plus)</p>
</li>
<li>
<p><code class="codeph">-</code> (minus)</p>
</li>
<li>
<p><code class="codeph">*</code> (multiply)</p>
</li>
<li>
<p><code class="codeph">/</code> (divide)</p>
</li>
<li>
<p><code class="codeph">\</code> (remainder)</p>
</li>
</ul>
</li>
<li>
<p>Comparison operators:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">&gt;</code> (greater than)</p>
</li>
<li>
<p><code class="codeph">&gt;=</code> (greater than or equal)</p>
</li>
<li>
<p><code class="codeph">&lt;</code> (less than)</p>
</li>
<li>
<p><code class="codeph">&lt;=</code> (less than or equal)</p>
</li>
<li>
<p><code class="codeph">=</code> (equal)</p>
</li>
<li>
<p><code class="codeph">&lt;&gt;</code> (not equal)</p>
</li>
</ul>
<p>Results that are derived from comparisons can be zero (indicating <code class="codeph">FALSE</code>) or non-zero (indicating <code class="codeph">TRUE</code>).</p>
</li>
<li>
<p>Parentheses (for grouping results in the expression)</p>
</li>
<li>
<p>The conjunction operators <code class="codeph">AND</code>, <code class="codeph">OR</code>. Oracle GoldenGate only evaluates the necessary part of a conjunction expression. Once a statement is <code class="codeph">FALSE</code>, the rest of the expression is ignored. This can be valuable when evaluating fields that may be missing or null. For example, if the value of <code class="codeph">COL1</code> is 25 and the value of <code class="codeph">COL2</code> is 10, then the following are possible:</p>
<pre dir="ltr">
@COMPUTE ( (COL1 &gt; 0) AND (COL2 &lt; 3) ) returns 0.
@COMPUTE ( (COL1 &lt; 0) AND (COL2 &lt; 3) ) returns 0. COL2 &lt; 3 is never evaluated.
@COMPUTE ((COL1 + COL2)/5) returns 7.
</pre></li>
</ul>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-5D3FF18C-A504-4BD7-8131-3A360F0FAE69">Omitting @COMPUTE</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
<a id="GWUAD456"></a>
<div class="props_rev_3"><a id="GUID-5D3FF18C-A504-4BD7-8131-3A360F0FAE69"></a>
<h4 id="GWUAD-GUID-5D3FF18C-A504-4BD7-8131-3A360F0FAE69" class="sect4"><span class="enumeration_section">12.12.4.1</span> Omitting @COMPUTE</h4>
<div>
<p>The <code class="codeph">@COMPUTE</code> keyword is not required when an expression is passed as a function argument.</p>
<pre dir="ltr">
@STRNUM ((AMOUNT1 + AMOUNT2), LEFT)
</pre>
<p>The following expression returns the same result as the previous one:</p>
<pre dir="ltr">
@STRNUM ((@COMPUTE (AMOUNT1 + AMOUNT2), LEFT)
</pre></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-C3EE4956-6E8F-4E99-9ECB-F88A6423B67F">Performing Arithmetic Operations</a></p>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD458"></a><a id="GWUAD457"></a>
<div class="props_rev_3"><a id="GUID-F49AD29C-B3ED-4C2D-A9AC-0BF8CC75E08D"></a>
<h3 id="GWUAD-GUID-F49AD29C-B3ED-4C2D-A9AC-0BF8CC75E08D" class="sect3"><span class="enumeration_section">12.12.5</span> Manipulating Numbers and Character Strings</h3>
<div>
<p>To convert numbers and character strings, Oracle GoldenGate supplies the following functions:</p>
<div class="tblformal" id="GUID-F49AD29C-B3ED-4C2D-A9AC-0BF8CC75E08D__GUID-DC6AF5CC-5B4A-4281-BA5C-F16826DEB98F">
<p class="titleintable">Table 12-11 Conversion Functions for Numbers and Characters</p>
<table class="cellalignment80" title="Conversion Functions for Numbers and Characters" summary="This table shows conversion functions for numbers and characters. The left column gives the purpose and the right column lists the conversion function.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment119" id="d41518e4232">Purpose</th>
<th class="cellalignment57" id="d41518e4235">Conversion Function</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4240" headers="d41518e4232">
<p>Convert a binary or character string to a number.</p>
</td>
<td class="cellalignment60" headers="d41518e4240 d41518e4235">
<p><code class="codeph">@NUMBIN</code></p>
<p><code class="codeph">@NUMSTR</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4253" headers="d41518e4232">
<p>Convert a number to a string.</p>
</td>
<td class="cellalignment60" headers="d41518e4253 d41518e4235">
<p><code class="codeph">@STRNUM</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4262" headers="d41518e4232">
<p>Compare strings.</p>
</td>
<td class="cellalignment60" headers="d41518e4262 d41518e4235">
<p><code class="codeph">@STRCMP</code></p>
<p><code class="codeph">@STRNCMP</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4275" headers="d41518e4232">
<p>Concatenate strings.</p>
</td>
<td class="cellalignment60" headers="d41518e4275 d41518e4235">
<p><code class="codeph">@STRCAT</code></p>
<p><code class="codeph">@STRNCAT</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4287" headers="d41518e4232">
<p>Extract from a string.</p>
</td>
<td class="cellalignment60" headers="d41518e4287 d41518e4235">
<p><code class="codeph">@STREXT</code></p>
<p><code class="codeph">@STRFIND</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4299" headers="d41518e4232">
<p>Return the length of a string.</p>
</td>
<td class="cellalignment60" headers="d41518e4299 d41518e4235">
<p><code class="codeph">@STRLEN</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4308" headers="d41518e4232">
<p>Substitute one string for another.</p>
</td>
<td class="cellalignment60" headers="d41518e4308 d41518e4235">
<p><code class="codeph">@STRSUB</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4317" headers="d41518e4232">
<p>Convert a string to upper case.</p>
</td>
<td class="cellalignment60" headers="d41518e4317 d41518e4235">
<p><code class="codeph">@STRUP</code></p>
</td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment120" id="d41518e4326" headers="d41518e4232">
<p>Trim leading or trailing spaces, or both.</p>
</td>
<td class="cellalignment60" headers="d41518e4326 d41518e4235">
<p><code class="codeph">@STRLTRIM</code></p>
<p><code class="codeph">@STRRTRIM</code></p>
<p><code class="codeph">@STRTRIM</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD459"></a>
<div class="props_rev_3"><a id="GUID-665E8CC6-828D-45A8-B327-73E8C34A1878"></a>
<h3 id="GWUAD-GUID-665E8CC6-828D-45A8-B327-73E8C34A1878" class="sect3"><span class="enumeration_section">12.12.6</span> Handling Null, Invalid, and Missing Data</h3>
<div>
<p>When column data is missing, invalid, or null, an Oracle GoldenGate conversion function returns a corresponding value.</p>
<p>If <code class="codeph">BALANCE</code> is <code class="codeph">1000</code>, but <code class="codeph">AMOUNT</code> is <code class="codeph">NULL</code>, the following expression returns <code class="codeph">NULL</code>:</p>
<pre dir="ltr">
NEW_BALANCE = @COMPUTE (BALANCE + AMOUNT)
</pre>
<p>These exception conditions render the entire calculation invalid. To ensure a successful conversion, use the <code class="codeph">@COLSTAT,</code> <code class="codeph">@COLTEST</code> and <code class="codeph">@IF</code> functions to test for, and override, the exception condition.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-F1C871E1-1D22-4CC1-A2E6-6253D99C6164">Using @COLSTAT</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-C5162CE7-58A8-426B-8965-88581169DE7C">Using @COLTEST</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-201A3320-3F44-431C-9DF0-C990A73758C5">Using @IF</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
<a id="GWUAD460"></a>
<div class="props_rev_3"><a id="GUID-F1C871E1-1D22-4CC1-A2E6-6253D99C6164"></a>
<h4 id="GWUAD-GUID-F1C871E1-1D22-4CC1-A2E6-6253D99C6164" class="sect4"><span class="enumeration_section">12.12.6.1</span> Using @COLSTAT</h4>
<div>
<div class="section">
<p>Use the <code class="codeph">@COLSTAT</code> function to return an indicator to Extract or Replicat that a column is missing, null, or invalid. The indicator can be used as part of a larger manipulation formula that uses additional conversion functions.</p>
<p>The following example returns a <code class="codeph">NULL</code> into target column <code class="codeph">ITEM</code>.</p>
<pre dir="ltr">
ITEM = @COLSTAT (NULL)
</pre>
<p>The following <code class="codeph">@IF</code> calculation uses <code class="codeph">@COLSTAT</code> to return <code class="codeph">NULL</code> to the target column if <code class="codeph">PRICE</code> and <code class="codeph">QUANTITY</code> are less than zero.</p>
<pre dir="ltr">
ORDER_TOTAL = PRICE * QUANTITY, @IF ((PRICE &lt; 0) AND (QUANTITY &lt; 0), @COLSTAT (NULL))
</pre></div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-665E8CC6-828D-45A8-B327-73E8C34A1878">Handling Null, Invalid, and Missing Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD461"></a>
<div class="props_rev_3"><a id="GUID-C5162CE7-58A8-426B-8965-88581169DE7C"></a>
<h4 id="GWUAD-GUID-C5162CE7-58A8-426B-8965-88581169DE7C" class="sect4"><span class="enumeration_section">12.12.6.2</span> Using @COLTEST</h4>
<div>
<div class="section">
<p>Use the <code class="codeph">@COLTEST</code> function to check for the following conditions:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">PRESENT</code> tests whether a column is present and not null.</p>
</li>
<li>
<p><code class="codeph">NULL</code> tests whether a column is present and null.</p>
</li>
<li>
<p><code class="codeph">MISSING</code> tests whether a column is not present.</p>
</li>
<li>
<p><code class="codeph">INVALID</code> tests whether a column is present but contains invalid data.</p>
</li>
</ul>
<p>The following example checks whether the <code class="codeph">AMOUNT</code> column is present and <code class="codeph">NULL</code> and whether it is present but invalid.</p>
<pre dir="ltr">
@COLTEST (AMOUNT, NULL, INVALID)
</pre></div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-665E8CC6-828D-45A8-B327-73E8C34A1878">Handling Null, Invalid, and Missing Data</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD462"></a>
<div class="props_rev_3"><a id="GUID-201A3320-3F44-431C-9DF0-C990A73758C5"></a>
<h4 id="GWUAD-GUID-201A3320-3F44-431C-9DF0-C990A73758C5" class="sect4"><span class="enumeration_section">12.12.6.3</span> Using @IF</h4>
<div>
<div class="section">
<p>Use the <code class="codeph">@IF</code> function to return one of two values based on a condition. Use it with the <code class="codeph">@COLSTAT</code> and <code class="codeph">@COLTEST</code> functions to begin a conditional argument that tests for one or more exception conditions and then directs processing based on the results of the test.</p>
<pre dir="ltr">
NEW_BALANCE = @IF (@COLTEST (BALANCE, NULL, INVALID) OR
@COLTEST (AMOUNT, NULL, INVALID), @COLSTAT (NULL), BALANCE + AMOUNT)
</pre>
<p>This conversion returns one of the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">NULL</code> when <code class="codeph">BALANCE</code> or <code class="codeph">AMOUNT</code> is <code class="codeph">NULL</code> or <code class="codeph">INVALID</code></p>
</li>
<li>
<p><code class="codeph">MISSING</code> when either column is missing</p>
</li>
<li>
<p>The sum of the columns.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-665E8CC6-828D-45A8-B327-73E8C34A1878">Handling Null, Invalid, and Missing Data</a></p>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD463"></a>
<div class="props_rev_3"><a id="GUID-606C18B9-7646-4469-8EDD-8DA9B872816C"></a>
<h3 id="GWUAD-GUID-606C18B9-7646-4469-8EDD-8DA9B872816C" class="sect3"><span class="enumeration_section">12.12.7</span> Performing Tests</h3>
<div>
<p>The <code class="codeph">@CASE, @VALONEOF,</code> and <code class="codeph">@EVAL</code> functions provide additional methods for performing tests on data before manipulating or mapping it.</p>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-6450704E-C026-4699-82FD-6DE3FEE82464">Using @CASE</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-27A2E1D9-530B-426D-AFC4-16A22AC7E8CC">Using @VALONEOF</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-524AAE3E-24FC-4912-B388-3FB1581FB772">Using @EVAL</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-EB780317-ED74-4B56-8D50-DAB89E5CE486">Testing and Transforming Data</a></p>
</div>
</div>
</div>
<a id="GWUAD464"></a>
<div class="props_rev_3"><a id="GUID-6450704E-C026-4699-82FD-6DE3FEE82464"></a>
<h4 id="GWUAD-GUID-6450704E-C026-4699-82FD-6DE3FEE82464" class="sect4"><span class="enumeration_section">12.12.7.1</span> Using @CASE</h4>
<div>
<div class="section">
<p>Use <code class="codeph">@CASE</code> to select a value depending on a series of value tests.</p>
<pre dir="ltr">
@CASE (PRODUCT_CODE, 'CAR', 'A car', 'TRUCK', 'A truck')
</pre>
<p>This example returns the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">A car</code> if <code class="codeph">PRODUCT_CODE</code> is <code class="codeph">CAR</code></p>
</li>
<li>
<p><code class="codeph">A truck</code> if <code class="codeph">PRODUCT_CODE</code> is <code class="codeph">TRUCK</code></p>
</li>
<li>
<p>A <code class="codeph">FIELD_MISSING</code> indication if <code class="codeph">PRODUCT_CODE</code> fits neither of the other conditions</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-606C18B9-7646-4469-8EDD-8DA9B872816C">Performing Tests</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD465"></a>
<div class="props_rev_3"><a id="GUID-27A2E1D9-530B-426D-AFC4-16A22AC7E8CC"></a>
<h4 id="GWUAD-GUID-27A2E1D9-530B-426D-AFC4-16A22AC7E8CC" class="sect4"><span class="enumeration_section">12.12.7.2</span> Using @VALONEOF</h4>
<div>
<div class="section">
<p>Use <code class="codeph">@VALONEOF</code> to compare a column or string to a list of values.</p>
<pre dir="ltr">
@IF (@VALONEOF (STATE, 'CA', 'NY'), 'COAST', 'MIDDLE')
</pre>
<p>In this example, if <code class="codeph">STATE</code> is <code class="codeph">CA</code> or <code class="codeph">NY</code>, the expression returns <code class="codeph">COAST</code>, which is the response returned by <code class="codeph">@IF</code> when the value is non-zero (meaning <code class="codeph">TRUE</code>).</p>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-606C18B9-7646-4469-8EDD-8DA9B872816C">Performing Tests</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD466"></a>
<div class="props_rev_3"><a id="GUID-524AAE3E-24FC-4912-B388-3FB1581FB772"></a>
<h4 id="GWUAD-GUID-524AAE3E-24FC-4912-B388-3FB1581FB772" class="sect4"><span class="enumeration_section">12.12.7.3</span> Using @EVAL</h4>
<div>
<div class="section">
<p>Use <code class="codeph">@EVAL</code> to select a value based on a series of independent conditional tests.</p>
<pre dir="ltr">
@EVAL (AMOUNT &gt; 10000, 'high amount', AMOUNT &gt; 5000, 'somewhat high')
</pre>
<p>This example returns the following:</p>
</div>
<!-- class="section" -->
<div class="section">
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">high amount</code> if <code class="codeph">AMOUNT</code> is greater than <code class="codeph">10000</code></p>
</li>
<li>
<p><code class="codeph">somewhat high</code> if <code class="codeph">AMOUNT</code> is greater than <code class="codeph">5000</code>, and less than or equal to <code class="codeph">10000</code>, (unless the prior condition was satisfied)</p>
</li>
<li>
<p>A <code class="codeph">FIELD_MISSING</code> indication if neither condition is satisfied.</p>
</li>
</ul>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-606C18B9-7646-4469-8EDD-8DA9B872816C">Performing Tests</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<a id="GWUAD467"></a>
<div class="props_rev_3"><a id="GUID-AD803728-4A08-46F5-AEEF-68D2881EB18D"></a>
<h2 id="GWUAD-GUID-AD803728-4A08-46F5-AEEF-68D2881EB18D" class="sect2"><span class="enumeration_section">12.13</span> Using Tokens</h2>
<div>
<p>You can capture and store data within the <span class="italic">user token</span> area of a trail record header. Token data can be retrieved and used in many ways to customize the way that Oracle GoldenGate delivers information. For example, you can use token data in:</p>
<ul style="list-style-type: disc;">
<li>
<p>Column maps</p>
</li>
<li>
<p>Stored procedures called by a <code class="codeph">SQLEXEC</code> statement</p>
</li>
<li>
<p>User exits</p>
</li>
<li>
<p>Macros</p>
</li>
</ul>
</div>
<div>
<ul class="ullinks">
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-20C3757E-CB11-489E-8164-F4D5FA24699B">Defining Tokens</a><br /></li>
<li class="ulchildlink"><a href="mapping-and-manipulating-data.htm#GUID-C6096C62-05D4-4E5D-BAE7-4BAEE0972F1D">Using Token Data in Target Tables</a><br /></li>
</ul>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-86A97786-5D74-4074-BCD4-DFD23FF1D4C6" title="This chapter describe how you can integrate data between source and target tables.">Mapping and Manipulating Data</a></p>
</div>
</div>
</div>
<a id="GWUAD469"></a><a id="GWUAD468"></a>
<div class="props_rev_3"><a id="GUID-20C3757E-CB11-489E-8164-F4D5FA24699B"></a>
<h3 id="GWUAD-GUID-20C3757E-CB11-489E-8164-F4D5FA24699B" class="sect3"><span class="enumeration_section">12.13.1</span> Defining Tokens</h3>
<div>
<div class="section">
<p>To use tokens, you define the token name and associate it with data. The data can be any valid character data or values retrieved from Oracle GoldenGate column-conversion functions.</p>
<p>The token area in the record header permits up to 2,000 bytes of data. Token names, the length of the data, and the data itself must fit into that space.</p>
<p>To define a token, use the <code class="codeph">TOKENS</code> option of the <code class="codeph">TABLE</code> parameter in the Extract parameter file.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">
TABLE <span class="italic">table_spec</span>, TOKENS (<span class="italic">token_name</span> = <span class="italic">token_data</span> [, ...]);
</pre>
<p>Where:</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code class="codeph">table_spec</code></span> is the name of the source table. A container or catalog name, if applicable, and an owner name must precede the table name.</p>
</li>
<li>
<p><span class="italic"><code class="codeph">token_name</code></span> is a name of your choice for the token. It can be any number of alphanumeric characters and is not case-sensitive.</p>
</li>
<li>
<p><span class="italic"><code class="codeph">token_data</code></span> is a character string of up to 2000 bytes. The data can be either a string that is enclosed within single quotes or the result of an Oracle GoldenGate column-conversion function. The character set of token data is not converted. The token must be in the character set of the source database for Extract and in the character set of the target database for Replicat. In the trail file, user tokens are stored in UTF-8.</p>
</li>
</ul>
<pre dir="ltr">
TABLE ora.oratest, TOKENS (
TK-OSUSER = @GETENV ('GGENVIRONMENT' , 'OSUSERNAME'),
TK-GROUP = @GETENV ('GGENVIRONMENT' , 'GROUPNAME')
TK-HOST =  @GETENV('GGENVIRONMENT' , 'HOSTNAME'));
</pre>
<p>As shown in this example, the Oracle GoldenGate <code class="codeph">@GETENV</code> function is an effective way to populate token data. This function provides several options for capturing environment information that can be mapped to tokens and then used on the target system for column mapping.</p>
</div>
<!-- class="section" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-AD803728-4A08-46F5-AEEF-68D2881EB18D">Using Tokens</a></p>
</div>
</div>
</div>
</div>
<a id="GWUAD471"></a><a id="GWUAD472"></a><a id="GWUAD470"></a>
<div class="props_rev_3"><a id="GUID-C6096C62-05D4-4E5D-BAE7-4BAEE0972F1D"></a>
<h3 id="GWUAD-GUID-C6096C62-05D4-4E5D-BAE7-4BAEE0972F1D" class="sect3"><span class="enumeration_section">12.13.2</span> Using Token Data in Target Tables</h3>
<div>
<div class="section">
<p>To map token data to a target table, use the <code class="codeph">@TOKEN</code> column-conversion function in the source expression of a <code class="codeph">COLMAP</code> clause in a Replicat <code class="codeph">MAP</code> statement. The <code class="codeph">@TOKEN</code> function provides the name of the token to map. The <code class="codeph">COLMAP</code> syntax with <code class="codeph">@TOKEN</code> is:</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead3">Syntax</p>
</div>
<!-- class="section" -->
<div class="section">
<pre dir="ltr">
COLMAP (<span class="italic">target_column</span> = @TOKEN ('<span class="italic">token_name</span>'))
</pre>
<p>The following <code class="codeph">MAP</code> statement maps target columns <code class="codeph">host</code>, <code class="codeph">gg_group</code>, and so forth to tokens <code class="codeph">tk-host</code>, <code class="codeph">tk-group</code>, and so forth. Note that the arguments must be enclosed within single quotes.</p>
<div class="tblformal" id="GUID-C6096C62-05D4-4E5D-BAE7-4BAEE0972F1D__GUID-6B2E56D0-0EB4-4E16-8D90-B01D250337A4">
<table class="cellalignment80" summary="This table shows user tokens and values.">
<thead>
<tr class="cellalignment25">
<th class="cellalignment50" id="d41518e5093">User tokens</th>
<th class="cellalignment93" id="d41518e5096">Values</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5101" headers="d41518e5093">
<pre dir="ltr">
tk-host
</pre></td>
<td class="cellalignment94" headers="d41518e5101 d41518e5096">
<pre dir="ltr">
:sysA
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5108" headers="d41518e5093">
<pre dir="ltr">
tk-group
</pre></td>
<td class="cellalignment94" headers="d41518e5108 d41518e5096">
<pre dir="ltr">
:extora
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5115" headers="d41518e5093">
<pre dir="ltr">
tk-osuser
</pre></td>
<td class="cellalignment94" headers="d41518e5115 d41518e5096">
<pre dir="ltr">
:jad
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5122" headers="d41518e5093">
<pre dir="ltr">
tk-domain
</pre></td>
<td class="cellalignment94" headers="d41518e5122 d41518e5096">
<pre dir="ltr">
:admin
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5129" headers="d41518e5093">
<pre dir="ltr">
tk-ba_ind
</pre></td>
<td class="cellalignment94" headers="d41518e5129 d41518e5096">
<pre dir="ltr">
:B
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5136" headers="d41518e5093">
<pre dir="ltr">
tk-commit_ts
</pre></td>
<td class="cellalignment94" headers="d41518e5136 d41518e5096">
<pre dir="ltr">
:2011-01-24 17:08:59.000000
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5143" headers="d41518e5093">
<pre dir="ltr">
tk-pos
</pre></td>
<td class="cellalignment94" headers="d41518e5143 d41518e5096">
<pre dir="ltr">
:3604496
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5150" headers="d41518e5093">
<pre dir="ltr">
tk-rba
</pre></td>
<td class="cellalignment94" headers="d41518e5150 d41518e5096">
<pre dir="ltr">
:4058
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5157" headers="d41518e5093">
<pre dir="ltr">
tk-table
</pre></td>
<td class="cellalignment94" headers="d41518e5157 d41518e5096">
<pre dir="ltr">
:oratest
</pre></td>
</tr>
<tr class="cellalignment25">
<td class="cellalignment53" id="d41518e5164" headers="d41518e5093">
<pre dir="ltr">
tk-optype
</pre></td>
<td class="cellalignment94" headers="d41518e5164 d41518e5096">
<pre dir="ltr">
:insert
</pre></td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="example" id="GUID-C6096C62-05D4-4E5D-BAE7-4BAEE0972F1D__GUID-75D95A68-7DB3-4A11-A937-38A9192C4A97">
<p class="titleinexample">Example 12-6 MAP Statement</p>
<pre dir="ltr">
MAP ora.oratest, TARGET ora.rpt,
COLMAP (USEDEFAULTS,
host = @token ('tk-host'),
gg_group = @token ('tk-group'),
osuser= @token ('tk-osuser'),
domain = @token ('tk-domain'),
ba_ind= @token ('tk-ba_ind'),
commit_ts = @token ('tk-commit_ts'),
pos = @token ('tk-pos'),
rba = @token ('tk-rba'),
tablename = @token ('tk-table'),
optype = @token ('tk-optype'));
</pre>
<p>The tokens in this example will look similar to the following within the record header in the trail:</p>
</div>
<!-- class="example" --></div>
<div>
<div class="familylinks">
<div class="parentlink">
<p><strong>Parent topic:</strong> <a href="mapping-and-manipulating-data.htm#GUID-AD803728-4A08-46F5-AEEF-68D2881EB18D">Using Tokens</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment24">
<tr>
<td class="cellalignment31">
<table class="cellalignment29">
<tr>
<td class="cellalignment28"><a href="configuring-oracle-goldengate-security.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment28"><a href="associating-replicated-data-metadata.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment33">
<table class="cellalignment27">
<tr>
<td class="cellalignment28"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment28"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
