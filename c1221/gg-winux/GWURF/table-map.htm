<!DOCTYPE html>
<html lang="en-US" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<meta http-equiv="Content-Type" content="UTF-8" />
<title>TABLE | MAP</title>
<meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)" />
<meta name="dcterms.created" content="2018-07-19T03:21:52Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Fusion Middleware Reference for Oracle GoldenGate for Windows and UNIX" />
<meta name="dcterms.identifier" content="E66350-08" />
<meta name="dcterms.isVersionOf" content="GWURF" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2013, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js" charset="UTF-8"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="syslog.htm" title="Previous" type="text/html" />
<link rel="Next" href="table-defgen.htm" title="Next" type="text/html" />
<link rel="alternate" href="GWURF.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C"></a> <span id="PAGE" style="display:none;">304/459</span> <!-- End Header -->
<a id="GWURF1026"></a><a id="GWURF548"></a><a id="GWURF550"></a><a id="GWURF551"></a><a id="GWURF552"></a><a id="GWURF553"></a><a id="GWURF554"></a><a id="GWURF1027"></a><a id="GWURF555"></a><a id="GWURF556"></a><a id="GWURF557"></a><a id="GWURF558"></a><a id="GWURF560"></a><a id="GWURF561"></a><a id="GWURF1028"></a><a id="GWURF1029"></a><a id="GWURF1030"></a><a id="GWURF1130"></a><a id="GWURF1131"></a><a id="GWURF1132"></a><a id="GWURF577"></a><a id="GWURF546"></a>
<h1 id="GWURF-GUID-C2356234-3780-48EE-9E7A-F21DC352638C" class="sect1"><span class="enumeration_section">3.171</span> TABLE | MAP</h1>
<div>
<div class="section">
<p class="subhead1">Valid For</p>
<p><code class="codeph">TABLE</code> is valid for Extract. <code class="codeph">MAP</code> is valid for Replicat</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Description</p>
<p>The <code class="codeph">TABLE</code> and <code class="codeph">MAP</code> parameters control the selection, mapping, and manipulation of the objects that are to be affected by an Oracle GoldenGate process. These parameters work as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use the <code class="codeph">TABLE</code> parameter in an Extract parameter file to specify one or more objects that are to be captured from the data source by the Extract process. <code class="codeph">TABLE</code> options specify processing work such as filtering and token definitions that must be performed before Extract writes the captured data to the Oracle GoldenGate trail.</p>
</li>
<li>
<p>Use the <code class="codeph">MAP</code> parameter in the Replicat parameter file to map the data from the source objects to the appropriate target objects. <code class="codeph">MAP</code> options specify processing work such as filtering, conversion, and error handling that must be performed before the data is applied to the target objects. Each target object that you want to synchronize with a source object must be associated with that source object by means of a <code class="codeph">MAP</code> parameter. Multiple source-target relationships can be specified by means of a wildcard.</p>
</li>
</ul>
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code> are valid for initial load configurations and for online processes configured to support the replication of transactional changes.</p>
<p>You can process the following objects with <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>Indexes</p>
</li>
<li>
<p>Triggers</p>
</li>
<li>
<p>Materialized views</p>
</li>
<li>
<p>Tables</p>
</li>
</ul>
<p>To specify a sequence for capture by Extract, use the <code class="codeph">SEQUENCE</code> parameter.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-73D303C8-974B-47E9-BC94-E9ADBF610032">
<p class="notep1">Note:</p>
<p>Oracle GoldenGate supports the replication of the actual data values of Oracle materialized views. Oracle GoldenGate supports the replication of Oracle and Teradata DDL for indexes and triggers, but not the content of those objects.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p>You can use one or more <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements in a parameter file, with or without wildcards, to specify all of the objects that you want to process.</p>
<p>You can exclude objects from a wildcarded <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement with the <a href="tableexclude.htm#GUID-1CA39664-9813-44A7-844B-DE44B403006C">TABLEEXCLUDE</a> and <a href="mapexclude.htm#GUID-66C347B9-8114-4010-98B0-18C6DDA2E334">MAPEXCLUDE</a> parameters. Additional exclusion parameters are <a href="catalogexclude.htm#GUID-07AF1938-1352-4C69-BCB2-F0D18455356C">CATALOGEXCLUDE</a>, <a href="schemaexclude.htm#GUID-24397F23-9920-43D1-827A-46FF353F974E">SCHEMAEXCLUDE</a>, and <a href="excludewildcardobjectsonly.htm#GUID-CEDE7EE5-6749-4EAE-AF53-2D55CEB579F8">EXCLUDEWILDCARDOBJECTSONLY</a>.</p>
<p>For more information about using <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>, see <a class="olink GWUAD391" target="_blank" href="../GWUAD/mapping-and-manipulating-data.htm#GWUAD391"><span class="italic"><span id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GWUAD"><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Default</p>
<p>None</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax for TABLE</p>
<p>For tables, you can use all of the <code class="codeph">TABLE</code> options. For non-table objects, use <code class="codeph">TABLE</code> only to specify an object for capture.</p>
<pre dir="ltr">
TABLE <span class="italic">source_table</span>[, TARGET <span class="italic">target_table</span>]
[, ATTRCHARSET (<span class="italic">charset</span>)]
[, CHARSET <span class="italic">character_set</span>]
[, COLCHARSET <span class="italic">character_set</span>]
[, COLMAP (<span class="italic">column_mapping</span>)]
[, {COLS | COLSEXCEPT} (<span class="italic">column_list</span>)]
[, {DEF | TARGETDEF} <span class="italic">template</span>]
[, EVENTACTIONS <span class="italic">action</span>]
[, EXITPARAM '<span class="italic">parameter</span>']
[, {FETCHCOLS | FETCHCOLSEXCEPT} (<span class="italic">column_list</span>)]
[, {FETCHMODCOLS | FETCHMODCOLSEXCEPT} (<span class="italic">column_list</span>)]
[, FETCHBEFOREFILTER]
[, FILTER (<span class="italic">filter_clause</span>)]
[, GETBEFORECOLS (<span class="italic">column_specification</span>)]
[, KEYCOLS (<span class="italic">columns</span>)]
[, SQLEXEC (<span class="italic">SQL_specification</span>)]
[, SQLPREDICATE 'WHERE <span class="italic">where_clause</span>']
[, TOKENS (<span class="italic">token_definition</span>)]
[, TRIMSPACES | NOTRIMSPACES]
[, TRIMVARSPACES | NOTRIMVARSPACES]
[, WHERE (<span class="italic">clause</span>)]
;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax for MAP</p>
<pre dir="ltr">
MAP <span class="italic">source_table</span>, TARGET <span class="italic">target_table</span>
[, COLMAP (<span class="italic">column_mapping</span>)]
[, COMPARECOLS (<span class="italic">column_specification</span>)]
[, COORDINATED]
[, {DEF | TARGETDEF} <span class="italic">template</span>]
[, EXCEPTIONSONLY]
[, EXITPARAM '<span class="italic">parameter</span>']
[, EVENTACTIONS (<span class="italic">action</span>)]
[, FILTER (<span class="italic">filter_clause</span>)]
[, HANDLECOLLISIONS | NOHANDLECOLLISIONS]
[, INSERTALLRECORDS]
[, INSERTAPPEND | NOINSERTAPPEND]
[, KEYCOLS (<span class="italic">columns</span>)]
[, MAPEXCEPTION (<span class="italic">exceptions_mapping</span>)]
[, MAPINVISIBLECOLUMNS | NOMAPINVISIBLECOLUMNS]
[, REPERROR (<span class="italic">error</span>, <span class="italic">response</span>)]
[, RESOLVECONFLICT (<span class="italic">conflict_resolution_specification</span>)]
[, SQLEXEC (<span class="italic">SQL_specification</span>)]
[, THREAD (<span class="italic">thread_ID</span>)]
[, THREADRANGE (<span class="italic">thread_range</span>[, <span class="italic">column_list</span>])]
[, TRIMSPACES | NOTRIMSPACES]
[, TRIMVARSPACES | NOTRIMVARSPACES]
[, WHERE (<span class="italic">clause</span>)]
;
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">TABLE and MAP Options</p>
<p>The following table summarizes the options that are available for the <code class="codeph">TABLE</code> and <code class="codeph">MAP</code> parameters. Note that not all options are valid for both parameters.</p>
</div>
<!-- class="section" -->
<div class="tblformal" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-EDDAD834-31B5-4A27-89D7-D27367CBD4C9">
<p class="titleintable">Table 3-34 Summary of TABLE and MAP Syntax Components</p>
<table class="cellalignment463" title="Summary of TABLE and MAP Syntax Components" summary="This table describes the TABLE and MAP syntax components.">
<thead>
<tr class="cellalignment454">
<th class="cellalignment498" id="d109094e338">Component</th>
<th class="cellalignment549" id="d109094e341">Description</th>
<th class="cellalignment559" id="d109094e344">Valid For</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e349" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGEIJIE">TABLE source_table[, TARGET taget_table]</a>
</pre></td>
<td class="cellalignment551" headers="d109094e349 d109094e341">
<p>Specifies the source object in a <code class="codeph">TABLE</code> statement for Extract and an optional mapping to a target object. Use in the Extract parameter file.</p>
</td>
<td class="cellalignment561" headers="d109094e349 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e364" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGBBCHF">MAP source_table, TARGET target_table</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e364 d109094e341">
<p>Specifies the source-target object mapping for the Replicat process. Use in the Replicat parameter file.</p>
</td>
<td class="cellalignment561" headers="d109094e364 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e377" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABDFCFJ">ATTRCHARSET (charset)</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e377 d109094e341">
<p>specifies the source character set information at UDT attribute level.</p>
</td>
<td class="cellalignment561" headers="d109094e377 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e390" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABFCHAD">CHARSET character_set</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e390 d109094e341">
<p>Specifies any supported character set.</p>
</td>
<td class="cellalignment561" headers="d109094e390 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e403" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABDBEBA">COLCHARSET character_set</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e403 d109094e341">
<p>Specifies any supported character set.</p>
</td>
<td class="cellalignment561" headers="d109094e403 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e416" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2767670">COLMAP (column_mapping)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e416 d109094e341">
<p>Maps records between different source and target columns.</p>
</td>
<td class="cellalignment561" headers="d109094e416 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e431" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGICBHB">{COLS | COLSEXCEPT} (column_list)</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e431 d109094e341">
<p>Selects or excludes columns for processing.</p>
</td>
<td class="cellalignment561" headers="d109094e431 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e444" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790161">COMPARECOLS (column_specification)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e444 d109094e341">
<p>Specifies columns to use for conflict detection and resolution.</p>
</td>
<td class="cellalignment561" headers="d109094e444 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e459" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABGIJJA">COORDINATED</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e459 d109094e341">
<p>Forces a transaction to be processed as a barrier transaction.</p>
</td>
<td class="cellalignment561" headers="d109094e459 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e472" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790163">{DEF| TARGETDEF} template</a>
</pre></td>
<td class="cellalignment551" headers="d109094e472 d109094e341">
<p>Specifies a source-definitions or target-definitions template.</p>
</td>
<td class="cellalignment561" headers="d109094e472 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e487" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790160">EXCEPTIONSONLY</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e487 d109094e341">
<p>Specifies that the <code class="codeph">MAP</code> statement is an exceptions <code class="codeph">MAP</code> statement.</p>
</td>
<td class="cellalignment561" headers="d109094e487 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e507" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016744">EVENTACTIONS (action)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e507 d109094e341">
<p>Triggers an action based on a record that satisfies a specified filter rule.</p>
</td>
<td class="cellalignment561" headers="d109094e507 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e522" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I1053366">EXITPARAM 'parameter'</a>
</pre></td>
<td class="cellalignment551" headers="d109094e522 d109094e341">
<p>Passes a parameter in the form of a literal string to a user exit.</p>
</td>
<td class="cellalignment561" headers="d109094e522 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e537" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGCCHAG">FETCHBEFOREFILTER</a>
</pre></td>
<td class="cellalignment551" headers="d109094e537 d109094e341">
<p>Directs the <code class="codeph">FETCHCOLS</code> or <code class="codeph">FETCHCOLSEXCEPT</code> action to be performed before a filter is executed.</p>
</td>
<td class="cellalignment561" headers="d109094e537 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e555" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGHBBED">{FETCHCOLS | FETCHCOLSEXCEPT} (column_list)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e555 d109094e341">
<p>Enables the fetching of column values from the source database when the values are not in the transaction record.</p>
</td>
<td class="cellalignment561" headers="d109094e555 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e567" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGDFCEH">{FETCHMODCOLS | FETCHMODCOLSEXCEPT} (column_list)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e567 d109094e341">
<p>Forces column values to be fetched from the database when the columns are present in the transaction log.</p>
</td>
<td class="cellalignment561" headers="d109094e567 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e579" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016736">FILTER (filter_clause)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e579 d109094e341">
<p>Selects records based on a numeric value. <code class="codeph">FILTER</code> provides more flexibility than <code class="codeph">WHERE</code>.</p>
</td>
<td class="cellalignment561" headers="d109094e579 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e600" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGJBFDC">GETBEFORECOLS (column_specification)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e600 d109094e341">
<p>Forces before images of columns to be captured and written to the trail.</p>
</td>
<td class="cellalignment561" headers="d109094e600 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e612" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790159">HANDLECOLLISIONS | NOHANDLECOLLISIONS</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e612 d109094e341">
<p>Reconciles the results of changes made to the target table by an initial load process with those applied by a change-synchronization group.</p>
</td>
<td class="cellalignment561" headers="d109094e612 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e625" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790158">INSERTALLRECORDS</a>
</pre></td>
<td class="cellalignment551" headers="d109094e625 d109094e341">
<p>Applies all row changes as inserts.</p>
</td>
<td class="cellalignment561" headers="d109094e625 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e637" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790157">INSERTAPPEND | NOINSERTAPPEND</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e637 d109094e341">
<p>Controls whether or not Replicat uses an Oracle <code class="codeph">APPEND</code> hint for <code class="codeph">INSERT</code> statements.</p>
</td>
<td class="cellalignment561" headers="d109094e637 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e656" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I1146401">KEYCOLS (columns)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e656 d109094e341">
<p>Designates columns that uniquely identify rows.</p>
</td>
<td class="cellalignment561" headers="d109094e656 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e672" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790156">MAPEXCEPTION (exceptions_mapping)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e672 d109094e341">
<p>Specifies that the <code class="codeph">MAP</code> statement contains exceptions handling for wildcarded tables.</p>
</td>
<td class="cellalignment561" headers="d109094e672 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e687" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__MAPINVISIBLECOLUMNSNOMAPINVISIBLECO-1E74CCBF">MAPINVISIBLECOLUMNS | NOMAPINVISIBLECOLUMNS</a>
</pre></td>
<td class="cellalignment551" headers="d109094e687 d109094e341">
<p>Controls whether or not Replicat includes invisible columns in Oracle target tables for default column mapping. For invisible columns in Oracle target tables that use explicit column mapping, they are always mapped so do not require this option.</p>
</td>
<td class="cellalignment561" headers="d109094e687 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e699" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790155">REPERROR (error, response)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e699 d109094e341">
<p>Controls how Replicat responds to errors when executing the <code class="codeph">MAP</code> statement.</p>
</td>
<td class="cellalignment561" headers="d109094e699 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e714" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790154">RESOLVECONFLICT (conflict_resolution_specification)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e714 d109094e341">
<p>Specifies rules for conflict resolution.</p>
</td>
<td class="cellalignment561" headers="d109094e714 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e726" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2312155">SQLEXEC (SQL_specification)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e726 d109094e341">
<p>Executes stored procedures and queries.</p>
</td>
<td class="cellalignment561" headers="d109094e726 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e741" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGGGEIJ">SQLPREDICATE 'WHERE where_clause'</a>
</pre></td>
<td class="cellalignment551" headers="d109094e741 d109094e341">
<p>Enables a <code class="codeph">WHERE</code> clause to select rows for an initial load.</p>
</td>
<td class="cellalignment561" headers="d109094e741 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e756" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABHHEHH">THREAD (thread_ID)</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e756 d109094e341">
<p>Valid for Replicat in coordinated mode. Specifies that the <code class="codeph">MAP</code> statement will be processed by the specified Replicat thread.</p>
</td>
<td class="cellalignment561" headers="d109094e756 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e772" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABIEAFI">THREADRANGE (thread_range, column_list)</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e772 d109094e341">
<p>Valid for Replicat in coordinated mode. Specifies that the <code class="codeph">MAP</code> statement will be processed by the specified range of Replicat threads.</p>
</td>
<td class="cellalignment561" headers="d109094e772 d109094e344">
<p><code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e788" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGHEJII">TOKENS (token_definition)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e788 d109094e341">
<p>Defines user tokens.</p>
</td>
<td class="cellalignment561" headers="d109094e788 d109094e344">
<p><code class="codeph">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e800" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790153">TRIMSPACES | NOTRIMSPACES</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e800 d109094e341">
<p>Controls whether trailing spaces are trimmed or not when mapping <code class="codeph">CHAR</code> to <code class="codeph">VARCHAR</code> columns.</p>
</td>
<td class="cellalignment561" headers="d109094e800 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e822" headers="d109094e338">
<p><code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790152">TRIMVARSPACES | NOTRIMVARSPACES</a></code></p>
</td>
<td class="cellalignment551" headers="d109094e822 d109094e341">
<p>Controls whether trailing spaces are trimmed or not when mapping <code class="codeph">VARCHAR</code> to <code class="codeph">CHAR</code> or <code class="codeph">VARCHAR</code> columns.</p>
</td>
<td class="cellalignment561" headers="d109094e822 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e848" headers="d109094e338">
<pre dir="ltr">
<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016740">WHERE (clause)</a>
</pre></td>
<td class="cellalignment551" headers="d109094e848 d109094e341">
<p>Selects records based on conditional operators.</p>
</td>
<td class="cellalignment561" headers="d109094e848 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment500" id="d109094e863" headers="d109094e338">
<p>;</p>
</td>
<td class="cellalignment551" headers="d109094e863 d109094e341">
<p>(Semicolon) Terminates the <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement and is required.</p>
</td>
<td class="cellalignment561" headers="d109094e863 d109094e344">
<p><code class="codeph">TABLE</code> and <code class="codeph">MAP</code></p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGEIJIE">
<p class="subhead1"><code class="codeph">TABLE</code> <span class="italic"><code class="codeph">source_table</code></span><code class="codeph">[, TARGET</code> <span class="italic"><code class="codeph">taget_table</code></span><code class="codeph">]</code></p>
<p><code class="codeph">TABLE</code> is valid in an Extract parameter file.</p>
<p>Use <code class="codeph">TABLE</code> to specify a source object for which you want Extract to capture data. Specify the fully qualified two-part or three-part name of the object, such as <span class="italic"><code class="codeph">schema.table</code></span> or <span class="italic"><code class="codeph">catalog.schema.table</code></span>. You can use a wildcard to specify multiple objects with one <code class="codeph">TABLE</code> statement. To specify object names and wildcards correctly, see <a class="olink GWUAD192" target="_blank" href="../GWUAD/getting-started-oracle-goldengate-process-interfaces.htm#GWUAD192"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
<p>Use the <code class="codeph">TARGET</code> option only when Extract must refer to a target definitions file (specified with the <code class="codeph">TARGETDEFS</code> parameter) to perform conversions or when the <code class="codeph">COLMAP</code> option is used to map columns. Otherwise, it can be omitted from a <code class="codeph">TABLE</code> parameter. Column mapping with <code class="codeph">COLMAP</code> and conversion work usually are performed on the target system to minimize the impact of replication activities on the source system, but can be performed on the source system if required. For example, column mapping and conversion can be performed on the source system in a configuration where there are multiple sources and one target. In this scenario, it may be easier to manage one target definitions file rather than managing a definitions file for each source database, especially if there are frequent application changes that require new definitions files to be generated.</p>
<p>Using <code class="codeph">TARGET</code> in a <code class="codeph">TABLE</code> parameter identifies the metadata of the extracted data based on the target structure, rather than that of the source, to reflect the structure of the record that is reflected in the definitions file or the column map. Do not use three-part names if <code class="codeph">TARGET</code> specifies tables in a target Oracle container database or SQL/MX database. Replicat can only connect to one container or catalog, so it is assumed that the container or catalog portion of the name is the same as the one that Replicat logs into (as specified with <code class="codeph">USERID</code>, <code class="codeph">USERIDALIAS</code>, or <code class="codeph">TARGETDB</code>, depending on the database).</p>
<p>If no other <code class="codeph">TABLE</code> syntax options are required to process the specified source data, you can use a simple <code class="codeph">TABLE</code> statement, making sure to terminate it with a semicolon.</p>
<pre dir="ltr">
TABLE sales.customers;
</pre>
<p>The following shows the use of a wildcard to specify multiple tables:</p>
<pre dir="ltr">
TABLE sales.*;
</pre>
<p>The preceding <code class="codeph">TABLE</code> statements direct Extract to capture all supported column data for the specified objects and write it to the trail without performing any filtering, conversion, or other manipulation.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGBBCHF">
<p class="subhead1"><code class="codeph">MAP</code> <span class="italic"><code class="codeph">source_table</code></span><code class="codeph">, TARGET</code> <span class="italic"><code class="codeph">target_table</code></span></p>
<p><code class="codeph">MAP</code> is valid in a Replicat parameter file.</p>
<p>Use <code class="codeph">MAP</code> to specify a source object, and use <code class="codeph">TARGET</code> to specify the target object to which Replicat applies the replicated source data. Together, the <code class="codeph">MAP</code> and <code class="codeph">TARGET</code> clause comprise a <span class="italic">mapping</span>.</p>
<ul style="list-style-type: disc;">
<li>
<p>For <code class="codeph">MAP</code> <span class="italic"><code class="codeph">source_table</code></span>, specify the source object. Specify the fully qualified two-part or three-part name of the object, such as <span class="italic"><code class="codeph">schema.table</code></span> or <span class="italic"><code class="codeph">catalog.schema.table</code></span>. You can use a wildcard to specify multiple source objects.</p>
</li>
<li>
<p>For <code class="codeph">TARGET</code> <span class="italic"><code class="codeph">target_table</code></span>, specify a two-part name, even if the target is a container database or SQL/MX database. Replicat can only connect to one container or catalog, so it is assumed that the container or catalog portion of the name is the same as the one that Replicat logs into (as specified with <code class="codeph">USERID</code>, <code class="codeph">USERIDALIAS</code>, or <code class="codeph">TARGETDB</code>, depending on the database). You can use a wildcard to specify multiple target objects.</p>
</li>
</ul>
<p>The following shows the use of a wildcard to specify multiple tables. Note that the <code class="codeph">TARGET</code> clause does not include the <code class="codeph">tab</code> prefix before the wildcard. That specification would be invalid, because the wildcard would be resolved as <code class="codeph">sales.tabtab1</code>, <code class="codeph">sales.tabtab2</code>, and so forth.</p>
<pre dir="ltr">
MAP sales.tab*, TARGET sales.*;
</pre>
<p>To specify object names and wildcards correctly in the <code class="codeph">MAP</code> and <code class="codeph">TARGET</code> clauses, see <a class="olink GWUAD192" target="_blank" href="../GWUAD/getting-started-oracle-goldengate-process-interfaces.htm#GWUAD192"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
<p>If no filtering, mapping, or other work is required for the objects, you can use simple <code class="codeph">MAP</code> statements like the following, making sure to terminate each one with a semicolon.</p>
<pre dir="ltr">
MAP sales.customers, TARGET sales.customers;
MAP fin.*, TARGET fin.*;
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABDFCFJ">
<p class="subhead1"><code class="codeph">ATTRCHARSET</code> <span class="italic"><code class="codeph">(charset)</code></span></p>
<p><code class="codeph">ATTRCHARSET</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use the <code class="codeph">ATTRCHARSET</code> clause to specify the source character set information at UDT attribute level. It overrides the character set defined in the trail file or specified by <code class="codeph">SOURCECHARSET</code>, <code class="codeph">CHARSET</code>, or <code class="codeph">COLCHARSET</code> parameters.</p>
<p>Valid values are character set names and valid UDT attribute names. Wildcard attribute names are supported. For example:</p>
<pre dir="ltr">
TABLE SCHEMA.T*,
  ATTRCHARSET(WE8DEC, col*.attr1, col1.attr*.attr3);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABFCHAD">
<p class="subhead1"><code class="codeph">CHARSET</code> <span class="italic"><code class="codeph">character_set</code></span></p>
<p><code class="codeph">CHARSET</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use the <code class="codeph">CHARSET</code> clause to specify any supported character set. See <a href="charset.htm#GUID-2FD112E3-6A98-47B6-9262-7576A404FF71">CHARSET</a> for more information.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABDBEBA">
<p class="subhead1"><code class="codeph">COLCHARSET</code> <span class="italic"><code class="codeph">character_set</code></span></p>
<p><code class="codeph">COLCHARSET</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use the <code class="codeph">COLCHARSET</code> clause to specify any supported character set. See <a href="colcharset.htm#GUID-2C44A634-D0D7-4945-BC8E-CF965C29222C">COLCHARSET</a> for more information.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2767670">
<p class="subhead1"><code class="codeph">COLMAP</code> <span class="italic"><code class="codeph">(column_mapping)</code></span></p>
<p><code class="codeph">COLMAP</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">COLMAP</code> to:</p>
<ul style="list-style-type: disc;">
<li>
<p>Map individual source columns to target columns when the source and target columns have different names.</p>
</li>
<li>
<p>Specify default column mapping when the source and target names are identical.</p>
</li>
</ul>
<p><code class="codeph">COLMAP</code> provides instructions for selecting, translating, and moving column data from a source column to a target column.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-39174431-1907-420C-850E-B83FACA08D25">
<p class="notep1">Note:</p>
<p>To create <span class="italic">global</span> rules for column mapping across all tables in subsequent <code class="codeph">MAP</code> statements, use the <code class="codeph">COLMATCH</code> parameter.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Configuring Column Mapping</p>
<p>See <a class="olink GWUAD405" target="_blank" href="../GWUAD/mapping-and-manipulating-data.htm#GWUAD405"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information about using <code class="codeph">COLMAP</code>. To use <code class="codeph">COLMAP</code>, related configuration considerations must be taken into account, such as whether source and target column structures are identical or different and whether global column mapping parameters may be sufficient.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
COLMAP (
[USEDEFAULTS, ]
<span class="italic">target_column</span> = <span class="italic">source_expression</span> [BINARYINPUT]
[, ...]
)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-6EA3A5A1-ECC7-463F-A4AE-6306F391282E"><!-- --></a><code class="codeph">USEDEFAULTS</code></dt>
<dd>
<p>Automatically maps source and target columns that have the same name if they were not specified in an explicit column mapping. The data types are translated automatically, as needed, based on the local data-definitions file. <code class="codeph">USEDEFAULTS</code> eliminates the need for an explicit column mapping if those columns have the same name and the data does not require any filtering or conversion.</p>
<p>Specify <code class="codeph">USEDEFAULTS</code> before explicit column mappings in the <code class="codeph">COLMAP</code> clause. For additional information about default column mapping in <code class="codeph">COLMAP</code>, see <a class="olink GWUAD900" target="_blank" href="../GWUAD/mapping-and-manipulating-data.htm#GWUAD900"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-5B474A2D-4F22-4FDD-9C4F-9546FDD310FE"><!-- --></a><span class="italic"><code class="codeph">target_column = source_expression</code></span></dt>
<dd>
<p>Defines an explicit source-target column mapping.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-94C636A2-3A52-4038-A208-6C946C7B9189"><!-- --></a><span class="italic"><code class="codeph">target_column</code></span></dt>
<dd>
<p>Specifies the name of the target column. For supported characters in column names, see <a class="olink GWUAD192" target="_blank" href="../GWUAD/getting-started-oracle-goldengate-process-interfaces.htm#GWUAD192"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C8DA7D0D-C84E-4548-8CD1-039A6E6A9D92"><!-- --></a><span class="italic"><code class="codeph">source_expression</code></span></dt>
<dd>
<p>Can be any of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>The name of a source column, such as <code class="codeph">ORD_DATE</code></p>
</li>
<li>
<p>A numeric constant, such as <code class="codeph">123</code></p>
</li>
<li>
<p>A string constant within single quotes, such as <code class="codeph">'ABCD'</code></p>
</li>
<li>
<p>An expression using an Oracle GoldenGate column-conversion function, such as <code class="codeph">@STREXT (COL1, 1, 3)</code>. See <span class="q">"<a href="column-conversion-functions.htm">Column Conversion Functions</a>"</span> for more information.</p>
</li>
</ul>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-D9052F34-86DB-40BC-9AC1-2A4B8C8E7330"><!-- --></a><code class="codeph">BINARYINPUT</code></dt>
<dd>
<p>Use <code class="codeph">BINARYINPUT</code> when the target column is defined as a binary data type, such as <code class="codeph">RAW</code> or <code class="codeph">BLOB</code>, but the source input contains binary zeros in the middle of the data. Use <code class="codeph">BINARYINPUT</code> when replicating a full Enscribe record defined as a single column into a target column. The source input is handled as binary input, and replacement of data values is suppressed.</p>
</dd>
</dl>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-03487B07-0101-4E01-AC9F-6BB794ACEE4B"><!-- --></a>Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<pre dir="ltr">
MAP ggs.tran, TARGET ggs.tran2, COLMAP (loc2 = loc, type2 = type);
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-D7C9E071-8CC1-4774-8486-831954CD508C"><!-- --></a>Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<pre dir="ltr">
TABLE ggs.tran, COLMAP (SECTION = @STRCAT('\u00a7', SECTION ));
</pre></dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGICBHB">
<p class="subhead1"><code class="codeph">{COLS | COLSEXCEPT} (</code><span class="italic"><code class="codeph">column_list</code></span><code class="codeph">)</code></p>
<p><code class="codeph">COLS</code> and <code class="codeph">COLSEXCEPT</code> are valid for <code class="codeph">TABLE</code>.</p>
<p>Use <code class="codeph">COLS</code> and <code class="codeph">COLSEXCEPT</code> to control the columns for which data is captured.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">COLS</code> specifies columns that contain the data that you want to capture. When <code class="codeph">COLS</code> is used, all columns that are not in the <code class="codeph">COLS</code> list are ignored by Oracle GoldenGate.</p>
</li>
<li>
<p><code class="codeph">COLSEXCEPT</code> specifies columns to exclude from being captured. When <code class="codeph">COLSEXCEPT</code> is used, all columns that are not in the <code class="codeph">COLSEXCEPT</code> list are captured by Oracle GoldenGate. For tables with numerous columns, <code class="codeph">COLSEXCEPT</code> may be more efficient than listing each column with <code class="codeph">COLS</code>.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B6946659-65A4-4C8F-BD0F-74097481C2BC">
<p class="notep1">Caution:</p>
<p>Do <span class="italic">not</span> exclude key columns, and do <span class="italic">not</span> use <code class="codeph">COLSEXCEPT</code> to exclude columns that contain data types that are not supported by Oracle GoldenGate. <code class="codeph">COLSEXCEPT</code> does not exclude unsupported data types.</p>
</div>
</li>
</ul>
<p>To use <code class="codeph">COLS</code>, the following is required:</p>
<ul style="list-style-type: disc;">
<li>
<p>The table must have one or more key columns, or a substitute key must be defined with the <code class="codeph">KEYCOLS</code> option. See <span class="q">"<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I1146401">KEYCOLS (columns)</a>"</span>.</p>
</li>
<li>
<p>The key columns or the columns specified with <code class="codeph">KEYCOLS</code> must be included in the column list that is specified with <code class="codeph">COLS</code>. Otherwise, they will not be captured, and an error will be generated during processing.</p>
</li>
</ul>
<p>Without a primary key, a unique key, or a <code class="codeph">KEYCOLS</code> clause in the <code class="codeph">TABLE</code> statement, Oracle GoldenGate uses all of the columns in the table, rendering <code class="codeph">COLS</code> unnecessary.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-643EB071-A294-4C5D-8E17-FD2D3049DF5B">
<p class="notep1">Note:</p>
<p>Do not use this option for tables that are processed in pass-through mode by a data-pump Extract group.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
{COLS | COLSEXCEPT} (<span class="italic">column</span> [, ...])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-534A2904-E8B9-42A8-A012-887A713EBF93"><!-- --></a><span class="italic"><code class="codeph">column</code></span></dt>
<dd>
<p>The name of a column. To specify multiple columns, create a comma-delimited list, for example:</p>
<pre dir="ltr">
COLS (name, city, state, phone)
</pre></dd>
</dl>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-465314B3-FAD0-41B2-8696-E7A2179CC138">
<p class="notep1">Note:</p>
<p>If the database only logs values for columns that were changed in an update operation, a column specified for capture with <code class="codeph">COLS</code> might not be available. To make those columns available, use the <code class="codeph">FETCHCOLS</code> option in the <code class="codeph">TABLE</code> statement or enable supplemental logging for the column.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The <code class="codeph">COLS</code> clause in this example captures <span class="italic">only</span> columns 1 and 3, whereas the <code class="codeph">COLSEXCEPT</code> clause captures all columns <span class="italic">except</span> columns 1 and 3.</p>
<pre dir="ltr">
TABLE hq.acct, COLS (col1, col3);
TABLE hq.sales, COLSEXCEPT (col1, col3);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790161">
<p class="subhead1"><code class="codeph">COMPARECOLS (</code><span class="italic"><code class="codeph">column_specification</code></span><code class="codeph">)</code></p>
<p><code class="codeph">COMPARECOLS</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">COMPARECOLS</code> to specify the columns that Replicat uses to detect and resolve update or delete conflicts when configured with the <code class="codeph">RESOLVECONFLICT</code> option of <code class="codeph">MAP</code> in a multi-master configuration. A conflict is a mismatch between the before image of a record in the trail and the current data in the target table.</p>
<p>To use <code class="codeph">COMPARECOLS</code>, the before image must be available in the trail record by means of the <code class="codeph">GETBEFORECOLS</code> parameter in the Extract <code class="codeph">TABLE</code> statement. The specified columns must exist in the target database and also be part of the Replicat configuration (satisfy the <code class="codeph">TARGET</code> specification with or without a <code class="codeph">COLMAP</code> clause).</p>
<p>Only scalar data types are supported by <code class="codeph">COMPARECOLS</code> as comparison columns. A scalar data type can be used in a <code class="codeph">WHERE</code> clause, has a single, atomic value and no internal components. Scalar data types supported by Oracle GoldenGate include the following, but not LOBs.</p>
<ul style="list-style-type: disc;">
<li>
<p>Numeric data types</p>
</li>
<li>
<p>Date data types</p>
</li>
<li>
<p>Character data types</p>
</li>
</ul>
<p>Some examples of non-scalar data types are spatial data, user-defined data types, large objects (LOB), XML, reference data types, and RAW. A row being considered for CDR can include non-scalar data so long as the conflict is not in the non-scalar data itself.</p>
<p>To specify conflict resolution routines, use the <code class="codeph">RESOLVECONFLICT</code> option of <code class="codeph">MAP</code>. <code class="codeph">COMPARECOLS</code> and <code class="codeph">RESOLVECONFLICT</code> can be in any order in the <code class="codeph">MAP</code> statement.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Configuring the CDR Feature</p>
<p>See <a class="olink GWUAD314" target="_blank" href="../GWUAD/configuring-oracle-goldengate-active-active-high-availability.htm#GWUAD314"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information about configuring conflict detection and resolution.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
COMPARECOLS(
{ON UPDATE | ON DELETE}
{ALL | KEY | KEYINCLUDING (<span class="italic">col</span>[,...]) | ALLEXCLUDING (<span class="italic">col</span>[,...]) }
[,...]
)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-EC525726-ABAF-4857-962F-2D91DA7592C4"><!-- --></a><code class="codeph">{ON UPDATE | ON DELETE}</code></dt>
<dd>
<p>Specifies whether the before image of the specified columns should be compared for updates or deletes. You can use <code class="codeph">ON UPDATE</code> only, <code class="codeph">ON DELETE</code> only, or both. If using both, specify them within the same <code class="codeph">COMPARECOLS</code> clause. See the example for how to use both.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C84A3D0F-281B-4751-AAFE-B6CA53732D25"><!-- --></a><code class="codeph">{ALL | KEY | KEYINCLUDING (</code><span class="italic"><code class="codeph">col</code></span><code class="codeph">[,...]) | ALLEXCLUDING (</code><span class="italic"><code class="codeph">col</code></span><code class="codeph">[,...])}</code></dt>
<dd>
<p>Specifies the columns for which a before image is captured.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-A5A196D8-3C91-4B6B-85F9-81CBBE56B106"><!-- --></a><code class="codeph">ALL</code></dt>
<dd>
<p>Compares using all columns in the target table. An error is generated if any corresponding before images are not available in the trail. Using <code class="codeph">ALL</code> imposes the highest processing load for Replicat, but allows conflict-detection comparisons to be performed using all columns for maximum accuracy.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-1C5487AB-F400-4187-B0BF-DD0FAF70B827"><!-- --></a><code class="codeph">KEY</code></dt>
<dd>
<p>Compares only the primary key columns. This is the fastest option, but does not permit the most accurate conflict detection, because keys can match but non-key columns could be different.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-A46796AE-0D16-40DB-88FF-B79D966EE078"><!-- --></a><code class="codeph">KEYINCLUDING</code></dt>
<dd>
<p>Compares the primary key columns and the specified column or columns. This is a reasonable compromise between speed and detection accuracy.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-621EFBA3-7277-4A63-929A-6B6D467336D9"><!-- --></a><code class="codeph">ALLEXCLUDING</code></dt>
<dd>
<p>Compares all columns except the specified columns. For tables with numerous columns, <code class="codeph">ALLEXCLUDING</code> may be more efficient than <code class="codeph">KEYINCLUDING</code>. Do <span class="italic">not</span> exclude key columns.</p>
</dd>
</dl>
</dd>
</dl>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7760F12B-A7EE-4253-A5EB-3C488C246FB0"><!-- --></a>Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In the following example, the key columns plus the <code class="codeph">name</code>, <code class="codeph">address</code>, and <code class="codeph">salary</code> columns are compared for conflicts.</p>
<pre dir="ltr">
MAP src, TARGET tgt
COMPARECOLS (
ON UPDATE KEYINCLUDING (name, address, salary),
ON DELETE KEYINCLUDING (name, address, salary));
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-E7EA9D82-283A-457F-AE5C-251C184F6E18"><!-- --></a>Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In the following example, the <code class="codeph">comment</code> column is ignored and all other columns are compared for conflicts.</p>
<pre dir="ltr">
MAP src, TARGET tgt
COMPARECOLS (ON UPDATE ALLEXCLUDING (comment))
</pre></dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABGIJJA">
<p class="subhead1"><code class="codeph">COORDINATED</code></p>
<p><code class="codeph">COORDINATED</code> is valid for <code class="codeph">MAP</code>. This option is valid when Replicat is in coordinated mode.</p>
<p>Use the <code class="codeph">COORDINATED</code> option to force transactions made on objects in the same <code class="codeph">MAP</code> statement to be processed as barrier transactions. It causes all of the threads across all <code class="codeph">MAP</code> statements to synchronize to the same trail location. The synchronized position is the beginning of the transaction that contains a record that satisfies a <code class="codeph">MAP</code> that contains the <code class="codeph">COORDINATED</code> keyword. The transaction is then applied atomically by a single thread, which is either the thread with the lowest thread ID among the currently running threads or a dedicated thread with the ID of 0 if <code class="codeph">USEDEDICATEDCOORDINATIONTHREAD</code> is specified in the parameter file.</p>
<p><code class="codeph">THREAD</code> and <code class="codeph">THREADRANGE</code> clauses specified in conjunction with <code class="codeph">COORDINATED</code> are ignored because the record will not be applied by the designated thread(s). The <code class="codeph">COORDINATED</code> keyword results in temporarily suspending parallelism so that the target tables are in a consistent state before the force-coordinated transaction is applied. After this point, parallel execution commences again.</p>
<p>Replicat by default coordinates transactions in which the primary key is updated, transactions that perform DDL, and certain <code class="codeph">EVENTACTIONS</code> actions. <code class="codeph">COORDINATED</code> provides for explicit coordination.</p>
<p>See <a class="olink GWUAD" target="_blank" href="../GWUAD/toc.htm"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information about coordinated Replicat.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
COORDINATED
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The following is an example of the use of the <code class="codeph">COORDINATED</code> option. In this example, business rules require that the target tables be in a consistent state before Replicat executes transactions that include <code class="codeph">SQLEXEC</code> operations on the objects specified in the <code class="codeph">MAP</code> statement. Parallelism must be temporarily converted to serial SQL processing in this case.</p>
<p>Given the following <code class="codeph">MAP</code> statement, if another thread inserts into <code class="codeph">t2</code> a record with a value of 100 for <code class="codeph">col_val</code> before the insert to <code class="codeph">t1</code> is performed by thread 1, then the <code class="codeph">SQLEXEC</code> will delete the row. If other threads are still processing the record that has the value of 100, the <code class="codeph">SQLEXEC</code> fails. The results of this <code class="codeph">MAP</code> statement are, therefore, not predictable.</p>
<pre dir="ltr">
MAP u1.t1, TARGET u2.t1 SQLEXEC (ID test2, QUERY ' delete from u2.t2 where col_val =100 ', NOPARAMS)), THREAD(1);
</pre>
<p>Conversely, when <code class="codeph">COORDINATED</code> is used, all of the threads synchronize at a common point, including the one processing the <code class="codeph">col_val=100</code> record, thereby removing the ambiguity of the results.</p>
<pre dir="ltr">
MAP u1.t1, TARGET u2.t1 SQLEXEC (ID test2, QUERY ' delete from u2.t2 where col_val =100 ', NOPARAMS)), THREAD(1), COORDINATED;
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790163">
<p class="subhead1"><code class="codeph">{DEF| TARGETDEF}</code> <span class="italic"><code class="codeph">template</code></span></p>
<p><code class="codeph">DEF</code> and <code class="codeph">TARGETDEF</code> are valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">DEF</code> and <code class="codeph">TARGETDEF</code> to specify the name of a definitions template that was created by the DEFGEN utility.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">DEF</code> specifies a source-definitions template.</p>
</li>
<li>
<p><code class="codeph">TARGETDEF</code> specifies a target-definitions template.</p>
</li>
</ul>
<p>A template is based on the definitions of a specific table. It enables new tables that have the same definitions as the original table to be added to the Oracle GoldenGate configuration without running DEFGEN for them, and without having to stop and start the Oracle GoldenGate process. The definitions in the template are used for definitions lookups.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Creating Definitions Templates</p>
<p>For more information about templates and DEFGEN, see <a class="olink GWUAD473" target="_blank" href="../GWUAD/associating-replicated-data-metadata.htm#GWUAD473"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
{DEF | TARGETDEF} <span class="italic">template</span>
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B35C102F-4DD3-4EF6-B5E7-C7C34CA9D86A"><!-- --></a><span class="italic"><code class="codeph">template</code></span></dt>
<dd>
<p>The name of one of the following definitions templates generated by the DEFGEN utility:</p>
<ul style="list-style-type: disc;">
<li>
<p>Use <code class="codeph">DEF</code> to specify a source-definitions template generated by the <code class="codeph">DEF</code> option of the <code class="codeph">TABLE</code> parameter in the DEFGEN parameter file.</p>
</li>
<li>
<p>Use <code class="codeph">TARGETDEF</code> to specify a target-definitions template generated by the <code class="codeph">TARGETDEF</code> option of the <code class="codeph">TABLE</code> parameter in the DEFGEN parameter file.</p>
</li>
</ul>
<p>The definitions contained in the template must be identical to the definitions of the table or tables that are specified in the same <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement.</p>
<p>Case-sensitivity of the template name is observed when the name is specified the same way that it is stored in the database. Make certain that the template name is specified the same way in both the <code class="codeph">DEF</code> or <code class="codeph">TARGETDEF</code> clause in this <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement, and in the DEFGEN parameter file that created the template.</p>
</dd>
</dl>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B515A5C9-6FDA-463B-A17E-94F8B10CDF0F"><!-- --></a>Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example shows a case-insensitive template name.</p>
<pre dir="ltr">
MAP acct.cust*, TARGET acct.cust*, DEF custdef;
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-1F3347D9-4B88-4F96-9D83-AA04B2DA9293"><!-- --></a>Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example shows a case-sensitive template name when the database requires quotes to enforce case-sensitivity.</p>
<pre dir="ltr">
TABLE acct.cust*, DEF "CustDef";
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-EC3DB253-5100-4E2E-B448-C6FC38579604"><!-- --></a>Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example shows a case where both <code class="codeph">DEF</code> and <code class="codeph">TARGETDEF</code> are used.</p>
<pre dir="ltr">
MAP acct.cust*, TARGET acc.cust*, DEF custdef, TARGETDEF tcustdef;
</pre></dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790160">
<p class="subhead1"><code class="codeph">EXCEPTIONSONLY</code></p>
<p><code class="codeph">EXCEPTIONSONLY</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">EXCEPTIONSONLY</code> in an exceptions <code class="codeph">MAP</code> statement intended for error handling. The exceptions <code class="codeph">MAP</code> statement must follow the <code class="codeph">MAP</code> statement for which errors are anticipated. The exceptions <code class="codeph">MAP</code> statement executes only if an error occurs for the last record processed in the preceding regular <code class="codeph">MAP</code> statement.</p>
<p>To use <code class="codeph">EXCEPTIONSONLY</code>, use a <code class="codeph">REPERROR</code> statement with the <code class="codeph">EXCEPTION</code> option either within the regular <code class="codeph">MAP</code> statement or at the root of the parameter file. See <span class="q">"<a href="reperror.htm#GUID-CB7CD1F1-EC5E-482A-9FDB-3BAA2ECF86B6">REPERROR</a>"</span> for more information.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-32CD0420-03C3-46B5-A158-AF6693C00EE1">
<p class="notep1">Note:</p>
<p>If using the Oracle GoldenGate Conflict Detection and Resolution (CDR) feature, a <code class="codeph">REPERROR</code> with <code class="codeph">EXCEPTION</code> is not needed. CDR automatically sends all operations that cause errors to the exceptions <code class="codeph">MAP</code> statement.</p>
</div>
<p>The exceptions <code class="codeph">MAP</code> statement must specify the same source table as in the regular <code class="codeph">MAP</code> statement, but the target table in the exceptions <code class="codeph">MAP</code> statement must be an exceptions table.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-FC19EE50-B6C6-4C94-9297-3674DEBD8E3D">
<p class="notep1">Note:</p>
<p>See <span class="q">"<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790156">MAPEXCEPTION (exceptions_mapping)</a>"</span> to support wildcarded object names.</p>
</div>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Configuring Exceptions Handling</p>
<p>For more information about configuring exceptions handling with an exceptions <code class="codeph">MAP</code> statement, see <a class="olink GWUAD497" target="_blank" href="../GWUAD/handling-processing-errors.htm#GWUAD497"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
EXCEPTIONSONLY
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016744">
<p class="subhead1"><code class="codeph">EVENTACTIONS (</code><span class="italic"><code class="codeph">action</code></span><code class="codeph">)</code></p>
<p><code class="codeph">EVENTACTIONS</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>. Some options apply only to one or the other parameter and are noted as such in the descriptions.</p>
<p>Use <code class="codeph">EVENTACTIONS</code> to cause the process to take a defined action based on a record in the trail, known as the <span class="italic">event record</span>, that qualifies for a specific filter rule. You can use this system, known as the <span class="italic">event marker system</span> (or <span class="italic">event marker infrastructure</span>) to customize processing based on database events. For example, you can suspend a process to perform a transformation or report statistics. The event marker feature is supported for the replication of data changes, but not for initial loads.</p>
<p>To trigger actions that do not require data to be applied to target tables, you can use the Replicat <code class="codeph">TABLE</code> parameter with filtering options that support <code class="codeph">EVENTACTIONS</code>. See <span class="q">"<a href="table-replicat.htm#GUID-EFDC0DD2-0619-48D4-AF8A-FEB10D0AB57D">TABLE for Replicat</a>"</span> for more information.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-E8132BA7-45CB-49E6-9558-03849C6997FE">
<p class="notep1">Caution:</p>
<p><code class="codeph">EVENTACTIONS</code> is not supported if the source database is Teradata and Extract is configured in maximum performance mode.</p>
</div>
<p>You may need to combine two or more actions to achieve your goals. When multiple actions are combined, the entire <code class="codeph">EVENTACTIONS</code> statement is parsed first, and then the specified options execute in order of precedence. The following list shows the order of precedence. The actions listed before <code class="codeph">Process the record</code> occur before the record is written to the trail or applied to the target (depending on the process). Actions listed after <code class="codeph">Process the record</code> are executed after the record is processed.</p>
<ul class="simple" style="list-style-type: none;padding-left:0;">
<li><code class="codeph">TRACE</code></li>
<li><code class="codeph">LOG</code></li>
<li><code class="codeph">CHECKPOINT BEFORE</code></li>
<li><code class="codeph">DISCARD</code></li>
<li><code class="codeph">SHELL</code></li>
<li><code class="codeph">ROLLOVER</code></li>
<li>(Process the record)</li>
<li><code class="codeph">IGNORE</code></li>
<li><code class="codeph">REPORT</code></li>
<li><code class="codeph">SUSPEND</code></li>
<li><code class="codeph">ABORT</code></li>
<li><code class="codeph">CHECKPOINT AFTER</code></li>
<li><code class="codeph">FORCESTOP</code></li>
<li><code class="codeph">STOP</code></li>
</ul>
<p>To prevent the event record itself from being processed in the normal manner, use the <code class="codeph">IGNORE</code> or <code class="codeph">DISCARD</code> option. Because <code class="codeph">IGNORE</code> and <code class="codeph">DISCARD</code> are evaluated before the record itself, they prevent the record from being processed. Without those options, <code class="codeph">EVENTACTIONS</code> for Extract writes the record to the trail, and <code class="codeph">EVENTACTIONS</code> for Replicat applies that operation to the target database.</p>
<p>You should take into account the possibility that a transaction could contain two or more records that trigger an event action. In such a case, there could be multiple executions of certain <code class="codeph">EVENTACTIONS</code> specifications. For example, encountering two qualifying records that trigger two successive <code class="codeph">ROLLOVER</code> actions will cause Extract to roll over the trail twice, leaving one of the two files empty of transaction data.</p>
<p>You should also take into account that when the <code class="codeph">GETUPDATEBEFORES</code> parameter is in effect, two records are generated for <code class="codeph">UPDATE</code> operations: a record that contains the before image and a record that contains the after image. An event action is triggered for each of those records when the operation qualifies as an event record. You can use the <code class="codeph">BEFOREAFTERINDICATOR</code> token of the <code class="codeph">GGHEADER</code> column-conversion function as a filter in a <code class="codeph">FILTER</code> clause to qualify the records so that the event action triggers only once, either on the before record or the after record, but not both.</p>
<p>The following example filters on the <code class="codeph">BEFORE</code> indicator. The <code class="codeph">EVENTACTION</code> issues the <code class="codeph">ECHO</code> shell command to output the string 'Triggered on <code class="codeph">BEFORE</code>' to the event log when a <code class="codeph">BEFORE</code> record is encountered.</p>
<pre dir="ltr">
TABLE qasource.test, &amp; 
FILTER(@STRFIND('BEFORE', @GETENV('GGHEADER' , 'BEFOREAFTERINDICATOR')) &gt; 0), &amp;
EVENTACTIONS ( shell ('echo --== Triggered on BEFORE ==-- '), LOG);
 
</pre>
<p>The following shows the result of the event action:</p>
<pre dir="ltr">
013-03-06 17:59:31  INFO    OGG-05301  Shell command output: '--== Triggered 
on AFTER ==--'
 
</pre>
<p>The following example does the same thing, but for the <code class="codeph">AFTER</code> indicator.</p>
<pre dir="ltr">
TABLE qasource.test, &amp; 
FILTER(@STRFIND('AFTER', @GETENV('GGHEADER' , 'BEFOREAFTERINDICATOR')) &gt; 0), &amp; 
EVENTACTIONS ( shell ('echo --== Triggered on AFTER ==-- '), LOG);
</pre>
<p>In a Teradata configuration where Extract is configured in maximum protection mode, use <code class="codeph">EVENTACTIONS</code> only in the VAM-sort Extract group. It is not supported by the primary Extract in this configuration because concurrent changes are not sorted in transaction order at this point in the processing stream. For more information, see <span class="italic"><span id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GITER"><cite>Installing and Configuring Oracle GoldenGate for Teradata</cite></span></span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Configuring the Event Marker System</p>
<p>See <a class="olink GWUAD622" target="_blank" href="../GWUAD/customizing-oracle-goldengate-processing.htm#GWUAD622"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information about using <code class="codeph">EVENTACTIONS</code> and the Event Marker System.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
EVENTACTIONS (
[STOP | SUSPEND | ABORT | FORCESTOP]
[IGNORE [RECORD | TRANSACTION [INCLUDEVENT]]
[DISCARD]
[LOG [INFO | WARNING]]
[REPORT]
[ROLLOVER]
[SHELL '<span class="italic">command</span>' |
  SHELL ('<span class="italic">command</span>', VAR <span class="italic">variable</span> = {<span class="italic">column_name</span> | <span class="italic">expression</span>}
  [, ...]) ]
[TRACE[2] <span class="italic">file</span> [TRANSACTION] [DDL[INCLUDE] | DDLONLY] [PURGE | APPEND]]
[CHECKPOINT [BEFORE | AFTER | BOTH]]
[, ...]
)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-05695DEB-51FE-45E3-9BF6-E1D22FBAB676"><!-- --></a><code class="codeph">STOP</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Brings the process to a graceful stop when the specified event record is encountered. The process waits for other operations within event transaction to be completed before stopping. If the transaction is a Replicat grouped or batched transaction, the current group of transactions are applied before the process stops gracefully. The process restarts at the next record after the event record, so long as that record also signified the end of a transaction.</p>
<p>The process logs a message if it cannot stop immediately because a transaction is still open. However, if the event record is encountered within a long-running open transaction, there is no warning message that alerts you to the uncommitted state of the transaction. Therefore, the process may remain running for a long time despite the <code class="codeph">STOP</code> event.</p>
<p><code class="codeph">STOP</code> can be combined with other <code class="codeph">EVENTACTIONS</code> options except for <code class="codeph">ABORT</code> and <code class="codeph">FORCESTOP</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-D733BD5C-D09E-4E59-8424-129E514EB41F"><!-- --></a><code class="codeph">SUSPEND</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Pauses the process so that it retains the active context of the current run and can still respond to <code class="codeph">SEND</code> commands that are issued in GGSCI. When a process is suspended, the <code class="codeph">INFO</code> command shows it as <code class="codeph">RUNNING</code>, and the <code class="codeph">RBA</code> field shows the last checkpoint position.</p>
<p>To resume processing, issue the <code class="codeph">SEND</code> command with the <code class="codeph">RESUME</code> option.</p>
<p>To use the <code class="codeph">CHECKPOINT BEFORE</code> option in conjunction with <code class="codeph">SUSPEND</code>, the event record must be the start of a transaction for the <code class="codeph">SUSPEND</code> to take place. That way, if the process is killed while in the suspended state, the event record with the <code class="codeph">SUSPEND</code> action is the first record to be reprocessed upon restart. If both <code class="codeph">CHECKPOINT BERORE</code> and <code class="codeph">SUSPEND</code> are specified, but the event record is not the start of a transaction, the process abends before <code class="codeph">SUSPEND</code> can take place.</p>
<p>To use the <code class="codeph">CHECKPOINT AFTER</code> option in conjunction with <code class="codeph">SUSPEND</code>, the <code class="codeph">RESUME</code> command must be issued before the checkpoint can take place, and the event record must be a <code class="codeph">COMMIT</code> record. If the process is killed while in a <code class="codeph">SUSPEND</code> state, the process reprocesses the transaction from the last checkpointed position upon restart.</p>
<p><code class="codeph">SUSPEND</code> cannot be combined with <code class="codeph">ABORT</code> but can be combined with all other options.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7898508E-42EF-4B30-86B2-604155723A54"><!-- --></a><code class="codeph">ABORT</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Forces the process to exit immediately when the specified event record is encountered, whether or not there are open transactions. The event record is not processed. A fatal error is written to the log, and the event record is written to the discard file if <code class="codeph">DISCARD</code> is also specified. The process will undergo recovery on startup.</p>
<p><code class="codeph">ABORT</code> can be combined only with <code class="codeph">CHECKPOINT BEFORE</code>, <code class="codeph">DISCARD</code>, <code class="codeph">SHELL</code>, and <code class="codeph">REPORT</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-CE54E546-319F-4BDE-A6D9-154198B7904D"><!-- --></a><code class="codeph">FORCESTOP</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Forces the process to stop gracefully when the specified event record is encountered, but only if the event record is the last operation in the transaction or the only record in the transaction. The record is written normally.</p>
<p>If the event record is encountered within a long-running open transaction, the process writes a warning message to the log and exits immediately, as in <code class="codeph">ABORT</code>. In this case, recovery may be required on startup. If the <code class="codeph">FORCESTOP</code> action is triggered in the middle of a long-running transaction, the process exits without a warning message.</p>
<p><code class="codeph">FORCESTOP</code> can be combined with other <code class="codeph">EVENTACTIONS</code> options except for <code class="codeph">ABORT</code>, <code class="codeph">STOP</code>, <code class="codeph">CHECKPOINT AFTER</code>, and <code class="codeph">CHECKPOINT BOTH</code>. If used with <code class="codeph">ROLLOVER</code>, the rollover only occurs if the process stops gracefully.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-CF0129E8-3CC4-4BAE-8F04-4D02F6EDB36C"><!-- --></a><code class="codeph">IGNORE [RECORD | TRANSACTION [INCLUDEVENT]]</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Ignores some or all of the transaction, depending on the selected action.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">RECORD</code> is the default. It forces the process to ignore only the specified event record, but not the rest of the transaction. No warning or message is written to the log, but the Oracle GoldenGate statistics are updated to show that the record was ignored.</p>
</li>
<li>
<p>Use <code class="codeph">TRANSACTION</code> to ignore the entire transaction that contains the record that triggered the event. If <code class="codeph">TRANSACTION</code> is used, the event record must be the first one in the transaction. When ignoring a transaction, the event record is also ignored by default. <code class="codeph">TRANSACTION</code> can be shortened to <code class="codeph">TRANS</code>.</p>
</li>
<li>
<p>Use <code class="codeph">INCLUDEEVENT</code> with <code class="codeph">TRANSACTION</code> to propagate the event record to the trail or to the target, but ignore the rest of the associated transaction.</p>
</li>
</ul>
<p><code class="codeph">IGNORE</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">ABORT</code> and <code class="codeph">DISCARD</code>.</p>
<p>An <code class="codeph">IGNORE</code> action is processed after all the qualification, filtering, mapping, and user-exit operations are processed. The record or transaction is ignored in the final output phase and prevents the record or transaction from being written to the output target (the trail in the case of Extract or the database in the case of Replicat). Therefore, in certain expressions, for example those that include <code class="codeph">SQLEXEC</code> operations, the <code class="codeph">SQLEXEC</code> will be executed before the <code class="codeph">IGNORE</code> is processed. This means that, while the record is not written to the trail or target database, all of the effects of processing the record through qualification, filtering, mapping and user-exit will occur.</p>
<p>This action is not valid for DDL records. Because DDL operations are autonomous, ignoring a record is equivalent to ignoring the entire transaction.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C293482A-194D-4EDA-802E-3C923DCEC242"><!-- --></a><code class="codeph">DISCARD</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes the process to:</p>
<ul style="list-style-type: disc;">
<li>
<p>write the specified event record to the discard file.</p>
</li>
<li>
<p>update the Oracle GoldenGate statistics to show that the record was discarded.</p>
</li>
</ul>
<p>The process resumes processing with the next record in the trail.</p>
<p><code class="codeph">DISCARD</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">IGNORE</code>.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-10A2FE27-C709-48AF-A83E-982B13607C4F"><!-- --></a><code class="codeph">LOG [INFO | WARNING]</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes the process to log the event when the specified event record is encountered. The message is written to the report file, to the Oracle GoldenGate error log, and to the system event log.</p>
<p>Use the following options to specify the severity of the message:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">INFO</code> specifies a low-severity informational message. This is the default.</p>
</li>
<li>
<p><code class="codeph">WARNING</code> specifies a high-severity warning message.</p>
</li>
</ul>
<p><code class="codeph">LOG</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">ABORT</code>. If using <code class="codeph">ABORT</code>, <code class="codeph">LOG</code> is not needed because <code class="codeph">ABORT</code> logs a fatal error before the process exits.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-0000DA75-7A99-421E-8D18-7AAA527CCB23"><!-- --></a><code class="codeph">REPORT</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes the process to generate a report file when the specified event record is encountered. This is the same as using the <code class="codeph">SEND</code> command with the <code class="codeph">REPORT</code> option in GGSCI.</p>
<p>The <code class="codeph">REPORT</code> message occurs after the event record is processed (unless <code class="codeph">DISCARD</code>, <code class="codeph">IGNORE</code>, or <code class="codeph">ABORT</code> are used), so the report data will include the event record.</p>
<p><code class="codeph">REPORT</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-5CA44A7C-5B9F-4122-9FC6-2E2A677142DB"><!-- --></a><code class="codeph">ROLLOVER</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract.</p>
<p>Causes Extract to roll over the trail to a new file when the specified event record is encountered. The <code class="codeph">ROLLOVER</code> action occurs before Extract writes the event record to the trail file, which causes the record to be the first one in the new file unless <code class="codeph">DISCARD</code>, <code class="codeph">IGNORE</code> or <code class="codeph">ABORT</code> are also used.</p>
<p><code class="codeph">ROLLOVER</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">ABORT</code>. <code class="codeph">ROLLOVER</code> cannot be combined with <code class="codeph">ABORT</code> because <code class="codeph">ROLLOVER</code> does not cause the process to write a checkpoint, and <code class="codeph">ROLLOVER</code> happens before <code class="codeph">ABORT</code>.</p>
<p>Without a <code class="codeph">ROLLOVER</code> checkpoint, <code class="codeph">ABORT</code> causes Extract to go to its previous checkpoint upon restart, which would be in the previous trail file. In effect, this cancels the rollover.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-9B3668A8-4FDF-4330-8D0B-A42C4101CA93"><!-- --></a><code class="codeph">SHELL '</code><span class="italic"><code class="codeph">command'</code></span></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes the process to execute the specified shell command when the event record is encountered. <code class="codeph">SHELL '</code><span class="italic"><code class="codeph">command'</code></span> executes a basic shell command. The command string is taken at its literal value and sent to the system that way. The command is case-sensitive. Enclose the command string within single quote marks, for example:</p>
<pre dir="ltr">
EVENTACTIONS (SHELL 'echo hello world! &gt; output.txt')
</pre>
<p>If the shell command is successful, the process writes an informational message to the report file and to the event log. Success is based upon the exit status of the command in accordance with the UNIX shell language. In that language, zero indicates success.</p>
<p>If the system call is not successful, the process abends with a fatal error. In the UNIX shell language, non-zero equals failure. Note that the error message relates only to the execution of the <code class="codeph">SHELL</code> command itself, and not the exit status of any subordinate commands. For example, <code class="codeph">SHELL</code> can execute a script successfully, but commands in that script could fail.</p>
<p><code class="codeph">SHELL</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7661BBB9-49C0-4B48-B7C4-C57C006FFF68"><!-- --></a><code class="codeph">SHELL ('</code><span class="italic"><code class="codeph">command</code></span><code class="codeph">', VAR</code> <span class="italic"><code class="codeph">variable</code></span> <code class="codeph">= {</code><span class="italic"><code class="codeph">column_name</code></span> <code class="codeph">|</code> <span class="italic"><code class="codeph">expression</code></span><code class="codeph">} [, ...])</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes the process to execute the specified shell command when the event record is encountered and supports parameter passing. The command and the parameters are case-sensitive.</p>
<p>When <code class="codeph">SHELL</code> is used with arguments, the entire command and argument strings must be enclosed within parentheses, for example:</p>
<pre dir="ltr">
EVENTACTIONS (SHELL ('Current timestamp: $1  SQLEXEC result is $2 ',VAR $1 = @GETENV('JULIANTIMESTAMP'),VAR $2 = mytest.description));
</pre>
<p>The input is as follows:</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-BDD0A5BE-E3FB-49C3-BF8B-E563BD7C820D"><!-- --></a><span class="italic"><code class="codeph">command</code></span></dt>
<dd>
<p>Is the command, which is passed literally to the system.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-000AEC6E-A4BC-4A25-B187-08C2E0584C6D"><!-- --></a><code class="codeph">VAR</code></dt>
<dd>
<p>Is a required keyword that starts the parameter input.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-465E354B-C349-47BC-A6D2-CD2593650FBA"><!-- --></a><span class="italic"><code class="codeph">variable</code></span></dt>
<dd>
<p>Is the user-defined name of the placeholder variable where the run-time variable value will be substituted. Extra variables that are not used in the command are ignored. Note that any literal in the <code class="codeph">SHELL</code> command that matches a <code class="codeph">VAR</code> variable name is replaced by the substituted <code class="codeph">VAR</code> value. This may have unintended consequences, so test your code before putting it into production.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-162AF79F-7F2F-4AAC-9655-87EEC511731A"><!-- --></a><span class="italic"><code class="codeph">column_name</code></span></dt>
<dd>
<p>Can be the before or after (current) image of a column value.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-0005D562-1C3A-40AC-98C5-21DE4475569A"><!-- --></a><span class="italic"><code class="codeph">expression</code></span></dt>
<dd>
<p>can be the following, depending on whether column data or DDL is being handled.</p>
<ul style="list-style-type: disc;">
<li>
<p>Valid expressions for column data:</p>
<ul style="list-style-type: disc;">
<li>
<p>The value from a <code class="codeph">TOKENS</code> clause in a <code class="codeph">TABLE</code> statement.</p>
</li>
<li>
<p>A return value from any Oracle GoldenGate column-conversion function.</p>
</li>
<li>
<p>A return value from a <code class="codeph">SQLEXEC</code> query or procedure.</p>
</li>
</ul>
</li>
<li>
<p>Valid expressions for DDL:</p>
<ul style="list-style-type: disc;">
<li>
<p>Return value from <code class="codeph">@TOKEN</code> function (Replicat only).</p>
</li>
<li>
<p>Return value from <code class="codeph">@GETENV</code> function.</p>
</li>
<li>
<p>Return value from other functions that do not reference column data (for example, <code class="codeph">@DATENOW</code>).</p>
</li>
<li>
<p>Return value from <code class="codeph">@DDL</code> function.</p>
</li>
</ul>
</li>
</ul>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-75700DFC-6158-468C-A5D0-15A3EFE8B710"><!-- --></a><span class="italic"><code class="codeph">TRACE[2]</code></span> <span class="italic"><code class="codeph">file</code></span> <code class="codeph">[TRANSACTION] [DDL[INCLUDE] | DDLONLY] [PURGE | APPEND]</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes process trace information to be written to a trace file when the specified event record is encountered. <code class="codeph">TRACE</code> provides step-by-step processing information. <code class="codeph">TRACE2</code> identifies the code segments on which the process is spending the most time.</p>
<p>By default (without options), standard DML tracing without consideration of transaction boundaries is enabled until the process terminates.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic"><code class="codeph">file</code></span> specifies the name of the trace file and must appear immediately after the <code class="codeph">TRACE</code> keyword. You can specify a unique trace file, or use the default trace file that is specified with the standalone <code class="codeph">TRACE</code> or <code class="codeph">TRACE2</code> parameter.</p>
<p>The same trace file can be used across different <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements in which <code class="codeph">EVENTACTIONS</code> <code class="codeph">TRACE</code> is used. If multiple <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements specify the same trace file name, but the <code class="codeph">TRACE</code> options are not used consistently, preference is given to the options in the last resolved <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> that contains this trace file.</p>
</li>
<li>
<p>Use <code class="codeph">TRANSACTION</code> to enable tracing only until the end of the current transaction, instead of when the process terminates. For Replicat, transaction boundaries are based on the source transaction, not the typical Replicat grouped or batched target transaction. <code class="codeph">TRANSACTION</code> can be shortened to <code class="codeph">TRANS</code>. This option is valid only for DML operations.</p>
</li>
<li>
<p><code class="codeph">DDL[INCLUDE]</code> traces DDL and also DML transactional data processing. Either <code class="codeph">DDL</code> or <code class="codeph">DDLINCLUDE</code> is valid.</p>
</li>
<li>
<p><code class="codeph">DDLONLY</code> traces DDL but does not trace DML transactional data.</p>
<p>These options are valid only for Replicat. By default DDL tracing is disabled.</p>
</li>
<li>
<p>Use <code class="codeph">PURGE</code> to truncate the trace file before writing additional trace records, or use <code class="codeph">APPEND</code> to write new trace records at the end of the existing records. <code class="codeph">APPEND</code> is the default.</p>
</li>
</ul>
<p><code class="codeph">TRACE</code> can be combined with all other <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">ABORT</code>.</p>
<p>To disable tracing to the specified trace file, issue the GGSCI <code class="codeph">SEND</code> <span class="italic"><code class="codeph">process</code></span> command with the <code class="codeph">TRACE OFF</code> <span class="italic"><code class="codeph">file_name</code></span> option.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-D73B2735-B878-42A7-8F3E-22A4D4589A9E"><!-- --></a><code class="codeph">CHECKPOINT [BEFORE | AFTER | BOTH]</code></dt>
<dd>
<p>Valid in <code class="codeph">TABLE</code> for Extract and in <code class="codeph">MAP</code> for Replicat.</p>
<p>Causes the process to write a checkpoint when the specified event record is encountered. Checkpoint actions provide a context around the processing that is defined in <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statements. This context has a begin point and an end point, thus providing synchronization points for mapping the functions that are performed with <code class="codeph">SQLEXEC</code> and user exits.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B95B1BB5-744E-4FE2-94FA-E8D4C7C1EEF6"><!-- --></a><code class="codeph">BEFORE</code></dt>
<dd>
<p><code class="codeph">BEFORE</code> for an Extract process writes a checkpoint before Extract writes the event record to the trail. <code class="codeph">BEFORE</code> for a Replicat process writes a checkpoint before Replicat applies the SQL operation that is contained in the record to the target.</p>
<p><code class="codeph">BEFORE</code> requires the event record to be the first record in a transaction. If it is not the first record, the process will abend. Use <code class="codeph">BEFORE</code> to ensure that all transactions prior to the one that begins with the event record are committed.</p>
<p>When using <code class="codeph">EVENTACTIONS</code> for a DDL record, note that since each DDL record is autonomous, the DDL record is guaranteed to be the start of a transaction; therefore the <code class="codeph">CHECKPOINT BEFORE</code> event action is implied for a DDL record.</p>
<p><code class="codeph">CHECKPOINT BEFORE</code> can be combined with all <code class="codeph">EVENTACTIONS</code> options.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-DE260BFC-B905-422B-BF04-6CEA08C59FE9"><!-- --></a><code class="codeph">AFTER</code></dt>
<dd>
<p><code class="codeph">AFTER</code> for Extract writes a checkpoint after Extract writes the event record to the trail. <code class="codeph">AFTER</code> for Replicat writes a checkpoint after Replicat applies the SQL operation that is contained in the record to the target.</p>
<p><code class="codeph">AFTER</code> flags the checkpoint request as an advisory, meaning that the process will only issue a checkpoint at the next practical opportunity. For example, in the case where the event record is one of a multi-record transaction, the checkpoint will take place at the next transaction boundary, in keeping with the Oracle GoldenGate data-integrity model.</p>
<p>When using <code class="codeph">EVENTACTIONS</code> for a DDL record, note that since each DDL record is autonomous, the DDL record is guaranteed to be the end (boundary) of a transaction; therefore the <code class="codeph">CHECKPOINT AFTER</code> event action is implied for a DDL record.</p>
<p><code class="codeph">CHECKPOINT AFTER</code> can be combined with all <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">ABORT.</code></p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-6F55635E-B4C2-457C-A69E-7C1F86CAA2F1"><!-- --></a><code class="codeph">BOTH</code></dt>
<dd>
<p><code class="codeph">BOTH</code> combines <code class="codeph">BEFORE</code> and <code class="codeph">AFTER</code>. The Extract or Replicat process writes a checkpoint before and after it processes the event record.</p>
<p><code class="codeph">CHECKPOINT BOTH</code> can be combined with all <code class="codeph">EVENTACTIONS</code> options except <code class="codeph">ABORT.</code></p>
</dd>
</dl>
<p><code class="codeph">CHECKPOINT</code> can be shortened to <code class="codeph">CP</code>.</p>
</dd>
</dl>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-672E0389-CFA0-40CF-B86F-02485BC9D0C4"><!-- --></a>Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following example shows how you can configure a process to ignore certain records. When Extract processes any trail record that has <code class="codeph">name = abc</code>, it ignores the record.</p>
<pre dir="ltr">
TABLE fin.cust, &amp;
WHERE (name = 'abc'), &amp;
EVENTACTIONS (ignore);
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-6F2596E0-0D4D-471E-8C7A-FFF7E6581DC2"><!-- --></a>Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>Based on the compatibility and precedence rules of <code class="codeph">EVENTACTIONS</code> options, <code class="codeph">DISCARD</code> takes higher precedence than <code class="codeph">ABORT</code>, so in this example the event record gets written to the discard file before the process abends.</p>
<pre dir="ltr">
MAP fin.cust, TARGET fin.cust2, &amp;
WHERE (name = 'abc'), &amp;
EVENTACTIONS (DISCARD, ABORT);
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-AF92630B-4A43-4D63-ADDE-A10F3DB62E92"><!-- --></a>Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following example executes a <code class="codeph">SHELL</code> action. It gets the result of a <code class="codeph">SQLEXEC</code> query and pairs it with the current timestamp.</p>
<pre dir="ltr">
TABLE src.tab &amp;
SQLEXEC (id mytest, query 'select description from lookup &amp;
where pop = :mycol2', params (mycol2 = col2) ), &amp;
EVENTACTIONS (SHELL ('Current timestamp: $1  SQLEXEC result is $2 ', &amp;
VAR $1 = @GETENV('JULIANTIMESTAMP'), VAR $2 = mytest.description));
</pre>
<p>The shell command that results from this example could be similar to the following:</p>
<pre dir="ltr">
'Current timestamp: 212156002704718000  SQLEXEC result is test passed'
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-538B2DFE-6D97-4A5C-8374-D6BCCBB6845B"><!-- --></a>Example 4&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following example shows how invalid results can occur if a placeholder name conflicts with literal text in the command string. In this example, a placeholder named <code class="codeph">$1</code> is associated with a column value, and the <code class="codeph">SHELL</code> command echoes a literal string that includes <code class="codeph">$1</code>.</p>
<pre dir="ltr">
MAP src.tab1, TARGET targ.tab1 &amp;
EVENTACTIONS (SHELL ('echo Extra charge for $1 is $1', VAR $1 = COL1));
</pre>
<p>This is the unintended result, assuming the column value is <code class="codeph">gift wrap</code>:</p>
<pre dir="ltr">
'Extra charge for gift wrap is gift wrap'
</pre>
<p>Changing the placeholder variable to <code class="codeph">$col</code> results in the correct output:</p>
<pre dir="ltr">
MAP src.tab1, TARGET targ.tab1 &amp;
EVENTACTIONS (SHELL ('echo Extra charge for $col is $1', VAR $col = COL1));
'Extra charge for gift wrap is $1'
</pre>
<p>The following shows similar potential for unintended results:</p>
<pre dir="ltr">
MAP src.tab1, TARGET targ.tab1 &amp;
EVENTACTIONS (SHELL ('Timestamp: $1  Price is $13 &gt; out.txt ', &amp;
VAR $1 = @GETENV('JULIANTIMESTAMP')));
</pre>
<p>The redirected output file might contain a string like this (notice the second timestamp contains an appended value of <code class="codeph">3</code>):</p>
<pre dir="ltr">
'Timestamp: 212156002704718000 Price is 2121560027047180003'
</pre>
<p>The intended result is this:</p>
<pre dir="ltr">
'Timestamp: 212156002704718000 Price is $13'
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B7AACC1C-FB92-483C-B392-E23D2833D63F"><!-- --></a>Example 5&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>These examples show different ways to configure tracing.</p>
<pre dir="ltr">
MAP tab1, TARGET tab1 EVENTACTIONS (TRACE ./dirrpt/trace1.txt);
MAP tab2, TARGET tab2 EVENTACTIONS (TRACE ./dirrpt/trace2.txt TRANSACTION);
</pre>
<ul style="list-style-type: disc;">
<li>
<p>In the first <code class="codeph">MAP</code> statement, the <code class="codeph">trace1.txt</code> trace file is generated just before the first <code class="codeph">tab1</code> event record is applied to the target. It contains all of the tracing information from that point forward until Replicat terminates or unless tracing is turned off with the GGSCI <code class="codeph">SEND REPLICAT</code> command.</p>
</li>
<li>
<p>Because the second <code class="codeph">MAP</code> statement contains the <code class="codeph">TRANSACTION</code> option, the <code class="codeph">trace2.txt</code> file is generated just before the first <code class="codeph">tab2</code> event record is applied to the target, but the tracing stops automatically at the conclusion of the transaction that contains the <code class="codeph">tab2</code> event record.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-71DF6000-56A4-4803-9C8C-8967101355E2"><!-- --></a>Example 6&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following shows how <code class="codeph">EVENTACTIONS</code> with <code class="codeph">SUSPEND</code> can be used.</p>
<ul style="list-style-type: disc;">
<li>
<p><span class="italic">Case 1</span>: You are replicating DDL, and you want to ensure that there is enough space in the target database to create a new table. Use <code class="codeph">EVENTACTIONS</code> with <code class="codeph">SUSPEND</code> in the <code class="codeph">MAP</code> statement that maps the <code class="codeph">CREATE TABLE DDL</code> operation, and then execute a SQL statement in that <code class="codeph">MAP</code> statement to query the amount of space remaining in a tablespace. If there is enough space, use <code class="codeph">SEND REPLICAT</code> with <code class="codeph">RESUME</code> to resume processing immediately; if not, leave Replicat suspended until a DBA can add the space, and then use <code class="codeph">SEND REPLICAT</code> with <code class="codeph">RESUME</code> to resume processing.</p>
</li>
<li>
<p><span class="italic">Case 2</span>: You want to fix unique key violations when they occur on any table. Because Replicat is processing thousands of tables, you do not want to stop the process each time there is a violation, because this would cause Replicat to spend time rebuilding the object cache again upon restart. By using <code class="codeph">EVENTACTIONS</code> with <code class="codeph">SUSPEND</code>, you can simply suspend processing until the problem is fixed.</p>
</li>
<li>
<p><span class="italic">Case 3</span>: At the end of the day, you suspend Replicat to run daily reports, and then resume processing immediately without stopping and restarting the process.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I1053366">
<p class="subhead1"><code class="codeph">EXITPARAM '</code><span class="italic"><code class="codeph">parameter</code></span><code class="codeph">'</code></p>
<p><code class="codeph">EXITPARAM</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">EXITPARAM</code> to pass a parameter to the <code class="codeph">EXIT_PARAMS</code> function of a user exit routine whenever a record from the <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement is encountered.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information about User Exits</p>
<p>See <a class="olink GWUAD607" target="_blank" href="../GWUAD/customizing-oracle-goldengate-processing.htm#GWUAD607"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for instructions on how to configure user exits.</p>
<p>See <span class="q">"<a href="user-exit-functions.htm" title="This chapter describes the Oracle GoldenGate user exit functions and their syntax and includes the following topics:">User Exit Functions</a>"</span> for more information about the syntax for the user exits.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
EXITPARAM '<span class="italic">parameter string</span>'
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-5A84FD38-E928-4A72-8D93-8429FA4ADF33"><!-- --></a><span class="italic"><code class="codeph">'parameter string'</code></span></dt>
<dd>
<p>A parameter that is a literal string. Enclose the parameter within single quotes. You can specify up to 100 characters for the parameter string.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGCCHAG">
<p class="subhead1"><code class="codeph">FETCHBEFOREFILTER</code></p>
<p><code class="codeph">FETCHBEFOREFILTER</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use <code class="codeph">FETCHBEFOREFILTER</code> to fetch columns that are specified with <code class="codeph">FETCHCOLS</code> or <code class="codeph">FETCHCOLSEXCEPT</code> before a <code class="codeph">FILTER</code> operation is executed. Fetching before the filter ensures that values required for the filter are available. Without <code class="codeph">FETCHBEFOREFILTER</code>, fetches specified with <code class="codeph">FETCHCOLS</code> or <code class="codeph">FETCHCOLSEXCEPT</code> are not performed until after filters are executed. Specify <code class="codeph">FETCHBEFOREFILTER</code> before <code class="codeph">FILTER</code> in the parameter file.</p>
<p>Do not use this option for tables being processed in pass-through mode by a data-pump Extract group.</p>
<p><code class="codeph">FETCHBEFOREFILTER</code> is not supported for the SQL/MX database.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
FETCHBEFOREFILTER
</pre></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<pre dir="ltr">
TABLE hr.salary, FETCHCOLS (<span class="italic">sal_level</span>),
FETCHBEFOREFILTER,
FILTER (sal_level &gt;= 8)
;
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGHBBED">
<p class="subhead1"><code class="codeph">{FETCHCOLS | FETCHCOLSEXCEPT} (</code><span class="italic"><code class="codeph">column_list</code></span><code class="codeph">)</code></p>
<p><code class="codeph">FETCHCOLS</code> and <code class="codeph">FETCHCOLSEXCEPT</code> are valid for <code class="codeph">TABLE</code>. These options are only valid for the primary extract and cannot be used on data pump.</p>
<p>Use <code class="codeph">FETCHCOLS</code> and <code class="codeph">FETCHCOLSEXCEPT</code> to fetch column values from the database when the values are not present in the transaction log record. Use this option if the database only logs the values of columns that were changed in an update operation, but you need to ensure that other column values required for <code class="codeph">FILTER</code> operations are available.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">FETCHCOLS</code> fetches the specified columns.</p>
</li>
<li>
<p><code class="codeph">FETCHCOLSEXCEPT</code> fetches all columns except the specified columns. For tables with numerous columns, <code class="codeph">FETCHCOLSEXCEPT</code> may be more efficient than listing each column with <code class="codeph">FETCHCOLS</code>.</p>
</li>
</ul>
<p><code class="codeph">FETCHCOLS</code> and <code class="codeph">FETCHCOLSEXCEPT</code> are valid for all databases that are supported by Oracle GoldenGate, except NonStop SQL/MX.</p>
<p>For an Oracle database, Oracle GoldenGate fetches the values from the undo tablespace through Oracle's Flashback Query mechanism. The query provides a read-consistent image of the columns as of a specific time or SCN. For more information about how Oracle GoldenGate uses Flashback Query, see <a class="olink GIORA" target="_blank" href="../GIORA/toc.htm"><span class="italic"><span id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GIORA"><cite>Installing and Configuring Oracle GoldenGate for Oracle Database</cite></span></span></a>.</p>
<p>Instead of using <code class="codeph">FETCHCOLS</code> or <code class="codeph">FETCHCOLSEXCEPT</code>, it may be more efficient to enable supplemental logging for the desired columns.</p>
<p>For Sybase, encrypted column data is not supported by these parameters because Oracle GoldenGate does not support Sybase encrypted data.</p>
<p>To control fetching and enable a response when a column specified for fetching cannot be located, use the <code class="codeph">FETCHOPTIONS</code> parameter. To include fetch results in statistical displays generated by the <code class="codeph">STATS EXTRACT</code> command, use the <code class="codeph">STATOPTIONS</code> parameter.</p>
<p>If values for columns specified with <code class="codeph">FETCHCOLS</code> or <code class="codeph">FETCHCOLSEXCEPT</code> are present in the transaction log, no database fetch is performed. This reduces database overhead.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
{FETCHCOLS | FETCHCOLSEXCEPT} (<span class="italic">column</span> [, ...])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-D1EF7A71-61C9-4E4E-8829-BDB560E5DF80"><!-- --></a><span class="italic"><code class="codeph">column</code></span></dt>
<dd>
<p>Can be one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>A column name or a comma-delimited list of column names, as in <code class="codeph">(col1, col2)</code>.</p>
</li>
<li>
<p>An asterisk wildcard, as in (*).</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The <code class="codeph">FETCHCOLS</code> clause in this example fetches <span class="italic">only</span> columns 1 and 3, whereas the <code class="codeph">FETCHCOLSEXCEPT</code> clause fetches all columns <span class="italic">except</span> columns 1 and 3.</p>
<pre dir="ltr">
TABLE hq.acct, FETCHCOLS (col1, col3);
TABLE hq.sales, FETCHCOLSEXCEPT (col1, col3);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGDFCEH">
<p class="subhead1"><code class="codeph">{FETCHMODCOLS | FETCHMODCOLSEXCEPT} (</code><span class="italic"><code class="codeph">column_list</code></span><code class="codeph">)</code></p>
<p><code class="codeph">FETCHMODCOLS</code> and <code class="codeph">FETCHMODCOLSEXCEPT</code> are valid for <code class="codeph">TABLE</code>. These options are only valid for the primary extract and cannot be used on data pump.</p>
<p>Use <code class="codeph">FETCHMODCOLS</code> and <code class="codeph">FETCHMODCOLSEXCEPT</code> to force column values to be fetched from the database even if the columns are present in the transaction log. These Depending on the database type, a log record can contain all of the columns of a table or only the columns that changed in the given transaction operation.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">FETCHMODCOLS</code> fetches the specified columns.</p>
</li>
<li>
<p><code class="codeph">FETCHMODCOLSEXCEPT</code> fetches all columns that are present in the transaction log, except the specified columns. For tables with numerous columns, <code class="codeph">FETCHMODCOLSEXCEPT</code> might be more efficient than listing each column with <code class="codeph">FETCHMODCOLS</code>.</p>
</li>
</ul>
<p><code class="codeph">FETCHMODCOLS</code> and <code class="codeph">FETCHMODCOLSEXCEPT</code> are valid for all databases that are supported by Oracle GoldenGate, except NonStop SQL/MX.</p>
<p>Observe the following usage guidelines:</p>
<ul style="list-style-type: disc;">
<li>
<p>Do not use <code class="codeph">FETCHMODCOLS</code> and <code class="codeph">FETCHMODCOLSEXCEPT</code> for key columns.</p>
</li>
<li>
<p>(Sybase) Do not use <code class="codeph">FETCHMODCOLS</code> and <code class="codeph">FETCHMODCOLSEXCEPT</code> for encrypted column data. Oracle GoldenGate does not support Sybase encrypted data.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
{FETCHMODCOLS | FETCHMODCOLSEXCEPT} (<span class="italic">column</span> [, ...])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7DF6CD77-B347-4804-8C36-80D7BC95E7D3"><!-- --></a><code class="codeph">(</code><span class="italic"><code class="codeph">column</code></span> <code class="codeph">[, ...])</code></dt>
<dd>
<p>Can be one of the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>A column name or a comma-delimited list of column names, as in <code class="codeph">(col1, col2)</code>.</p>
</li>
<li>
<p>An asterisk wildcard, as in (*).</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The <code class="codeph">FETCHMODCOLS</code> clause in this example fetches <span class="italic">only</span> columns 1 and 3, whereas the <code class="codeph">FETCHMODCOLSEXCEPT</code> clause fetches all columns <span class="italic">except</span> columns 1 and 3.</p>
<pre dir="ltr">
TABLE hq.acct, FETCHMODCOLS (col1, col3);
TABLE hq.sales, FETCHMODCOLSEXCEPT (col1, col3);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016736">
<p class="subhead1"><code class="codeph">FILTER (</code><span class="italic"><code class="codeph">filter_clause</code></span><code class="codeph">)</code></p>
<p><code class="codeph">FILTER</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">FILTER</code> to select or exclude records based on a numeric value. A filter expression can use conditional operators, Oracle GoldenGate column-conversion functions, or both.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-23B0F88B-5C07-4B3D-BD78-EB0AB36235C1">
<p class="notep1">Note:</p>
<p>To filter based on a string, use one of the Oracle GoldenGate string functions. See <span class="q">"<a href="column-conversion-functions.htm">Column Conversion Functions</a>"</span> for more information about these functions. You can also use the <code class="codeph">WHERE</code> option. See <span class="q">"<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016740">WHERE (clause)</a>"</span>.</p>
</div>
<p>Separate all <code class="codeph">FILTER</code> components with commas. A <code class="codeph">FILTER</code> clause can include the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Numbers</p>
</li>
<li>
<p>Columns that contain numbers</p>
</li>
<li>
<p>Functions that return numbers</p>
</li>
<li>
<p>Arithmetic operators:</p>
<p>+ (plus)</p>
<p>- (minus)</p>
<p>* (multiply)</p>
<p>/ (divide)</p>
<p>\ (remainder)</p>
</li>
<li>
<p>Comparison operators:</p>
<p>&gt; (greater than)</p>
<p>&gt;= (greater than or equal)</p>
<p>&lt; (less than)</p>
<p>&lt;= (less than or equal)</p>
<p>= (equal)</p>
<p>&lt;&gt; (not equal)</p>
<p>Results derived from comparisons can be zero (indicating <code class="codeph">FALSE</code>) or non-zero (indicating <code class="codeph">TRUE</code>).</p>
</li>
<li>
<p>Parentheses (for grouping results in the expression)</p>
</li>
<li>
<p>Conjunction operators: <code class="codeph">AND</code>, <code class="codeph">OR</code></p>
</li>
</ul>
<p>Enclose literals in single quotes. Specify case-sensitive column names as they are stored in the database, and enclose them in double quotes if the database requires quotes to enforce case-sensitivity (such as Oracle).</p>
<p>Oracle GoldenGate supports <code class="codeph">FILTER</code> for columns that have a multi-byte character set.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information about Record Filtering</p>
<p>See <a class="olink GWUAD426" target="_blank" href="../GWUAD/mapping-and-manipulating-data.htm#GWUAD426"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information about <code class="codeph">FILTER</code> and other filtering options.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
FILTER (
[, ON INSERT | ON UPDATE| ON DELETE]
[, IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE]
, <span class="italic">filter_clause</span>
[, RAISEERROR <span class="italic">error_number</span>]
)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-2E278503-9E97-4985-B826-557B6A56355F"><!-- --></a><span class="italic"><code class="codeph">filter_clause</code></span></dt>
<dd>
<p>Selects records based on an expression, such as:</p>
<pre dir="ltr">
FILTER ((PRODUCT_PRICE*PRODUCT_AMOUNT) &gt; 10000))
</pre>
<p>You can use the column-conversion functions of Oracle GoldenGate in a filter clause, as in:</p>
<pre dir="ltr">
FILTER (@COMPUTE (PRODUCT_PRICE*PRODUCT_AMOUNT)&gt;10000)
</pre>
<p>Enclose literals in single quotes. Specify case-sensitive column names as they are stored in the database, and enclose them in double quotes if the database requires quotes to enforce case-sensitivity (such as Oracle).</p>
<p>Oracle GoldenGate does not support <code class="codeph">FILTER</code> for columns that have a multi-byte character set or a character set that is incompatible with the character set of the local operating system.</p>
<p>The maximum size of the filter clause is 5,000 bytes.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-FBBC0730-F2CD-413D-9B27-57B6DBBF620A"><!-- --></a><code class="codeph">ON INSERT | ON UPDATE | ON DELETE</code></dt>
<dd>
<p>Restricts record filtering to the specified operation(s). Separate operations with commas, for example:</p>
<pre dir="ltr">
FILTER (ON UPDATE, ON DELETE,
@COMPUTE (PRODUCT_PRICE*PRODUCT_AMOUNT)&gt;10000)
</pre>
<p>The preceding example executes the filter for <code class="codeph">UPDATE</code> and <code class="codeph">DELETE</code> operations, but not <code class="codeph">INSERT</code> operations.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C05B9AC9-3A85-4DCF-B418-C40FD945AADA"><!-- --></a><code class="codeph">IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE</code></dt>
<dd>
<p>Does not apply the filter for the specified operation(s). Separate operations with commas, for example:</p>
<pre dir="ltr">
FILTER (IGNORE INSERT, @COMPUTE (PRODUCT_PRICE*PRODUCT_AMOUNT)&gt;10000)
</pre>
<p>The preceding example executes the filter on <code class="codeph">UPDATE</code> and <code class="codeph">DELETE</code> operations, but ignores <code class="codeph">INSERT</code> operations.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-E7D3B98F-D490-46F0-8171-8F404AF8C83B"><!-- --></a><code class="codeph">RAISEERROR</code> <span class="italic"><code class="codeph">error</code></span></dt>
<dd>
<p>Raises a user-defined error number if the filter fails. Can be used as input to the <code class="codeph">REPERROR</code> parameter to invoke error handling. Make certain that the value for <span class="italic"><code class="codeph">error</code></span> is outside the range of error numbers that is used by the database or by Oracle GoldenGate. For example: <code class="codeph">RAISEERROR 21000</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGJBFDC">
<p class="subhead1"><code class="codeph">GETBEFORECOLS (</code><span class="italic"><code class="codeph">column_specification</code></span><code class="codeph">)</code></p>
<p><code class="codeph">GETBEFORECOLS</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use <code class="codeph">GETBEFORECOLS</code> to specify columns for which you want before image to be captured and written to the trail upon an update or delete operation. Use <code class="codeph">GETBEFORECOLS</code> when using the Oracle GoldenGate Conflict Detection and Resolution (CDR) feature in a bi-directional or multi-master configuration. Also use it when using conversion functions or other processing features that require the before image of a record.</p>
<p>For updates, the before image of the specified columns is included in the trail whether or not any given column is modified. In addition to the columns specified in the <code class="codeph">GETBEFORECOLS</code> clause, an Oracle database will also log the before image of other columns that are modified. For other supported databases, you can use the <code class="codeph">GETUPDATEBEFORES</code> parameter to force the inclusion of the before values of other columns that are modified.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-995F8BB2-5E25-410D-8861-39EA35D39323">
<p class="notep1">Note:</p>
<p><code class="codeph">GETUPDATEBEFORES</code> overrides <code class="codeph">GETBEFORECOLS</code> if both are used in the same parameter file.</p>
</div>
<p>To use this parameter, supplemental logging must be enabled for any database that does not log before values by default.</p>
<p><code class="codeph">GETBEFORECOLS</code> overrides <code class="codeph">COMPRESSUPDATES</code> and <code class="codeph">COMPRESSDELETES</code> if used in the same parameter file.</p>
<p>This parameter is valid for all databases except DB2. For DB2 on all platforms that are supported by Oracle GoldenGate, use the <code class="codeph">GETUPDATEBEFORES</code> parameter instead of <code class="codeph">GETBEFORECOLS.</code></p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
GETBEFORECOLS(
{ON UPDATE | ON DELETE}
{ALL | KEY | KEYINCLUDING (<span class="italic">col</span>[,...])  | KEYANDMOD | | ALLEXCLUDING (<span class="italic">col</span>[,...]) }
[,...]
)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-92EB2B56-7947-40F4-A5A9-77642E6A41A4"><!-- --></a><code class="codeph">{ON UPDATE | ON DELETE}</code></dt>
<dd>
<p>Specifies whether the before image of the specified columns should be captured for updates or deletes. You can use <code class="codeph">ON UPDATE</code> only, <code class="codeph">ON DELETE</code> only, or both. If using both, specify them within the same <code class="codeph">GETBEFORECOLS</code> clause. See the example for how to use both.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B9CDDC1D-A9E8-4EF5-9FF2-A8ED795E0503"><!-- --></a><code class="codeph">{ALL | KEY | KEYINCLUDING (</code><span class="italic"><code class="codeph">col</code></span><code class="codeph">[,...]) | KEYANDMOD | ALLEXCLUDING (</code><span class="italic"><code class="codeph">col</code></span><code class="codeph">[,...])}</code></dt>
<dd>
<p>Specifies the columns for which a before image is captured.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B9DFD248-F8A2-446B-9D8E-EDB58E0E18E1"><!-- --></a><code class="codeph">ALL</code></dt>
<dd>
<p>Captures a before image of all supported data type columns in the target table, including the primary key; all unsupported columns are skipped and logged in the Extract or Replicat parameter file as an information message. This imposes the highest processing load for Extract, but allows conflict-detection comparisons to be performed using all columns for maximum accuracy.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-FB746A4E-7223-46E8-9183-49FBEFF97358"><!-- --></a><code class="codeph">KEY</code></dt>
<dd>
<p>Capture before image only for the primary key. This is the fastest option, but does not permit the most accurate conflict detection, because keys can match but non-key columns could be different. <code class="codeph">KEY</code> is the default.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-0E89CE5A-F481-4316-AA6D-77790C0BFC15"><!-- --></a><code class="codeph">KEYINCLUDING</code></dt>
<dd>
<p>Capture before image of the primary key and also the specified column or columns. This is a reasonable compromise between speed and detection accuracy.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-AB9A6193-0C59-4DCC-88A1-8599D33E452A"><!-- --></a><code class="codeph">KEYANDMOD</code></dt>
<dd>
<p>Use this option as an extension of the key option for both Extract and Replicat. For update DMLs on the source, Extract logs the key and modified columns. Replicat on the target will use the <code class="codeph">KEY</code> and <code class="codeph">MODIFIED</code> columns during conflict detection in a <code class="codeph">WHERE</code> clause. With Oracle databases, the modified column is always used for conflict detection by default and this parameter makes it explicit.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C519D6DC-A8FA-4CC4-B698-C12A3881C15D"><!-- --></a><code class="codeph">ALLEXCLUDING</code></dt>
<dd>
<p>Capture before image of all columns except the specified columns. For tables with numerous columns, <code class="codeph">ALLEXCLUDING</code> may be more efficient than <code class="codeph">KEYINCLUDING</code>. Do <span class="italic">not</span> exclude key columns.</p>
</dd>
</dl>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>In the following example, the before images for the key column(s) plus the <code class="codeph">name</code>, <code class="codeph">address</code>, and <code class="codeph">salary</code> are always written to the trail file on update and delete operations.</p>
<pre dir="ltr">
TABLE src,
GETBEFORECOLS (
ON UPDATE KEYINCLUDING (name, address,  salary),
ON DELETE KEYINCLUDING (name, address, salary));
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790159">
<p class="subhead1"><code class="codeph">HANDLECOLLISIONS | NOHANDLECOLLISIONS</code></p>
<p><code class="codeph">HANDLECOLLISIONS</code> and <code class="codeph">NOHANDLECOLLISIONS</code> are valid for <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">HANDLECOLLISIONS</code> and <code class="codeph">NOHANDLECOLLISIONS</code> to control whether or not Oracle GoldenGate reconciles the results of an initial load with replicated transactional changes that are made to the same tables. When Oracle GoldenGate applies replicated changes after the load is finished, <code class="codeph">HANDLECOLLISIONS</code> causes Replicat to overwrite duplicate records in the target tables and provides alternate handling of errors for missing records.</p>
<p><code class="codeph">HANDLECOLLISIONS</code> and <code class="codeph">NOHANDLECOLLISIONS</code> can be used globally for all <code class="codeph">MAP</code> statements in the parameter file or as an <code class="codeph">ON/OFF</code> switch for groups of tables specified with <code class="codeph">MAP</code> statements, and they can be used within a <code class="codeph">MAP</code> statement. When used in a <code class="codeph">MAP</code> statement, they override the global specifications.</p>
<p>See <span class="q">"<a href="handlecollisions-nohandlecollisions.htm#GUID-D5A23DE0-9B9F-4497-AF74-30439D55B807">HANDLECOLLISIONS | NOHANDLECOLLISIONS</a>"</span> for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790158">
<p class="subhead1"><code class="codeph">INSERTALLRECORDS</code></p>
<p><code class="codeph">INSERTALLRECORDS</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use the <code class="codeph">INSERTALLRECORDS</code> parameter to convert all mapped operations to <code class="codeph">INSERT</code> operations on the target. <code class="codeph">INSERTALLRECORDS</code> can be used at the root level of the parameter file, within a <code class="codeph">MAP</code> statement, and within a <code class="codeph">MAPEXCEPTION</code> clause of a <code class="codeph">MAP</code> statement.</p>
<p>See <span class="q">"<a href="insertallrecords.htm#GUID-A1019C40-97BE-437B-9D80-7C99A9A6DB8E">INSERTALLRECORDS</a>"</span> for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790157">
<p class="subhead1"><code class="codeph">INSERTAPPEND | NOINSERTAPPEND</code></p>
<p><code class="codeph">INSERTAPPEND</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use the <code class="codeph">INSERTAPPEND</code> and <code class="codeph">NOINSERTAPPEND</code> parameters to control whether or not Replicat uses an <code class="codeph">APPEND</code> hint when it applies <code class="codeph">INSERT</code> operations to Oracle target tables. These parameters are valid only for Oracle databases.</p>
<p>See <span class="q">"<a href="insertappend-noinsertappend.htm#GUID-39497707-6530-4C44-98DB-D97296F47188">INSERTAPPEND | NOINSERTAPPEND</a>"</span> for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I1146401">
<p class="subhead1"><code class="codeph">KEYCOLS (</code><span class="italic"><code class="codeph">columns</code></span><code class="codeph">)</code></p>
<p><code class="codeph">KEYCOLS</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">KEYCOLS</code> to define one or more columns of the target table as unique. The primary use for <code class="codeph">KEYCOLS</code> is to define a substitute primary key when a primary key or an appropriate unique index is not available for the table. You can also use <code class="codeph">KEYCOLS</code> to specify additional columns to use in the row identifier that Replicat uses. Without the availability of a key or <code class="codeph">KEYCOLS</code> clause, Replicat uses all columns of the table to build its <code class="codeph">WHERE</code> clause, essentially performing a full table scan.</p>
<p>The columns of a key rendered by <code class="codeph">KEYCOLS</code> must uniquely identify a row, and they must match the columns that are used as a key on the source table. The source table must contain at least as many key or index columns as the <code class="codeph">KEYCOLS</code> key specified for the target table. Otherwise, in the event of an update to the source key or index columns, Replicat will not have the before images for the extra target <code class="codeph">KEYCOL</code> columns.</p>
<p>When defining a substitute key with <code class="codeph">KEYCOLS</code>, observe the following guidelines:</p>
<ul style="list-style-type: disc;">
<li>
<p>If the source and target tables both lack keys or unique indexes, use a <code class="codeph">KEYCOLS</code> clause in the <code class="codeph">TABLE</code> parameter and in the <code class="codeph">MAP</code> parameter, and specify matching sets of columns in each <code class="codeph">KEYCOLS</code> clause.</p>
</li>
<li>
<p>If either of the tables lacks a key or unique index, use <code class="codeph">KEYCOLS</code> for that table. Specify columns that match the actual key or index columns of the other table. If a matching set cannot be defined with <code class="codeph">KEYCOLS</code>, you must use <code class="codeph">KEYCOLS</code> for the source table (<code class="codeph">TABLE</code> parameter) and for the target table (<code class="codeph">MAP</code> parameter). Specify matching sets of columns that contain unique values. <code class="codeph">KEYCOLS</code> overrides a key or unique index.</p>
</li>
<li>
<p>If the target table has a larger key than the source table does (or if it has more unique-index columns), use <code class="codeph">KEYCOLS</code> in the <code class="codeph">TABLE</code> statement to specify the source columns that match the extra target columns. You must also include the actual source key or index columns in this <code class="codeph">KEYCOLS</code> clause. Using <code class="codeph">KEYCOLS</code> in this way ensures that before images are available to Replicat in case the non-key columns are updated on the source.</p>
</li>
</ul>
<p>When using <code class="codeph">KEYCOLS</code>, make certain that the specified columns are configured for logging so that they are available to Replicat in the trail records. For an Oracle database, you can enable the logging by using the <code class="codeph">COLS</code> option of the <code class="codeph">ADD TRANDATA</code> command.</p>
<p>On the target tables, create a unique index on the <code class="codeph">KEYCOLS</code>-defined key columns. An index improves the speed with which Oracle GoldenGate locates the target rows that it needs to process.</p>
<p>Do not use <code class="codeph">KEYCOLS</code> for tables being processed in pass-through mode by a data-pump Extract group.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
KEYCOLS (<span class="italic">column</span> [, ... ])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-22DBB0A1-DB70-4451-BB0A-52876588AF1D"><!-- --></a><span class="italic"><code class="codeph">column</code></span></dt>
<dd>
<p>Defines a column to be used as a substitute primary key. If a primary or unique key exists, those columns must be included in the <code class="codeph">KEYCOLS</code> specification. To specify multiple columns, create a comma-delimited list as in:</p>
<pre dir="ltr">
KEYCOLS (id, name)
</pre>
<p>The following column-types are <span class="bold">not</span> supported in <code class="codeph">KEYCOLS</code>:</p>
<ul style="list-style-type: disc;">
<li>
<p>Oracle column types <span class="bold">not</span> supported by <code class="codeph">KEYCOLS</code>:</p>
<p>Virtual columns, UDTs, function-based columns, and any columns that are explicitly excluded from the Oracle GoldenGate configuration.</p>
</li>
<li>
<p>SQL Server, DB2 LUW, DB2 z/OS, MySQL, SQL/MX, Teradata, TimesTen column types <span class="bold">not</span> supported by <code class="codeph">KEYCOLS</code>:</p>
<p>Columns that contain a timestamp or non-materialized computed column, and any columns excluded from the Oracle GoldenGate configuration. For SQL Server Oracle GoldenGate enforces the total length of data in rows for target tables without a primary key to be below 8000 bytes.</p>
</li>
<li>
<p>Sybase column types <span class="bold">not</span> supported by <code class="codeph">KEYCOLS</code>:</p>
<p>Computed columns, function-based columns, and any columns that are explicitly excluded from the GoldenGate configuration.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<pre dir="ltr">
TABLE hr.emp, KEYCOLS (id, first, last, birthdate);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790156">
<p class="subhead1"><code class="codeph">MAPEXCEPTION (</code><span class="italic"><code class="codeph">exceptions_mapping</code></span><code class="codeph">)</code></p>
<p><code class="codeph">MAPEXCEPTIONS</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">MAPEXCEPTION</code> as part of an exceptions <code class="codeph">MAP</code> statement intended for error handling. <code class="codeph">MAPEXCEPTION</code> maps failed operations that are flagged as exceptions by the <code class="codeph">REPERROR</code> parameter to an <span class="italic">exceptions table</span>. Replicat writes the values of these operations along with other information to the exceptions table.</p>
<p>You can use <code class="codeph">MAPEXCEPTION</code> within the same <code class="codeph">MAP</code> statement that includes the source-target table mapping and other standard <code class="codeph">MAP</code> options. The source and target table names can include wildcards.</p>
<p>When using <code class="codeph">MAPEXCEPTION</code>, use a <code class="codeph">REPERROR</code> statement with the <code class="codeph">EXCEPTION</code> option either within the same <code class="codeph">MAP</code> statement or at the root of the Replicat parameter file. See <span class="q">"<a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790160">EXCEPTIONSONLY</a>"</span> and <span class="q">"<a href="reperror.htm#GUID-CB7CD1F1-EC5E-482A-9FDB-3BAA2ECF86B6">REPERROR</a>"</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Exceptions Handling</p>
<p>For more information about configuring exceptions handling with an exceptions <code class="codeph">MAP</code> statement, see <a class="olink GWUAD501" target="_blank" href="../GWUAD/handling-processing-errors.htm#GWUAD501"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
MAPEXCEPTION (TARGET <span class="italic">exceptions_table</span>, INSERTALLRECORDS [, <span class="italic">exception_MAP_options</span>])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-DCB347FB-5433-4A71-B9BB-578C8464C0C8"><!-- --></a><code class="codeph">TARGET</code> <span class="italic"><code class="codeph">exceptions_table</code></span></dt>
<dd>
<p>The fully qualified name of the exceptions table. Standard Oracle GoldenGate rules for object names apply to the name of the exceptions table. See <a class="olink GWUAD153" target="_blank" href="../GWUAD/getting-started-oracle-goldengate-process-interfaces.htm#GWUAD153"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-EA5456CF-ACA3-4B0C-A271-0204F41BC57D"><!-- --></a><span class="italic"><code class="codeph">exception_MAP_options</code></span></dt>
<dd>
<p>Any valid options of the <code class="codeph">MAP</code> parameter that you want to apply to the exceptions handling.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-2BEC95C9-30E6-4E57-B3A8-5057641EA68D"><!-- --></a><code class="codeph">INSERTALLRECORDS</code></dt>
<dd>
<p>Applies all exceptions to the exceptions table as <code class="codeph">INSERT</code> operations. This parameter is required when using <code class="codeph">MAPEXCEPTION</code>.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>This is an example of how to use <code class="codeph">MAPEXCEPTION</code> for exceptions mapping. The <code class="codeph">MAP</code> and <code class="codeph">TARGET</code> clauses contain wildcarded source and target table names. Exceptions that occur when processing any table with a name beginning with <code class="codeph">TRX</code> will be captured to the <code class="codeph">fin.trxexceptions</code> table using the specified mapping.</p>
<pre dir="ltr">
MAP src.trx*, TARGET trg.*,
MAPEXCEPTION (TARGET fin.trxexceptions,
INSERTALLRECORDS,
COLMAP (USEDEFAULTS,
ACCT_NO = ACCT_NO,
OPTYPE = @GETENV ('LASTERR', 'OPTYPE'),
DBERR = @GETENV ('LASTERR', 'DBERRNUM'),
DBERRMSG = @GETENV ('LASTERR', 'DBERRMSG')
)
);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__MAPINVISIBLECOLUMNSNOMAPINVISIBLECO-1E74CCBF">
<p class="subhead1"><code class="codeph">MAPINVISIBLECOLUMNS | NOMAPINVISIBLECOLUMNS</code></p>
<p><code class="codeph">MAPINVISIBLECOLUMNS</code>&nbsp;and&nbsp;<code class="codeph">NOMAPINVISIBLECOLUMNS</code> are valid for <code class="codeph">MAP</code>.</p>
<p>Use&nbsp;<code class="codeph">MAPINVISIBLECOLUMNS</code>&nbsp;and&nbsp;<code class="codeph">NOMAPINVISIBLECOLUMNS</code>&nbsp;to control whether or not Replicat includes invisible columns in Oracle target tables for default column mapping. For invisible columns in Oracle target tables that use explicit column mapping, they are always mapped so do not require this option.</p>
<p><code class="codeph">MAPINVISIBLECOLUMNS</code>&nbsp;and&nbsp;<code class="codeph">NOMAPINVISIBLECOLUMNS</code>&nbsp;can be used in two different ways. When specified at a global level, one parameter remains in effect for all subsequent MAP statements, until the other parameter is specified. When used within a&nbsp;MAP&nbsp;statement, they override the global specifications</p>
<p>See &ldquo;<a href="mapinvisiblecolumns-nomapinvisiblecolumns.htm#GUID-80220346-5BFE-4951-A5B7-93585D64CE7E">MAPINVISIBLECOLUMNS | NOMAPINVISIBLECOLUMNS</a>&rdquo; for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790155">
<p class="subhead1"><code class="codeph">REPERROR (</code><span class="italic"><code class="codeph">error</code></span><code class="codeph">,</code> <span class="italic"><code class="codeph">response</code></span><code class="codeph">)</code></p>
<p><code class="codeph">REPERROR</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">REPERROR</code> to specify an error and a response that together control how Replicat responds to the error when executing the <code class="codeph">MAP</code> statement. You can use <code class="codeph">REPERROR</code> at the <code class="codeph">MAP</code> level to override and supplement global error handling rules set with the <code class="codeph">REPERROR</code> parameter at the root level of the parameter file. Multiple <code class="codeph">REPERROR</code> statements can be applied to the same <code class="codeph">MAP</code> statement to enable automatic, comprehensive management of errors and interruption-free replication processing.</p>
<p>For syntax and descriptions, see <span class="q">"<a href="reperror.htm#GUID-CB7CD1F1-EC5E-482A-9FDB-3BAA2ECF86B6">REPERROR</a>"</span>.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790154">
<p class="subhead1"><code class="codeph">RESOLVECONFLICT (</code><span class="italic"><code class="codeph">conflict_resolution_specification</code></span><code class="codeph">)</code></p>
<p><code class="codeph">RESOLVECONFLICT</code> is valid for <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">RESOLVECONFLICT</code> in a bi-directional or multi-master configuration to specify how Replicat handles conflicts on operations made to the tables in the <code class="codeph">MAP</code> statement.</p>
<p>Multiple resolutions can be specified for the same conflict type and are executed in the order listed in <code class="codeph">RESOLVECONFLICT</code>. Multiple resolutions are limited to <code class="codeph">INSERTROWEXISTS</code> and <code class="codeph">UPDATEROWEXISTS</code> conflicts only.</p>
<p><code class="codeph">RESOLVECONFLICT</code> can be used multiple times in a <code class="codeph">MAP</code> statement to specify different resolutions for different conflict types.</p>
<p>The following are the data types and platforms that are supported by <code class="codeph">RESOLVECONFLICT</code>.</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">RESOLVECONFLICT</code> supports all databases that are supported by Oracle GoldenGate for Windows and UNIX.</p>
</li>
<li>
<p>To use <code class="codeph">RESOLVECONFLICT</code>, the database must reside on a Windows, Linux, or UNIX system (including those running on NonStop OSS).</p>
</li>
<li>
<p>CDR supports data types that can be compared with simple SQL and without explicit conversion. See the individual parameter options for details.</p>
</li>
<li>
<p>Do not use <code class="codeph">RESOLVECONFLICT</code> for columns that contain LOBs, abstract data types (ADT), or user-defined types (UDT).</p>
</li>
<li>
<p>Do not use <code class="codeph">RESOLVECONFLICT</code> for BigNum data types in a SQL/MX database.</p>
</li>
</ul>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information About Configuring Conflict Resolution</p>
<p>See <a class="olink GWUAD282" target="_blank" href="../GWUAD/configuring-oracle-goldengate-active-active-high-availability.htm#GWUAD282"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for detailed instructions on configuring bi-directional replication and conflict resolution, including use cases and examples.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
RESOLVECONFLICT (
{INSERTROWEXISTS | UPDATEROWEXISTS | UPDATEROWMISSING | 
   DELETEROWEXISTS | DELETEROWMISSING} 
( {DEFAULT | <span class="italic">resolution_name</span>},
  {USEMAX (<span class="italic">resolution_column</span>) | USEMAXEQ (<span class="italic">resolution_column</span>) | USEMIN (<span class="italic">resolution_column</span>) | USEMINEQ (<span class="italic">resolution_column</span>) | USEDELTA |
     DISCARD | OVERWRITE | IGNORE} 
 )   
[, COLS (<span class="italic">column</span>[,...])]
)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-106B7D35-2013-4EAB-A3A2-06D2E94A6050"><!-- --></a><code class="codeph">INSERTROWEXISTS | UPDATEROWEXISTS | UPDATEROWMISSING |</code></dt>
<dt class="dlterm"><code class="codeph">DELETEROWEXISTS | DELETEROWMISSING</code></dt>
<dd>
<p>The type of conflict that this resolution handles.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-F5C11A35-D3AA-4FB8-9534-887F7FB1932C"><!-- --></a><code class="codeph">INSERTROWEXISTS</code></dt>
<dd>
<p>An inserted row violates a uniqueness constraint on the target.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-3313AE47-3DE9-42F1-9E76-E9A344E9FE8D"><!-- --></a><code class="codeph">UPDATEROWEXISTS</code></dt>
<dd>
<p>An updated row exists on the target, but one or more columns have a before image in the trail that is different from the current value in the database.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-E9DEBD9F-2680-4C8C-ACD5-CB7E8205C5A4"><!-- --></a><code class="codeph">UPDATEROWMISSING</code></dt>
<dd>
<p>An updated row does not exist in the target.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-5C8A8C9D-D518-4FC3-AB8C-3E5BE4D16CD1"><!-- --></a><code class="codeph">DELETEROWEXISTS</code></dt>
<dd>
<p>A deleted row exists in the target, but one or more columns have a before image in the trail that is different from the current value in the database.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C7F73DBC-3587-49AD-AF77-2C5EE6DB35C8"><!-- --></a><code class="codeph">DELETEROWMISSING</code></dt>
<dd>
<p>A deleted row does not exist in the target.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-0E23614E-535B-4F76-86D9-6FD3AAD72142"><!-- --></a><code class="codeph">DEFAULT |</code> <span class="italic"><code class="codeph">resolution_name</code></span></dt>
<dd>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-5823625C-97E4-46A0-8861-176B6DC4821E"><!-- --></a><code class="codeph">DEFAULT</code></dt>
<dd>
<p>The default column group. The resolution that is associated with the <code class="codeph">DEFAULT</code> column group is used for all columns that are not in an explicitly named column group. You must define a <code class="codeph">DEFAULT</code> column group.</p>
</dd>
</dl>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B7446E36-868C-48FA-B219-C49CBD3114F7"><!-- --></a><span class="italic"><code class="codeph">resolution_name</code></span></dt>
<dd>
<p>A name for a specific column group that is linked to a specific resolution type. Supply a name that identifies the resolution type. Valid values are alphanumeric characters. Avoid spaces and special characters, but underscores are permitted, for example:</p>
<pre dir="ltr">
delta_res_method
</pre>
<p>Use either a named resolution or <code class="codeph">DEFAULT</code>, but not both.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-B83A8793-5683-4565-9BB5-8CF966CE5E0D"><!-- --></a><code class="codeph">USEMAX (</code><span class="italic"><code class="codeph">resolution_column</code></span><code class="codeph">) | USEMAXEQ (</code><span class="italic"><code class="codeph">resolution_column</code></span><code class="codeph">) | USEMIN (</code><span class="italic"><code class="codeph">resolution_column</code></span><code class="codeph">) | USEMINEQ (</code><span class="italic"><code class="codeph">resolution_column</code></span><code class="codeph">) | USEDELTA |</code></dt>
<dt class="dlterm"><code class="codeph">DISCARD | OVERWRITE | IGNORE</code></dt>
<dd>
<p>The conflict-handler logic that is used to resolve the conflict. Valid resolutions are:</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-61703E2D-833C-4831-9574-B99B59594A8D"><!-- --></a><code class="codeph">USEMAX</code></dt>
<dd>
<p>If the value of <span class="italic"><code class="codeph">resolution_column</code></span> in the trail record is greater than the value of the column in the database, the appropriate action is performed.</p>
<ul style="list-style-type: disc;">
<li>
<p>(<code class="codeph">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code class="codeph">UPDATEROWEXISTS</code> conflict) Apply the trail record as an update.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-E52824F1-23DF-4CCF-BD04-A3E979CE7AD3"><!-- --></a><code class="codeph">USEMAXEQ</code></dt>
<dd>
<p>If the value of <span class="italic"><code class="codeph">resolution_column</code></span> in the trail record is greater than or equal to the value of the column in the database, the appropriate action is performed.</p>
<ul style="list-style-type: disc;">
<li>
<p>(<code class="codeph">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code class="codeph">UPDATEROWEXISTS</code> conflict) Apply the trail record as an update.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-75CD0408-C944-49E2-BAAF-3CECEA0672C7"><!-- --></a><code class="codeph">USEMIN</code></dt>
<dd>
<p>If the value of <span class="italic"><code class="codeph">resolution_column</code></span> in the trail record is less than the value of the column in the database, the appropriate action is performed:</p>
<ul style="list-style-type: disc;">
<li>
<p>(<code class="codeph">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code class="codeph">UPDATEROWEXISTS</code> conflict) Apply the update from the trail record.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-666FC341-C7FF-40DE-B407-3A9002DF1245"><!-- --></a><code class="codeph">USEMINEQ</code></dt>
<dd>
<p>If the value of <span class="italic"><code class="codeph">resolution_column</code></span> in the trail record is less than or equal to the value of the column in the database, the appropriate action is performed:</p>
<ul style="list-style-type: disc;">
<li>
<p>(<code class="codeph">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code class="codeph">UPDATEROWEXISTS</code> conflict) Apply the update from the trail record.</p>
</li>
</ul>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-2444D1A3-BCCB-434D-BC53-0889D212429E"><!-- --></a><span class="italic"><code class="codeph">resolution_column</code></span></dt>
<dd>
<p>The name of a <code class="codeph">NOT NULL</code> column that serves as the resolution column. This column must be part of the column group that is associated with this resolution. The value of the resolution column compared to the current value in the target database determines how a resolution should be applied. The after image of the resolution column is used for the comparison, if available; otherwise the before image value is used. Use a column that can be compared through simple SQL:</p>
<ul style="list-style-type: disc;">
<li>
<p><code class="codeph">NUMERIC</code></p>
</li>
<li>
<p><code class="codeph">DATE</code></p>
</li>
<li>
<p><code class="codeph">TIMESTAMP</code></p>
</li>
<li>
<p><code class="codeph">CHAR/NCHAR</code></p>
</li>
<li>
<p><code class="codeph">VARCHAR/ NVARCHAR</code></p>
</li>
</ul>
<p>To use a latest-timestamp resolution, use a timestamp column as the <span class="italic"><code class="codeph">resolution_column</code></span> and set the timestamp column to the current time when a row is inserted or updated. If possible, define the resolution column with the <code class="codeph">SYSTIMESTAMP</code> data type, which supports fractional seconds. When comparisons are performed with sub-second granularity, there is little need for tie-breaking conflict handlers that resolve cases where the value of the resolution column is identical in both trail and target. If you ensure that the value of the timestamp column can only increase or only decrease (depending on the resolution), then <code class="codeph">USEMAX</code> and <code class="codeph">USEMIN</code> does not lead to data divergence.</p>
<div class="infobox-note" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-DA0A1C5B-F5B3-44EB-913F-A6507A930215">
<p class="notep1">Note:</p>
<p>Do not use a primary key column as the resolution column in a <code class="codeph">USEMAX</code> statement for the <code class="codeph">UPDATEROWEXISTS</code> conflict. Otherwise, Replicat abends with an error similar to the following:</p>
<pre dir="ltr">
2013-04-04 10:18:38  ERROR   OGG-01922  Missing  RESOLUTION COLUMN NAME while mapping to target table "FIN"."ACCT".
</pre></div>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-1124E051-F4B1-4A86-9E19-6890F95B77F2"><!-- --></a><code class="codeph">USEDELTA</code></dt>
<dd>
<p>(<code class="codeph">UPDATEROWEXISTS</code> conflict only) Add the difference between the before and after values in the trail record to the current value of the column in the target database. If any of the values is <code class="codeph">NULL</code>, an error is raised. Base <code class="codeph">USEDELTA</code> on columns that contain <code class="codeph">NUMERIC</code> data types. <code class="codeph">USEDELTA</code> is useful in a multi-node configuration when a row is getting simultaneously updated on multiple nodes. It propagates only the difference in the column values to the other nodes, so that all nodes become synchronized.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-5AB18E5A-5B66-4C4B-AAB8-62F9B1D5A3A6"><!-- --></a><code class="codeph">DISCARD</code></dt>
<dd>
<p>(Valid for all conflict types) Retain the current value in the target database, and write the data in the trail record to the discard file.</p>
<p>Use <code class="codeph">DISCARD</code> with caution, because it can lead to data divergence.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-047EC1AA-3A7D-4A03-9021-8300D188BB3D"><!-- --></a><code class="codeph">OVERWRITE</code></dt>
<dd>
<p>(Valid for all conflict types except <code class="codeph">DELETEROWMISSING</code>) Apply the trail record as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>(<code class="codeph">INSERTROWEXISTS</code> conflict) Apply the trail record but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code class="codeph">UPDATEROWEXISTS</code> conflict) Apply the update from the trail record.</p>
</li>
<li>
<p>(<code class="codeph">UPDATEROWMISSING</code> conflict) Apply the trail record but convert the missing <code class="codeph">UPDATE</code> to an <code class="codeph">INSERT</code> by using the modified columns from the after image and the unmodified columns from the before image. To convert an update to an insert, the before image of all columns of the row must be available in the trail. Use supplemental logging if the database does not log before images by default, and specify <code class="codeph">ALL</code> for the Extract <code class="codeph">GETBEFORECOLS</code> parameter<code class="codeph">.</code></p>
</li>
<li>
<p>(<code class="codeph">DELETEROWEXISTS</code> conflict) Apply the delete from the trail record, but use only the primary key columns in the <code class="codeph">WHERE</code> clause.</p>
</li>
</ul>
<p>Use <code class="codeph">OVERWRITE</code> with caution, because it can lead to data divergence.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-F82478C0-B86B-44F6-801C-5DED6225E04C"><!-- --></a><code class="codeph">IGNORE</code></dt>
<dd>
<p>(Valid for all conflict types) Retain the current value in the target database, and ignore the trail record: Do not apply to the target table or a discard file.</p>
</dd>
</dl>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-0FC9D8C1-9CB5-441C-9B3A-60B2AF438C43"><!-- --></a><code class="codeph">COLS (</code><span class="italic"><code class="codeph">column</code></span><code class="codeph">[, ...])</code></dt>
<dd>
<p>A non-default column group. This is a list of columns in the target database (after mapping) that are linked to, and operated upon by, a specific resolution type. If no column group is specified for a conflict, then all columns are affected by the resolution that is specified for the given conflict.</p>
<p>Alternatively, you can specify a <code class="codeph">DEFAULT</code> column group, which includes all columns that are not listed in another column group. See the <code class="codeph">DEFAULT</code> option.</p>
<p>You can specify multiple column groups, each with a different resolution. For example, you could use <code class="codeph">OVERWRITE</code> for <code class="codeph">col2</code> and <code class="codeph">col3</code>, and you could use <code class="codeph">USEDELTA</code> for <code class="codeph">col4</code>. No column in any group can be in any other group. Conflicts for columns in different column groups are resolved separately according to the specified resolution, and in the order listed.</p>
<p>Column groups work as follows:</p>
<ul style="list-style-type: disc;">
<li>
<p>For <code class="codeph">INSERTROWEXISTS</code> and <code class="codeph">UPDATEROWEXISTS</code> conflicts, you can use different column groups to specify more than one of these conflict types and resolutions per table. Conflicts for columns in different column groups are resolved separately, according to the conflict resolution method specified for the column group.</p>
</li>
<li>
<p>For <code class="codeph">UPDATEROWMISSING</code>, <code class="codeph">DELETEROWEXISTS</code>, and <code class="codeph">DELETEROWMISSING</code>, you can use only one column group, and all columns of the table must be in this column group (considered the <span class="italic">default</span> column group).</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Examples</p>
<p>The following examples are explained in detail in <a class="olink GWUAD315" target="_blank" href="../GWUAD/configuring-conflict-detection-and-resolution.htm#GWUAD315"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-698738B7-DA67-44E5-9376-8F25C732C6F6"><!-- --></a>Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example demonstrates all conflict types with <code class="codeph">USEMAX</code>, <code class="codeph">OVERWRITE</code>, <code class="codeph">DISCARD</code>.</p>
<pre dir="ltr">
MAP fin.src, TARGET fin.tgt,
    COMPARECOLS (ON UPDATE ALL, ON DELETE ALL),
    RESOLVECONFLICT (UPDATEROWEXISTS, (DEFAULT, USEMAX (last_mod_time)),
    RESOLVECONFLICT (INSERTROWEXISTS, (DEFAULT, USEMAX (last_mod_time)),
    RESOLVECONFLICT (DELETEROWEXISTS, (DEFAULT, OVERWRITE)),
    RESOLVECONFLICT (UPDATEROWMISSING, (DEFAULT, OVERWRITE)),
    RESOLVECONFLICT (DELETEROWMISSING, (DEFAULT, DISCARD)),
    );
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7D06510F-21A3-4B53-90AE-2354A2E0A113"><!-- --></a>Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example demonstrates <code class="codeph">UPDATEROWEXISTS</code> with <code class="codeph">USEDELTA</code> and <code class="codeph">USEMAX</code>.</p>
<pre dir="ltr">
MAP fin.src, TARGET fin.tgt,
    COMPARECOLS
    (ON UPDATE KEYINCLUDING (address, phone, salary, last_mod_time),
    ON DELETE KEYINCLUDING (address, phone, salary, last_mod_time)),
    RESOLVECONFLICT (
    UPDATEROWEXISTS,
    (delta_res_method, USEDELTA, COLS (salary)),
    (DEFAULT, USEMAX (last_mod_time)));
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-4F2053E8-9EBA-4512-A9B2-A47534815BEE"><!-- --></a>Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example demonstrates <code class="codeph">UPDATEROWEXISTS</code> with <code class="codeph">USEDELTA</code>, <code class="codeph">USEMAX</code>, and <code class="codeph">IGNORE</code>.</p>
<pre dir="ltr">
MAP fin.src, TARGET fin.tgt,
    COMPARECOLS
    (ON UPDATE ALLEXCLUDING (comment)),
    RESOLVECONFLICT (
    UPDATEROWEXISTS,
    (delta_res_method, USEDELTA, COLS (salary, balance)),
    (max_res_method, USEMAX (last_mod_time), COLS (address, last_mod_time)),
    (DEFAULT, IGNORE));
</pre></dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2312155">
<p class="subhead1"><code class="codeph">SQLEXEC (</code><span class="italic"><code class="codeph">SQL_specification</code></span><code class="codeph">)</code></p>
<p><code class="codeph">SQLEXEC</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">SQLEXEC</code> to execute a SQL stored procedure or query from within a <code class="codeph">MAP</code> statement during Oracle GoldenGate processing. <code class="codeph">SQLEXEC</code> enables Oracle GoldenGate to communicate directly with the database to perform any work that is supported by the database. This work can be part of the synchronization process, such as retrieving values for column conversion, or it can be independent of extracting or replicating data, such as executing a stored procedure that executes an action within the database.</p>
<p>See <span class="q">"<a href="sqlexec.htm#GUID-34A0589B-1450-4BC9-A573-683895AAA1EC">SQLEXEC</a>"</span> for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGGGEIJ">
<p class="subhead1"><code class="codeph">SQLPREDICATE 'WHERE</code> <span class="italic"><code class="codeph">where_clause</code></span><code class="codeph">'</code></p>
<p><code class="codeph">SQLPREDICATE</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use <code class="codeph">SQLPREDICATE</code> to include a conventional SQL <code class="codeph">WHERE</code> clause in the <code class="codeph">SELECT</code> statement that Extract uses when selecting data from a table in preparation for an initial load. <code class="codeph">SQLPREDICATE</code> forces the records returned by the selection to be ordered by the key values.</p>
<p><code class="codeph">SQLPREDICATE</code> is a faster selection method for initial loads than the <code class="codeph">WHERE</code> or <code class="codeph">FILTER</code> options. It affects the SQL statement directly and does not require Extract to fetch all records before filtering them.</p>
<p>For Oracle tables, <code class="codeph">SQLPREDICATE</code> reduces the amount of data that is stored in the undo segment, which can reduce the incidence of snapshot-too-old errors. This is useful when loading very large tables.</p>
<p>By using a <code class="codeph">SQLPREDICATE</code> clause, you can partition the rows of a large table among two or more parallel Extract processes. This configuration enables you to take advantage of parallel delivery load processing as well.</p>
<p><code class="codeph">SQLPREDICATE</code> also enables you to select data based on a timestamp or other criteria to filter the rows that are extracted and loaded to the target table. <code class="codeph">SQLPREDICATE</code> can be used for <code class="codeph">ORDER BY</code> clauses or any other type of selection clause.</p>
<p>Make certain that the <code class="codeph">WHERE</code> clause contains columns that are part of a key or index. Otherwise, Extract performs a full table scan, which reduces the efficiency of the <code class="codeph">SELECT</code> statement.</p>
<p><code class="codeph">SQLPREDICATE</code> is valid for Oracle, DB2 LUW, DB2 on z/OS, SQL Server, and Teradata databases. Do not use <code class="codeph">SQLPREDICATE</code> for an Extract group that is configured to synchronize transactional changes. It is only appropriate for an initial load Extract, because it re quires a <code class="codeph">SELECT</code> statement that selects records directly from tables.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
TABLE <span class="italic">source_table</span>, SQLPREDICATE 'WHERE <span class="italic">where_clause</span>';
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-67284353-11DD-483E-BFD3-D86EFEF18330"><!-- --></a><code class="codeph">WHERE</code></dt>
<dd>
<p>This is a required keyword.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-3F24A815-03C7-4D00-861F-A960A0EF2A3D"><!-- --></a><span class="italic"><code class="codeph">where_clause</code></span></dt>
<dd>
<p>A valid SQL <code class="codeph">WHERE</code> clause that selects records from the source tables.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<pre dir="ltr">
TABLE hr.emp, SQLPREDICATE 'WHERE state = 'CO' and city = 'DENVER''
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABHHEHH">
<p class="subhead1"><code class="codeph">THREAD (</code><span class="italic"><code class="codeph">thread_ID</code></span><code class="codeph">)</code></p>
<p><code class="codeph">THREAD</code> is valid for <code class="codeph">MAP</code>. This option is valid when Replicat is in coordinated mode.</p>
<p>Use <code class="codeph">THREAD</code> to specify that all of the object or objects in the same <code class="codeph">MAP</code> statement are to be processed by the specified Replicat thread. The specified thread handles filtering, manipulation, delivery to the target, error handling, and other work that is configured for those objects. Wildcards can be used in the <code class="codeph">TARGET</code> clause when <code class="codeph">THREAD</code> is used.</p>
<p>All tables that have referential dependencies among one another must be mapped in the same thread. For example, if tables <code class="codeph">scott.cust</code> and <code class="codeph">scott.ord</code> have a foreign-key relationship, the following is a possible mapping:</p>
<pre dir="ltr">
MAP scott.cust, TARGET scott.cust, THREAD (5);
MAP scott.ord, TARGET scott.ord, THREAD (5);
</pre>
<p>The thread with the lowest thread ID always processes barrier transactions if the <code class="codeph">THREAD</code> or <code class="codeph">THREADRANGE</code> option is omitted. Additionally, and work that is not explicitly assigned to a thread is processed through this thread. For example, if there are threads with IDs ranging from 1 to 10, barrier and non-assigned transactions are performed by thread 1.</p>
<p>To process a <code class="codeph">MAP</code> statement among multiple threads, see <a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABIEAFI">THREADRANGE (thread_range, column_list)</a>. <code class="codeph">THREAD</code> and <code class="codeph">THREADRANGE</code> are mutually exclusive options. Do not use them together in the same <code class="codeph">MAP</code> statement.</p>
<p>For more information about Replicat modes, see <a class="olink GIORA216" target="_blank" href="../GIORA/choosing-capture-and-apply-modes.htm#GIORA216">"Deciding Which Apply Method to Use"</a> in <span class="italic"><span><cite>Installing and Configuring Oracle GoldenGate for Oracle Database</cite></span></span> and <span class="q">"<a href="batchsql.htm#GUID-2ED88418-6ACB-484D-B140-364232EC419A">BATCHSQL</a>"</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
THREAD (thread_ID)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-F14BA5EC-88BA-4C63-AE11-6A6985F6D4A5"><!-- --></a><span class="italic"><code class="codeph">thread_ID</code></span></dt>
<dd>
<p>A numerical identifier for the thread that will process this <code class="codeph">MAP</code> statement. Valid values are 1 through the value that was specified with the <code class="codeph">MAXTHREADS</code> option of the <code class="codeph">ADD REPLICAT</code> command that created this group. You can use the <code class="codeph">INFO REPLICAT</code> command to verify the maximum number of threads allowed for a Replicat group. When specifying thread IDs, the following must be true:</p>
<ul style="list-style-type: disc;">
<li>
<p>The <span class="italic">total number</span> of threads specified across all <code class="codeph">MAP</code> statements of a Replicat group cannot exceed the value of <code class="codeph">MAXTHREADS</code>.</p>
</li>
<li>
<p>No single <span class="italic"><code class="codeph">thread_ID</code></span> value in the Replicat group can be higher than the value of <code class="codeph">MAXTHREADS</code>. For example, if <code class="codeph">MAXTHREADS</code> is 25, there cannot be a <span class="italic"><code class="codeph">thread_ID</code></span> of 26 or higher.</p>
</li>
</ul>
<p>If <code class="codeph">MAXTHREADS</code> was not used, the default maximum number of threads is 25.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Examples</p>
<p>The following examples show some ways to use the <code class="codeph">THREAD</code> option.</p>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-4B5D2728-F0FB-4F72-B689-C491B31CBD19"><!-- --></a>Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In this example, thread 1 processes table <code class="codeph">cust</code>.</p>
<pre dir="ltr">
MAP scott.cust, TARGET scott.cust, THREAD (1);
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-D5744AC5-BB2F-434F-9D97-F4FC9F65659B"><!-- --></a>Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In this example, thread 1 processes all of the tables in the <code class="codeph">scott</code> schema.</p>
<pre dir="ltr">
MAP scott.*, TARGET scott.*, THREAD (1);
</pre></dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7B1A83E0-1204-4E89-B520-9F4F7CD1D564"><!-- --></a>Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In this example, the <code class="codeph">orders</code> table is partitioned among two <code class="codeph">MAP</code> statements through the use of <code class="codeph"><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016736">FILTER (filter_clause)</a></code> and the <code class="codeph">@RANGE</code> function. For more information about <code class="codeph">@RANGE</code>, see <span class="q">"<a href="range.htm#GUID-89A42E4F-E6B0-4FEB-AFD8-97B04EC6C968">RANGE</a>"</span>.</p>
<pre dir="ltr">
MAP scott.orders, TARGET scott.orders, FILTER (@RANGE (1, 2, OID)), THREAD (1);
MAP scott.orders, TARGET scott.orders, FILTER (@RANGE (2, 2, OID)), THREAD (2);
</pre></dd>
</dl>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABIEAFI">
<p class="subhead1"><code class="codeph">THREADRANGE (</code><span class="italic"><code class="codeph">thread_range</code></span><code class="codeph">,</code> <span class="italic"><code class="codeph">column_list</code></span><code class="codeph">)</code></p>
<p><code class="codeph">THREADRANGE</code> is valid for <code class="codeph">MAP</code>. This option is valid when Replicat is in coordinated mode.</p>
<p>Use <code class="codeph">THREADRANGE</code> to specify that the workload of the target table is to be partitioned evenly among a range of Replicat threads, based on the value of a specified column or columns. For example, if the partitioning is based on the value of a column named <code class="codeph">ID</code>, and the <code class="codeph">THREADRANGE</code> value is 1-3, then thread 1 processes rows with <code class="codeph">ID</code> values from 1 through 10, thread 2 processes rows with <code class="codeph">ID</code> values from 11 through 20, and thread 3 processes rows with <code class="codeph">ID</code> values from 21 through 30. The partitioning may not be as absolutely even as shown in the preceding example, depending on the initial calculation of the workload, but it is coordinated so that same row is always processed by the same thread. Each specified thread handles filtering, manipulation, error handling, delivery to the target, and other work for its range of rows.</p>
<p>Partitioning a table across a range of threads may improve apply performance for very large tables or tables that frequently incur long-running transactions or heavy volume, but can be used in other cases, as well. You can process more than one table through the same range of threads.</p>
<p>A wildcarded <code class="codeph">TARGET</code> clause can be used when <code class="codeph">THREADRANGE</code> is used if the optional column list is omitted. When using a column list, use separate explicit <code class="codeph">MAP</code> statements for each table that is using the same thread range.</p>
<p>To process a <code class="codeph">MAP</code> statement with one specific thread, see <a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABHHEHH">THREAD (thread_ID)</a>. <code class="codeph">THREAD</code> and <code class="codeph">THREADRANGE</code> are mutually exclusive options. Do not use them together in the same <code class="codeph">MAP</code> statement.</p>
<p>Do not specify tables that have referential dependencies among one another in a thread range. Use the <code class="codeph">THREAD</code> option and process all of those tables with the same thread.</p>
<p>Do not use <code class="codeph">THREADRANGE</code> to partition sequences. If coordination is required, for example when a sequence is part of a <code class="codeph">SQLEXEC</code> operation, partition the sequence work to one thread with the <code class="codeph">THREAD</code> option.</p>
<p>The thread with the lowest thread ID always processes barrier transactions if the <code class="codeph">THREAD</code> or <code class="codeph">THREADRANGE</code> option is omitted. Additionally, and work that is not explicitly assigned to a thread is processed through this thread. For example, if there are threads with IDs ranging from 1 to 10, barrier and non-assigned transactions are performed by thread 1.</p>
<p>For more information about Replicat modes, see <a class="olink GIORA216" target="_blank" href="../GIORA/choosing-capture-and-apply-modes.htm#GIORA216">"Deciding Which Apply Method to Use"</a> in <span class="italic"><span><cite>Installing and Configuring Oracle GoldenGate for Oracle Database</cite></span></span> and <span class="q">"<a href="batchsql.htm#GUID-2ED88418-6ACB-484D-B140-364232EC419A">BATCHSQL</a>"</span>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
THREADRANGE (<span class="italic">lowID</span>-<span class="italic">highID</span>, [<span class="italic">column</span>[, <span class="italic">column</span>][, ...]])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-C357670A-443B-44B3-9816-E7C225548819"><!-- --></a><span class="italic"><code class="codeph">lowID</code></span></dt>
<dd>
<p>The lowest thread identifier of this range. Valid values are 1 through 500.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7BAB2BCF-736D-411F-AE8E-885A2151BA12"><!-- --></a><span class="italic"><code class="codeph">highID</code></span></dt>
<dd>
<p>The highest thread identifier of this range, which must be a higher number than <span class="italic"><code class="codeph">lowID</code></span>. Valid values are <span class="italic"><code class="codeph">lowID</code></span><code class="codeph">+1</code> through 500. The number of threads in the range cannot exceed the value that was specified with the <code class="codeph">MAXTHREADS</code> option of the <code class="codeph">ADD REPLICAT</code> command. If <code class="codeph">MAXTHREADS</code> was not used, the default maximum number of threads is 25.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-3B4BAD16-F59B-4C05-9FD7-256776CE4AE1"><!-- --></a><code class="codeph">[</code><span class="italic"><code class="codeph">column</code></span><code class="codeph">[,</code> <span class="italic"><code class="codeph">column</code></span><code class="codeph">][, ...]]</code></dt>
<dd>
<p>Optional. Specifies one or more unique columns on which to base the row partitioning. To specify multiple columns, use a comma-delimited list, such as <code class="codeph">col1, col2, col3</code>. When this option is omitted, the partitioning among the threads is based by default on the following columns, in the order of preference shown:</p>
<ul style="list-style-type: disc;">
<li>
<p>Primary key</p>
</li>
<li>
<p><code class="codeph">KEYCOLS</code> clause in the same <code class="codeph">MAP</code> statement</p>
</li>
<li>
<p>All of the columns of the table that are supported by Oracle GoldenGate for use as a key.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The following example divides the <code class="codeph">orders</code> and <code class="codeph">order_lines</code> tables between the same two threads, based on the value of the <code class="codeph">OID</code> column.</p>
<pre dir="ltr">
MAP scott.orders, TARGET scott.orders, THREADRANGE (1-2, OID);
MAP scott.order_lines, TARGET scott.order_lines, THREADRANGE (1-2, OID);
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__CEGHEJII">
<p class="subhead1"><code class="codeph">TOKENS (</code><span class="italic"><code class="codeph">token_definition</code></span><code class="codeph">)</code></p>
<p><code class="codeph">TOKENS</code> is valid for <code class="codeph">TABLE</code>.</p>
<p>Use <code class="codeph">TOKENS</code> to define a user token and associate it with data. Tokens enable you to extract and store data within the user token area of a trail record header. Token data can be retrieved and used in many ways to customize the way that Oracle GoldenGate delivers data. For example, you can use token data in column maps, stored procedures called by <code class="codeph">SQLEXEC</code>, or macros.</p>
<p>To use the defined token data in target tables, use the <code class="codeph">@TOKEN</code> column-conversion function in the <code class="codeph">COLMAP</code> clause of a Replicat <code class="codeph">MAP</code> statement. The <code class="codeph">@TOKEN</code> function maps the name of a token to a target column.</p>
<p>Do not use this option for tables being processed in pass-through mode by a data-pump Extract group.</p>
<p>The character set of token data is not converted. The token must be in the character set of the source database for Extract and in the character set of the target database for Replicat.</p>
<p>Do not use this option for source tables that are encoded as EBCDIC on a z/OS system if the target tables are not EBCDIC.</p>
<p>For more information about using tokens, see <a class="olink GWUAD467" target="_blank" href="../GWUAD/mapping-and-manipulating-data.htm#GWUAD467"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a>.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
TOKENS (<span class="italic">token_name</span> = <span class="italic">token_data</span> [, ...])
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-3E1428F4-5283-4A05-81FB-041D1DA9CC67"><!-- --></a><span class="italic"><code class="codeph">token_name</code></span></dt>
<dd>
<p>A name of your choice for the token. It can be any number of valid characters and is not case-sensitive. Multi-byte names are not supported.</p>
</dd>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-AF0E68BA-7834-4083-92F4-7DAE24885396"><!-- --></a><span class="italic"><code class="codeph">token_data</code></span></dt>
<dd>
<p>Any valid character string of up to 2000 bytes. The data can be either a literal that is enclosed within single quotes (or double quotes if <code class="codeph">NOUSEANSISQLQUOTES</code> is in use) or the result of an Oracle GoldenGate column-conversion function. See <span class="q">"<a href="useansisqlquotes-nouseansisqlquotes.htm#GUID-6A22575F-657B-49DA-B769-57C06C3AE7A3">USEANSISQLQUOTES | NOUSEANSISQLQUOTES</a>"</span> for more information.</p>
</dd>
</dl>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The following creates tokens named <code class="codeph">TK-OSUSER</code>, <code class="codeph">TK-GROUP</code>, and <code class="codeph">TK-HOST</code> and maps them to token data obtained with the <code class="codeph">@GETENV</code> function.</p>
<pre dir="ltr">
TABLE ora.oratest, TOKENS (
TK-OSUSER = @GETENV ('GGENVIRONMENT' , 'OSUSERNAME'),
TK-GROUP = @GETENV ('GGENVIRONMENT' , 'GROUPNAME')
TK-HOST =  @GETENV ('GGENVIRONMENT' , 'HOSTNAME'));
</pre></div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790153">
<p class="subhead1"><code class="codeph">TRIMSPACES | NOTRIMSPACES</code></p>
<p><code class="codeph">TRIMSPACES</code> and <code class="codeph">NOTRIMSPACES</code> are valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">TRIMSPACES</code> and <code class="codeph">NOTRIMSPACES</code> at the root level of a parameter file or within a <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement to control whether or not trailing spaces in a source <code class="codeph">CHAR</code> column are truncated when applied to a target <code class="codeph">CHAR</code> or <code class="codeph">VARCHAR</code> column. The default is <code class="codeph">TRIMSPACES</code>.</p>
<p>See <span class="q">"<a href="trimspaces-notrimspaces.htm#GUID-1EAFA73F-B78C-4E9C-A9F5-953E9EECA155">TRIMSPACES | NOTRIMSPACES</a>"</span> for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2790152">
<p class="subhead1"><code class="codeph">TRIMVARSPACES | NOTRIMVARSPACES</code></p>
<p><code class="codeph">TRIMVARSPACES</code> and <code class="codeph">NOTRIMVARSPACES</code> are valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">TRIMVARSPACES</code> and <code class="codeph">NOTRIMVARSPACES</code> at the root level of a parameter file or within a <code class="codeph">TABLE</code> or <code class="codeph">MAP</code> statement to control whether or not trailing spaces in a source <code class="codeph">VARCHAR</code> column are truncated when applied to a target <code class="codeph">CHAR</code> or <code class="codeph">VARCHAR</code> column. The default is <code class="codeph">NOTRIMVARSPACES</code>.</p>
<p>See <span class="q">"<a href="trimvarspaces-notrimvarspaces.htm#GUID-771C3CAA-C224-48E0-888E-56F155D56D09">TRIMVARSPACES | NOTRIMVARSPACES</a>"</span> for syntax and usage.</p>
</div>
<!-- class="section" -->
<div class="section" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__I2016740">
<p class="subhead1"><code class="codeph">WHERE (</code><span class="italic"><code class="codeph">clause</code></span><code class="codeph">)</code></p>
<p><code class="codeph">WHERE</code> is valid for <code class="codeph">TABLE</code> and <code class="codeph">MAP</code>.</p>
<p>Use <code class="codeph">WHERE</code> to select records based on a conditional statement. <code class="codeph">WHERE</code> does not support the following:</p>
<ul style="list-style-type: disc;">
<li>
<p>Columns that have a multi-byte character set or a character set that is incompatible with the character set of the local operating system.</p>
</li>
<li>
<p>The evaluation of the before image of a primary key column in the conditional statement as part of a primary key update operation.</p>
</li>
</ul>
<p>Enclose literals in single quotes. Specify case-sensitive column names as they are stored in the database, and enclose them in double quotes if the database requires quotes to enforce case-sensitivity (such as Oracle).</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Getting More Information about Record Filtering</p>
<p>See <a class="olink GWUAD426" target="_blank" href="../GWUAD/mapping-and-manipulating-data.htm#GWUAD426"><span class="italic"><span><cite>Administering Oracle GoldenGate for Windows and UNIX</cite></span></span></a> for more information about <code class="codeph">WHERE</code> and other filtering options.</p>
</div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Syntax</p>
<pre dir="ltr">
WHERE (<span class="italic">clause</span>)
</pre>
<dl>
<dt class="dlterm"><a id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__GUID-7EEBFD62-4CF4-403B-A08D-CDEB3AB24FF1"><!-- --></a><span class="italic"><code class="codeph">clause</code></span></dt>
<dd>
<p>Selects records based on a condition, such as:</p>
<pre dir="ltr">
WHERE (branch = 'NY')
</pre>
<p><a href="table-map.htm#GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABCIFJI" title="This table lists the permissible WHERE operators and gives examples of each.">Table 3-35</a> shows permissible <code class="codeph">WHERE</code> operators.</p>
</dd>
</dl>
<div class="tblformal" id="GUID-C2356234-3780-48EE-9E7A-F21DC352638C__BABCIFJI">
<p class="titleintable">Table 3-35 Permissible WHERE Operators</p>
<table class="cellalignment463" title="Permissible WHERE Operators" summary="This table lists the permissible WHERE operators and gives examples of each.">
<thead>
<tr class="cellalignment454">
<th class="cellalignment601" id="d109094e6290">Operator</th>
<th class="cellalignment602" id="d109094e6293">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6298" headers="d109094e6290">
<p>Column names</p>
</td>
<td class="cellalignment604" headers="d109094e6298 d109094e6293">
<pre dir="ltr">
PRODUCT_AMT
"Product_Amt"
</pre></td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6305" headers="d109094e6290">
<p>Numeric values</p>
</td>
<td class="cellalignment604" headers="d109094e6305 d109094e6293">
<pre dir="ltr">
-123, 5500.123
</pre></td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6312" headers="d109094e6290">
<p>Literal strings enclosed in single quotes</p>
</td>
<td class="cellalignment604" headers="d109094e6312 d109094e6293">
<pre dir="ltr">
 'AUTO', 'Ca'
</pre></td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6319" headers="d109094e6290">
<p>Column tests</p>
</td>
<td class="cellalignment604" headers="d109094e6319 d109094e6293">
<p><code class="codeph">@NULL</code>, <code class="codeph">@PRESENT</code>, <code class="codeph">@ABSENT</code> (column is null, present or absent in the record). These tests are built into Oracle GoldenGate.</p>
</td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6334" headers="d109094e6290">
<p>Comparison operators</p>
</td>
<td class="cellalignment604" headers="d109094e6334 d109094e6293">
<pre dir="ltr">
 =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=
</pre></td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6341" headers="d109094e6290">
<p>Conjunctive operators</p>
</td>
<td class="cellalignment604" headers="d109094e6341 d109094e6293">
<pre dir="ltr">
AND, OR
</pre></td>
</tr>
<tr class="cellalignment454">
<td class="cellalignment603" id="d109094e6348" headers="d109094e6290">
<p>Grouping parentheses</p>
</td>
<td class="cellalignment604" headers="d109094e6348 d109094e6293">
<p>Use open and close parentheses for logical grouping of multiple elements.</p>
</td>
</tr>
</tbody>
</table>
</div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="section" -->
<div class="section">
<p class="subhead1">Example</p>
<p>The following <code class="codeph">WHERE</code> example returns all records when the <code class="codeph">AMOUNT</code> column is over 10,000 and does not cause a record to be discarded when <code class="codeph">AMOUNT</code> is absent.</p>
<pre dir="ltr">
WHERE (amount = @PRESENT AND amount &gt; 10000) 
</pre></div>
<!-- class="section" --></div>
</div>
<!-- class="ind" --><!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment453">
<tr>
<td class="cellalignment460">
<table class="cellalignment458">
<tr>
<td class="cellalignment457"><a href="syslog.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment457"><a href="table-defgen.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013, 2018, Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment462">
<table class="cellalignment456">
<tr>
<td class="cellalignment457"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment457"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
