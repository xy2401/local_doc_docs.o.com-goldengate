<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Planning the Configuration</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="description" content="Once you have installed Oracle GoldenGate, you must configure it to suit your own business needs. This chapter outlines techniques and procedures for the following configuration tasks." />
<meta name="dcterms.created" content="2014-08-06T9:43:49Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="GoldenGate for Mainframe Administering Oracle GoldenGate for HP NonStop (Guardian)" />
<meta name="dcterms.identifier" content="E28904-01" />
<meta name="dcterms.isVersionOf" content="GNSAD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1995, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="installing.htm" title="Previous" type="text/html" />
<link rel="Next" href="initial_sync.htm" title="Next" type="text/html" />
<link rel="alternate" href="E28904-01.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/17</span> <!-- End Header --><a id="g1008245"></a><a id="GNSAD171"></a> <a id="i947215"></a>
<h1 class="chapter"><span class="secnum">3</span> Planning the Configuration</h1>
<p><a id="GNSAD172"></a>Once you have installed Oracle GoldenGate, you must configure it to suit your own business needs. This chapter outlines techniques and procedures for the following configuration tasks.</p>
<p>This chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#i936018">Section 3.1, "Planning Overview"</a></p>
</li>
<li>
<p><a href="#A998863">Section 3.2, "Configuring TMF-Enabled Processing"</a></p>
</li>
<li>
<p><a href="#i936215">Section 3.3, "Configuring Non-TMF-Enabled Processing"</a></p>
</li>
<li>
<p><a href="#i936311">Section 3.4, "Configuring Oracle Goldengate Global Operations"</a></p>
</li>
<li>
<p><a href="#i947633">Section 3.5, "Configuring Replication"</a></p>
</li>
<li>
<p><a href="#i936461">Section 3.6, "Configuring for Maximum Throughput"</a></p>
</li>
<li>
<p><a href="#i936498">Section 3.7, "Changing Default Component Names"</a></p>
</li>
<li>
<p><a href="#i936521">Section 3.8, "Using Wildcards"</a></p>
</li>
<li>
<p><a href="#A1018337">Section 3.9, "Support for DDL and DDL2"</a></p>
</li>
<li>
<p><a href="#A1019338">Section 3.10, "Specifying Internet Protocol Addresses"</a></p>
</li>
</ul>
<a id="i936018"></a><a id="GNSAD173"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.1</span> Planning Overview</h2>
<p>Before running Oracle GoldenGate, you must make some decisions regarding your Oracle GoldenGate installation. This includes determining your required resources and their configuration. Other planning considerations include:</p>
<ul>
<li>
<p>Are you capturing change data from TMF-enabled or non-TMF-enabled applications?</p>
</li>
<li>
<p>Are you transmitting data to targets over TCP/IP?</p>
</li>
<li>
<p>Which topology configurations are you using?</p>
</li>
<li>
<p>How much data communications capacity is required between the source and target systems?</p>
</li>
<li>
<p>How much additional disk space is required to accommodate replication?</p>
</li>
<li>
<p>Can Oracle GoldenGate accommodate present and future transaction volumes?</p>
</li>
<li>
<p>How much overhead will Oracle GoldenGate add to the source and target systems?</p>
</li>
<li>
<p>How can you scale Oracle GoldenGate to meet high volume requirements?</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="A998863"></a><a id="GNSAD174"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.2</span> Configuring TMF-Enabled Processing</h2>
<p>Extract and its servant program Audserv read TMF data in large blocks (upwards of 28K at a time) before transferring the data to an Oracle GoldenGate trail. This requires a small percentage of I/O messages because Audserv retrieves blocks of records from audit cache rather than from disk.</p>
<p>You must consider several factors when planning for Audserv to read TMF data. These include:</p>
<ul>
<li>
<p>Adding columns to a source table</p>
</li>
<li>
<p>Ensuring all audit is processed</p>
</li>
<li>
<p>Keeping necessary audit available for Extract</p>
</li>
<li>
<p>Minimizing vulnerability to outages</p>
</li>
<li>
<p>Configuring <code>FUP RELOAD</code> activity</p>
</li>
<li>
<p>Re-configuring TMF</p>
</li>
</ul>
<a id="i936047"></a><a id="GNSAD175"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.2.1</span> Adding Columns to a Source Table</h3>
<p>Occasionally columns are added to source database tables. This means when a layout of your file or table changes, you must stop Extract, make the changes, update any source definitions files provided by <code>DEFGEN</code>, then restart Extract so it retrieves the new definition from the dictionary or SQL catalog.</p>
</div>
<!-- class="sect2" -->
<a id="i936051"></a><a id="GNSAD176"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.2.2</span> Ensuring All Audit is Processed</h3>
<p>Various system events can require that you ensure all audit records are processed before the event occurs. Examples include system maintenance, (such as an operating system upgrade), TMF shutdown, and other events. Failing to do so can result in missed data.</p>
<p>There are several methods for verifying that Extract is current with TMF activity.</p>
<ul>
<li>
<p>Use the GGSCI <code>SEND EXTRACT AUDITEND</code> command to determine Extract's position in the audit trail. If the response indicates that all audit is processed, Extract has no more work to do assuming that TMF-related applications are down or idle.</p>
</li>
<li>
<p>Use the GGSCI <code>ADD MARKER</code> command to insert a marker record into the audit trails after some significant event (such as taking the application down). Once Extract and Replicat have processed the marker, you can assume that all records before that point have been processed.</p>
</li>
<li>
<p>Issue the <code>INFO EXTRACT</code> command from GGSCI, which returns the Extract lag (approximate number of bytes and time behind the audit trails). If the status is <code>RUNNING</code> and the number of bytes behind is less than 5000, it is likely that all audit has been processed.</p>
</li>
<li>
<p>Issue a <code>LAG EXTRACT</code> command from GGSCI which reports the current lag times.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i936063"></a><a id="GNSAD177"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.2.3</span> Keeping Necessary Audit Available for Extract</h3>
<p>TMF purges audit trails it no longer requires, because it has no knowledge of outside processes that depend on it, such as Extract. This means you must plan how to keep audit trails available. This section discusses several options:</p>
<ul>
<li>
<p>Make sure a certain number of audit files are always available, either in production or backed up to an alternative subvolume.</p>
</li>
<li>
<p>Copy the audit trails to an alternative subvolume (away from production TMF) and let Extract read them from the alternative location.</p>
</li>
<li>
<p>Configure the audit trails to make disk dumps, and let Extract read them.</p>
</li>
<li>
<p>Configure the audit trails to make tape dumps, and let Extract restore the audit.</p>
</li>
<li>
<p>Include the <code>DISKTHRESHOLD</code> parameter in the Manager parameter file, so Manager warns you when audit trails are in danger of being purged.</p>
</li>
</ul>
<a id="GNSAD178"></a>
<div class="sect3"><a id="sthref55"></a>
<h4 class="sect3"><span class="secnum">3.2.3.1</span> Ensuring TMF Cannot Purge Audit</h4>
<p>Keep a certain number of audit files in production or as backup copies. One method for backing up files is using the GGSCI <code>ADD ATCONFIG</code> command with the <code>DUPFILES</code> option. Should you choose this option, limiting the number of duplicate files ensures that the backup disk does not fill up.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p>Using the <code>DUPFILES</code> option greatly increases the resources required to run Oracle GoldenGate. This is because duplicate audit requires exponentially more disk space.</p>
</div>
</div>
<!-- class="sect3" -->
<a id="GNSAD179"></a>
<div class="sect3"><a id="sthref56"></a>
<h4 class="sect3"><span class="secnum">3.2.3.2</span> Copying the Audit to an Alternative Location</h4>
<p>You can instruct Manager to copy audit trails to an alternative volume, then point Extract to read the alternative trails first. This keeps Extract activity from affecting production. To duplicate audit automatically, use the GGSCI <code>ADD ATCONFIG</code> command with the <code>ALTLOC</code> and <code>DUPFILES</code> or <code>DUP</code> options.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD180"></a>
<div class="sect3"><a id="sthref57"></a>
<h4 class="sect3"><span class="secnum">3.2.3.3</span> Using Tape Dumps as an Alternative Location</h4>
<p>If you specify a tape as the alternative location, Extract displays a message asking the operator to restore the tape. The Extract program restores tape dumps to one of three locations before processing the audit. In order of preference, the locations are:</p>
<ul>
<li>
<p>The subvolume indicated by the <code>ALTLOC</code> option of the <code>ADD ATCONFIG</code> command</p>
</li>
<li>
<p>The first restore volume configured for the audit trail with TMFCOM</p>
</li>
<li>
<p>The original location of the file</p>
</li>
</ul>
<p>To preserve disk space the restored file is purged as soon as it is processed, unless the restore was performed before run time. To prevent redundant restores, Extract determines if the restore occurs before run time. If yes, Extract assumes other Extract groups may need the file and does not purge it. Manager purges them at the appropriate time if the <code>ADD ATCONFIG</code> <code>PURGE</code> option is set.</p>
<p>Restoring tape dumps before run time can be convenient. To determine which tapes must be restored for a specific Extract group, use the GGSCI <code>STATUS EXTRACT</code> command. The command lists the names of required audit files and whether they exist on disk or tape. All files on tape must be restored. The GGSCI <code>STATUS AUDITTRAIL</code> command lists the names of all audit trails required across all Extract groups.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i936096"></a><a id="GNSAD181"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.2.4</span> Minimizing Vulnerability to Outages</h3>
<p>Extended network or target system outages can have an adverse impact on Extract processing. When the intended target system is unavailable, Extract cannot process the audit trail. If the target system remains down, critical audit will eventually be deleted from the system before it can be processed.</p>
<p>To prevent this problem, extract the data to a local trail for Replicat to access over Expand. This solution only applies when both the source and target are NonStop systems.</p>
<p>An alternative is to extract the data from the audit trails to an intermediate Oracle GoldenGate trail on the source, then configure a second Extract to move data to the target system. This ensures that data can always be extracted.</p>
<p>Outages also pose problems for transactions that are distributed across nodes. See <a href="#i946876">"Configuring for Distributed Network Transactions"</a> for information on ensuring transaction integrity for distributed transactions.</p>
</div>
<!-- class="sect2" -->
<a id="i936104"></a><a id="GNSAD182"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.2.5</span> Configuring FUP RELOAD Activity</h3>
<p><code>FUP RELOAD</code> commands are used to optimize database storage and access. They also generate a large amount of audit compared with typical activity. This can cause Extract to fall significantly behind the current location in the audit trails, sometimes requiring audit tape dumps to be restored. This process requires operator intervention.</p>
<p>You can often avoid tape restores by scheduling <code>FUP RELOADs</code> more effectively. Schedule reloads less frequently, or over several periods rather than all at once (For instance, reload 20% of the database each night for five nights, instead of reloading 100% of the database in a single evening.)</p>
</div>
<!-- class="sect2" -->
<a id="GNSAD183"></a>
<div class="sect2"><a id="sthref58"></a>
<h3 class="sect2"><span class="secnum">3.2.6</span> Data Compression</h3>
<p>You can optionally configure Oracle GoldenGate to compress data before sending it over TCP/IP. The Collector automatically decompresses it on the target system. To compress records over TCP/IP, include the <code>COMPRESS</code> and <code>COMPRESSTHRESHOLD</code> options in the <code>RMTHOST</code> parameter statement.</p>
<ul>
<li>
<p><code>COMPRESS</code> specifies that outgoing block of extracted changes are compressed, resulting in a typical 4 to1 ratio or better.</p>
</li>
<li>
<p><code>COMPRESSTHRESHOLD</code> sets the minimum byte size for which compression will occur. The default is <code>1000</code> bytes.</p>
</li>
</ul>
<p>For TMF-audited Enscribe files, set the NonStop <code>AUDITCOMPRESS</code> file attribute when creating the file. For non-TMF files, specify the <code>COMPRESSUPDATES</code> argument in the Logger configuration.</p>
<a id="GNSAD184"></a>
<div class="sect3"><a id="sthref59"></a>
<h4 class="sect3"><span class="secnum">3.2.6.1</span> Compressed Enscribe Records</h4>
<p>Whether TMF or non-TMF, Enscribe compression transfers the following data (rather than sending all field values).</p>
<ul>
<li>
<p>Each fragment of the record that changed</p>
</li>
<li>
<p>The key fragment of the record</p>
</li>
<li>
<p>Four additional bytes per fragment indicating fragment position and length</p>
</li>
</ul>
<p>The format of a compressed Enscribe record is as follows:</p>
<div class="inftblhruleinformal">
<table class="cellalignment32" title="Compressed Enscribe Record Format" summary="This table describes format of a compressed Enscribe record." dir="ltr">
<thead>
<tr class="cellalignment26">
<th class="cellalignment33" id="r1c1-t3">Field</th>
<th class="cellalignment33" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment26">
<td class="cellalignment34" id="r2c1-t3" headers="r1c1-t3">
<pre>
<span class="variable">field offset</span>
</pre></td>
<td class="cellalignment34" headers="r2c1-t3 r1c2-t3">
<p>The offset within the original record of the changed value (2 bytes)</p>
</td>
</tr>
<tr class="cellalignment26">
<td class="cellalignment34" id="r3c1-t3" headers="r1c1-t3">
<pre>
<span class="variable">field length</span>
</pre></td>
<td class="cellalignment34" headers="r3c1-t3 r1c2-t3">
<p>The length of <span class="variable">field value</span> (2 bytes)</p>
</td>
</tr>
<tr class="cellalignment26">
<td class="cellalignment34" id="r4c1-t3" headers="r1c1-t3">
<pre>
<span class="variable">field value</span>
</pre></td>
<td class="cellalignment34" headers="r4c1-t3 r1c2-t3">
<p>The data, including null or varchar length indicators</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>The first field in a compressed Enscribe record is the primary or system key.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD185"></a>
<div class="sect3"><a id="sthref60"></a>
<h4 class="sect3"><span class="secnum">3.2.6.2</span> Compressed SQL Records</h4>
<p>By default, SQL updates are compressed in the audit trails. This means each SQL update record includes the following data.</p>
<ul>
<li>
<p>Each column that was <code>SET</code> in the SQL <code>UPDATE</code> statement</p>
</li>
<li>
<p>Each key column in each row updated</p>
</li>
<li>
<p>Four additional bytes per column indicating column number and length</p>
</li>
</ul>
<p>Unlike Enscribe compression, you can estimate SQL update size directly using the MEASFLS and MEASRPT utilities and do not need other methods of estimation.</p>
<p>The format of a compressed SQL record is as follows:</p>
<div class="inftblhruleinformal">
<table class="cellalignment32" title="Compressed SQL Record Format" summary="This table summarizes the fields that make up compressed SQL records." dir="ltr">
<thead>
<tr class="cellalignment26">
<th class="cellalignment33" id="r1c1-t4">Argument</th>
<th class="cellalignment33" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment26">
<td class="cellalignment34" id="r2c1-t4" headers="r1c1-t4">
<pre>
<span class="variable">field index</span>
</pre></td>
<td class="cellalignment34" headers="r2c1-t4 r1c2-t4">
<p>The ordinal index of the SQL column within the source tables (2 bytes)</p>
</td>
</tr>
<tr class="cellalignment26">
<td class="cellalignment34" id="r3c1-t4" headers="r1c1-t4">
<pre>
<span class="variable">field length</span>
</pre></td>
<td class="cellalignment34" headers="r3c1-t4 r1c2-t4">
<p>The length of <span class="variable">field value</span> (2 bytes)</p>
</td>
</tr>
<tr class="cellalignment26">
<td class="cellalignment34" id="r4c1-t4" headers="r1c1-t4">
<pre>
<span class="variable">field value</span>
</pre></td>
<td class="cellalignment34" headers="r4c1-t4 r1c2-t4">
<p>The data, including null or varchar length indicators</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect3" -->
<a id="GNSAD186"></a>
<div class="sect3"><a id="sthref61"></a>
<h4 class="sect3"><span class="secnum">3.2.6.3</span> DCOMPRESS File Attribute Not Supported</h4>
<p>Turn off the NonStop <code>DCOMPRESS</code> file attribute for both SQL tables and Enscribe files extracted using TMF audit trails. When <code>DCOMPRESS</code> is on, compression occurs within each data block, which prevents the resolution of entire record values. Extract is permitted, but unpredictable results can occur.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD187"></a>
<div class="sect3"><a id="sthref62"></a>
<h4 class="sect3"><span class="secnum">3.2.6.4</span> AUDITCOMPRESS File Attribute Considerations</h4>
<p>When update operations occur on a file or table with audit compression on, only changed columns or fields and those that are part of the primary key are recorded. This means the full update images are not immediately available to Extract. Instead, a compressed image is retrieved and written.</p>
<p>This is acceptable for replication because only changes are required. However, problems can occur in the following circumstances:</p>
<ul>
<li>
<p>A selection clause includes columns that are not part of the source file's primary key.</p>
</li>
<li>
<p>Columns are mapped, and the primary key of the target is different than that of the source.</p>
</li>
<li>
<p>User exits or custom applications do not anticipate compressed records, which are more complex to process.</p>
</li>
</ul>
<p>Extract provides an option to retrieve full record images from the original database. However, retrieving each update can slow processing considerably. The options you use, and whether you use audit compression, is based on your application's requirements.</p>
<p>The NonStop <code>AUDITCOMPRESS</code> attribute is controlled at the file and table level using FUP and SQLCI.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i946876"></a><a id="GNSAD188"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.2.7</span> Configuring for Distributed Network Transactions</h3>
<p>In a multi-node environment a single transaction may include changes to files on more than one node. For example, a customer's order may require updates to the customer file on \<code>A</code>, the customer account file on \<code>B</code>, and the order file on \<code>C.</code> Updates like these, as well as updates to tables that are partitioned across nodes, are referred to as distributed network transactions.</p>
<p>To help ensure the completeness of the transaction when one node experiences an outage, you should configure components that coordinate the updates for distributed network transactions. This avoids part of a transaction being committed while the changes going to a disabled node are lost.</p>
<p>The following processes play a part in this coordination. The required configuration setup is explained for each component.</p>
<ul>
<li>
<p>Manager</p>
<p>When using a Coordinator, <code>PURGEOLDEXTRACTS</code> should be defined for the Manager rather than Replicat or Extract. This allows consideration of Coordinator checkpoints to ensure trail files are not purged before Coordinator has completed processing them. See <a href="manageandmonitor.htm#i962647">"Recommendations for Managing Trail Purges"</a> for more information.</p>
<p>Also the Manager on the node where the Coordinator resides may optionally be configured to <code>AUTOSTART</code> the Coordinator process.</p>
</li>
<li>
<p>Extract</p>
<p>There are no configuration changes needed for Extract, but if it has the <code>PURGEOLDEXTRACTS</code> parameter, this should be moved to the Manager.</p>
</li>
<li>
<p>Replicat</p>
<p>The <code>COORDINATOR</code> parameter is added to the Replicat parameter file to define the name of the process that is coordinating its distributed transactions. When the Replicat encounters a distributed transaction, it communicates with this Coordinator to determine when it can process that transaction.</p>
<p>If the Replicat has the <code>PURGEOLDEXTRACTS</code> parameter, it should be moved to the Manager to allow consideration of the Coordinator's checkpoints.</p>
</li>
<li>
<p>Reader</p>
<p><code>READER</code> parameters are included in the <code>COORDINATOR</code> parameter file. These are used to configure Reader processes when the Coordinator is started.</p>
<p>The Reader scans the local Oracle GoldenGate trail for distributed transactions. When one is found, the Reader gathers local transaction information and sends it to the Coordinator process.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p>If Readers will not be configured because distributed network transactions do not need to be replicated, the Extract parameter <code>EXCLUDEGGSTRANSRECS</code> can be used. This will suppress the creation of trail records that track distributed network transactions.</p>
</div>
</li>
<li>
<p>Coordinator</p>
<p>A Coordinator process must be added on one of the nodes in the system. This is added using the GGSCI <code>ADD</code> <code>COORDINATOR</code> command. The parameter file for it includes <code>READER</code> parameters to establish the Reader process for each node and Oracle GoldenGate trail.</p>
<div class="example">
<p class="titleinexample"><a id="GNSAD189"></a><a id="sthref63"></a>Example 3-1 Sample Coordinator Parameter File</p>
<pre>
COORDINATOR COORD1
FASTREADS
READER EXTTRAIL \NY.$DATA5.GGSDAT.AA, PROCESS $GGRD1, CPU 1, PRI 180
READER EXTTRAIL \LA.$DATA01.GGSDAT.BB, PROCESS $GGRD2
READER EXTTRAIL \FL.$DATA2.GGSDAT.CC, CPU 1, PRI 170
</pre>
<p>Coordinator receives information from the Readers, tallies the number of changes that have been received, and stores checkpoints. Coordinator uses this information to respond to queries from the Replicats on each of the nodes asking if the transaction is complete. When all of the operations for the transaction have verified their arrival, Coordinator releases the transaction to the Replicats for processing.</p>
<p>The following diagram shows an example of coordination processes for a distributed network transaction that spans three nodes, with each node replicated to a backup node.</p>
</div>
<!-- class="example" -->
<div class="figure">
<p class="titleinfigure"><a id="GNSAD190"></a><a id="sthref64"></a>Figure 3-1 Process flow for distributed network transaction support</p>
<img width="490" height="617" src="img/config_network_trans.gif" alt="Description of Figure 3-1 follows" title="Description of Figure 3-1 follows" /><br />
<a id="sthref65" href="img_text/config_network_trans.htm">Description of "Figure 3-1 Process flow for distributed network transaction support"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ul>
<a id="GNSAD191"></a>
<div class="sect3"><a id="sthref66"></a>
<h4 class="sect3"><span class="secnum">3.2.7.1</span> Re-configuring TMF</h4>
<p>When facts about the audit trails change, the checkpoints recorded by Extract can be invalidated, and TMF must be re-configured.</p>
<p class="orderedlisttitle">Before re-configuring TMF:&nbsp;</p>
<ol>
<li>
<p>Use the GGSCI <code>INFO EXTRACT *</code> command to ensure that all Extract groups have processed through the end of the last audit file.</p>
</li>
<li>
<p>Use the GGSCI <code>DELETE ATCONFIG *</code> command to delete the current audit management parameters.</p>
</li>
<li>
<p>Delete all Extract groups.</p>
</li>
</ol>
<p class="orderedlisttitle">After TMF is reconfigured:&nbsp;</p>
<ol>
<li>
<p>Manually re-add all of the Extract groups.</p>
</li>
<li>
<p>Purge audit files that were restored or copied to an alternative location.</p>
</li>
</ol>
<p>Using TMFCOM, dynamically add and delete the volumes on which audit files are located. Deleting an <code>ACTIVE</code> or a <code>RESTORE</code> volume can have adverse effects. Before deleting a volume, make sure all groups have processed outstanding audit on that volume, or copy all files on that volume to the alternative location. After a volume is deleted, the Extract process and Manager will not be able to find the associated audit. You can add an <code>ACTIVE</code> or <code>RESTORE</code> volume with no impact on Extract operations.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i936215"></a><a id="GNSAD192"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.3</span> Configuring Non-TMF-Enabled Processing</h2>
<p>To capture data from non-TMF applications, you must bind GGSLIB to the user application. GGSLIB will intercept certain NonStop commands in the application's place, while Logger will write data to a log trail. This causes the following planning issues:</p>
<ul>
<li>
<p>Maintaining data integrity</p>
</li>
<li>
<p>Supported file types and operations</p>
</li>
<li>
<p>System utilities that update databases</p>
</li>
<li>
<p>Private memory and stack space</p>
</li>
<li>
<p>Impact on existing application performance</p>
</li>
</ul>
<a id="i936238"></a><a id="GNSAD193"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.3.1</span> Maintaining Data Integrity</h3>
<p>The following issues can cause GGSLIB and Logger to miss records and/or compromise data integrity:</p>
<ul>
<li>
<p>Log processes are stopped by an operator while the application is updating a database. Several safeguards are built in to deal with this potential problem.</p>
</li>
<li>
<p>If a log process is stopped from TACL by process number, which can happen accidentally, the backup process takes over with no loss of data.</p>
</li>
<li>
<p>If a log process is stopped from TACL by name, this is assumed to be a mistake (because the proper method is the GGSCI <code>STOP LOGGER</code> command). Manager immediately restarts log processes stopped this way, although records can be lost if this occurs while there is activity in the system.</p>
</li>
<li>
<p>Double CPU failure occurs, taking down both the primary and backup log process CPUs. When this happens, other data integrity issues will surface on NonStop as a whole, such as loss of file buffers.</p>
</li>
<li>
<p>Application programs are not bound with GGSLIB. This can happen when a program is omitted from the initial bind list. This can also happen when migrating new object code into production, then forgetting to perform the GGSLIB bind. To avoid this problem, include GGSLIB binding into version control procedures and check any programs that generate warnings (See <a href="#i945282">"Authentication for Bound Programs"</a> for more detail.)</p>
</li>
<li>
<p>An application process is killed from TACL. This can mean that reads from or writes to the database could be lost in transit to the log process, depending on the timing of the <code>STOP</code> command. This is not a problem when issuing <code>FREEZE</code> and <code>STOP</code> commands to Pathway servers.</p>
</li>
<li>
<p>Extract or Replicat processes fall far behind Logger. Eventually, log trails are recycled by Manager, regardless of whether they are required by Extract or Replicat. EMS warnings can be generated to alert operators to this condition. This most likely happens when a network or target system is down for an extended period.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i943340"></a><a id="GNSAD194"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.3.2</span> Supported File Types and Operations</h3>
<p>GGSLIB and Logger behave according to the following rules regarding file operations.</p>
<ul>
<li>
<p>The following file types are supported: Key-sequenced, entry-sequenced, queue-files, syskey-files, relative and unstructured file operations. However, updates to edit files and the spooler cannot be extracted. Unstructured files must be extracted explicitly (using the <code>GETUNSTRUCTURED</code> parameter in the Logger parameter file).</p>
</li>
<li>
<p>Bulk I/O operations, i.e. operations that use <code>SETMODE</code>, are supported. The current list of <code>SETMODE</code>s includes:</p>
<ul>
<li>
<p>1 - Set file security</p>
</li>
<li>
<p>2 - Set file owner</p>
</li>
<li>
<p>3 - Set write verification</p>
</li>
<li>
<p>57 - Set serial writes</p>
</li>
<li>
<p>90 - Set buffered</p>
</li>
<li>
<p>92 - Set maxextents</p>
</li>
<li>
<p>93 - Set unstructured buffer length</p>
</li>
<li>
<p>94 - Set auditcompress</p>
</li>
<li>
<p>97 - Set licensed</p>
</li>
<li>
<p>123 - Set generic lock key length</p>
</li>
<li>
<p>138 - Set/Reset corrupt</p>
</li>
<li>
<p>153 - Set variable length audit compression</p>
</li>
</ul>
<p><code>FUP DUP</code>, <code>FUP LOAD</code> and <code>SELECT n AREA</code> in COBOL programs are also included.</p>
</li>
<li>
<p>To extract bulk I/O operations, specify the <code>GETBULKIO</code> option in the Logger parameter file. <code>FUP COPY</code> is supported by default. Use <code>GETFILEOPS</code> in Extract and Replicat to propagate these operations to the target database.</p>
</li>
<li>
<p><code>FILE</code> <code>ALTER</code>, <code>CREATE</code>, <code>DUP</code>, <code>PURGE</code>, <code>PURGEDATA</code>, and <code>RENAME</code> operations (to disk files) are supported.</p>
</li>
<li>
<p>The following <code>CONTROL</code> operations are supported:</p>
<ul>
<li>
<p>2 - set end-of-line</p>
</li>
<li>
<p>20 - <code>PURGEDATA</code></p>
</li>
<li>
<p>21 - Allocate/Deallocate extents</p>
</li>
</ul>
</li>
<li>
<p>Use <code>GETFILEOPS</code> in Extract and Replicat to propagate the operations listed above to the target database.</p>
</li>
<li>
<p>Undocumented, privileged function calls used by <code>FUP DUP</code> and <code>FUP LOAD</code> to change file labels are supported (This requires <code>PRIVLIB</code> to be licensed and included as Replicat's user library.) These functions are required to fully implement <code>FUP DUP</code> and <code>FUP LOAD</code> of key-sequenced files.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i945282"></a><a id="GNSAD195"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.3.3</span> Authentication for Bound Programs</h3>
<p>An exit can be activated within NonStop Safeguard to access the Oracle GoldenGate module SFGEXIT. This program runs as an independent process to monitor non-audited file opens for update access. (Opens for audited files or SQL tables and read-only opens are ignored.) When a non-audited open is found, SFGEXIT determines if the opening program has the Oracle GoldenGate intercept library bound to it. If it does not, the following warning is issued to EMS to alert the user that updates may occur without replication.</p>
<pre>
GoldenGate Library is not bound to <span class="variable">$vol.subvol.program_name</span> and it may update <span class="variable">$vol.subvol.application filename</span>
</pre></div>
<!-- class="sect2" -->
<a id="i936294"></a><a id="GNSAD196"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.3.4</span> System Utilities That Update Databases</h3>
<p>Standard NonStop utilities, notably FUP and TACL, perform file operations such as <code>CREATE</code>, <code>COPY</code>, <code>PURGE</code>, <code>PURGEDATA</code>, <code>DUP</code>, <code>LOAD</code>, and <code>RENAME</code>. You can monitor these activities by binding GGSLIB to these utilities just as you would to an application program.</p>
</div>
<!-- class="sect2" -->
<a id="i936298"></a><a id="GNSAD197"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.3.5</span> Private Memory and Stack Space</h3>
<p>GGSLIB routines minimize stack space requirements. By doing so, programs are ensured there will be enough stack room for typical activities.</p>
<p>For its own working space, GGSLIB allocates a small private memory segment to handle in-transit I/O buffers and keep its own state variables.</p>
</div>
<!-- class="sect2" -->
<a id="i936305"></a><a id="GNSAD198"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.3.6</span> Impact on Existing Application Performance</h3>
<p>GGSLIB and Logger add a small amount of overhead to existing application activities. Messages to log processes are sent asynchronously (<code>NOWAIT</code>) to avoid making the application wait for logging to occur. In addition, log processes write all data sequentially into buffered files for the best possible performance.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i936311"></a><a id="GNSAD199"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.4</span> Configuring Oracle Goldengate Global Operations</h2>
<p>User can configure Oracle GoldenGate global operations.</p>
<a id="GNSAD200"></a>
<div class="sect2"><a id="sthref69"></a>
<h3 class="sect2"><span class="secnum">3.4.1</span> GLOBALS Parameter File</h3>
<p>Oracle Goldengate provides the <code>GLOBALS</code> parameter file to standardize Oracle Goldengate configuration. Typically, you set global parameters when you install Oracle Goldengate. Once set, you rarely need to change them. Some of the operations you can standardize are:</p>
<ul>
<li>
<p>The initial allocation for wildcard entries</p>
</li>
<li>
<p>The time out value when GGSCI communicates with Oracle GoldenGate components</p>
</li>
<li>
<p>NonStop nodes in the network</p>
</li>
<li>
<p>The refresh interval</p>
</li>
<li>
<p>TACL <code>DEFINEs</code> for <code>GGS_AUDCFG</code> and <code>GGS_PREFIX</code> when not using the default</p>
</li>
</ul>
<p>To support versatility, some of the parameters set in <code>GLOBALS</code> can be temporarily overridden by other Oracle GoldenGate programs.</p>
<p>See <span class="italic"><span class="italic">Reference for Oracle GoldenGate on HP NonStop Guardian</span></span> for more information about global parameters.</p>
</div>
<!-- class="sect2" -->
<a id="GNSAD201"></a>
<div class="sect2"><a id="sthref70"></a>
<h3 class="sect2"><span class="secnum">3.4.2</span> Changing the Default Location of AUDCFG</h3>
<p>Run <code>BUILDMAC</code> or <code>NLDLIB</code> to change the default location where an instance of <code>BASELIB</code>, <code>GGSLIB</code>, <code>GGSSRL</code>, or <code>GGSDLL</code> will look for the <code>AUDCFG</code> segment. When it builds the new library, the macro prompts to ask if you want to change the <code>AUDCFG</code> location. If the answer is yes, you will be prompted for the new default <code>$VOL.SUBVOL</code> location.</p>
<p>If you want multiple Oracle GoldenGate environments to each have a different location for the <code>AUDCFG</code> segment, each environment will need a unique copy of <code>GGSLIB</code> or <code>BASELIB</code> linked with the location specific to that environment.</p>
<p>If the library specifies a different location for the <code>AUDCFG</code> than the <code>DEFINES</code> included in the <code>GLOBALS</code> parameters, the <code>GLOBALS</code> <code>DEFINES</code> will override the library.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i947633"></a><a id="GNSAD202"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.5</span> Configuring Replication</h2>
<p>Replicat provides a high degree of flexibility when processing data between files; however, there can be logical restrictions involved for which you must plan. This section details different scenarios that require additional planning, including:</p>
<ul>
<li>
<p>Replicating SQL tables with system keys</p>
</li>
<li>
<p>Non-key entry-sequenced relative files and tables</p>
</li>
<li>
<p>Load balancing and performance issues</p>
</li>
<li>
<p>Potential problems with audit compressed files</p>
</li>
<li>
<p>Conflicts with updating the target</p>
</li>
<li>
<p>Many-to-one replication</p>
</li>
<li>
<p>Bi-directional replication</p>
</li>
<li>
<p>Replicating data to non-TMF enabled databases</p>
</li>
<li>
<p>Replicating new SQL columns</p>
</li>
</ul>
<a id="i945951"></a><a id="GNSAD203"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.1</span> Replicating SQL Tables with System Keys</h3>
<p>Entry-sequenced SQL tables with non-unique keys are sometimes difficult to replicate accurately. This is because their keys are a <code>SYSKEY</code> value generated by the system. Replicat has no control over the <code>SYSKEY</code> value when replicating an insert operation into the target table; therefore subsequent update and delete records cannot be replicated exactly. Even though the <code>SYSKEY</code> value of the original record is known, the replicated record has a different <code>SYSKEY</code> value, requiring you to create a workaround so your keys resolve properly.</p>
<p>There are two methods for working with this issue. You can specify a view that contains all columns from the base table excluding the <code>SYSKEY</code>. Use the view as the target in the replication <code>MAP</code>, along with a <code>KEYCOLS</code> specification to define a different method for accessing the table for delete and update operations. This requires each target row to have some type of unique identifier, such as a unique index.</p>
<p>Another method is to add a column called <code>GGS_SYSKEY</code> to your target table, then map the source <code>SYSKEY</code> value to the <code>GGS_SYSKEY</code> column. Specify <code>GGS_SYSKEY</code> in the <code>KEYCOL</code> option of the map argument and use the <code>FORCEUSESYSKEY</code> parameter.</p>
</div>
<!-- class="sect2" -->
<a id="i952209"></a><a id="GNSAD204"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.2</span> Replicating Primary Key Updates</h3>
<p>Although Nonstop Enscribe and SQL/MP do not allow changes to primary keys, operations for primary key updates may be received from Oracle GoldenGate systems running for other databases. To maintain compatibility, Oracle GoldenGate for NonStop processes these primary key update operations by deleting the record and then inserting it with the same data, but a new primary key.</p>
<p>Primary key updates for Enscribe entry-sequenced and queue files are not supported and will generate an error.</p>
<p>The default is to process primary key updates, but a parameter is available to turn this off and discard the record. Contact <span class="italic">Oracle GoldenGate Technical Support</span> to use this parameter.</p>
<a id="GNSAD205"></a>
<div class="sect3"><a id="sthref71"></a>
<h4 class="sect3"><span class="secnum">3.5.2.1</span> Missing Row Errors</h4>
<p>Because values are needed for the columns that were not changed, an error will occur if the record cannot be fetched from the target database.</p>
<p>If <code>HANDLECOLLISIONS</code> is turned on and the fetch fails, there is an attempt to insert the missing record. Otherwise if <code>REPERROR</code> responses have been defined for a missing row, the rules specified by the <code>REPERROR</code> will be applied.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD206"></a>
<div class="sect3"><a id="sthref72"></a>
<h4 class="sect3"><span class="secnum">3.5.2.2</span> Non-Audited Target</h4>
<p>An error message is returned if an unaudited Enscribe record is deleted and then the insert of the new primary key record fails. Because it is not possible to back out the records processed since the last checkpoint, the system will advance the checkpoint to the record that is in error. User intervention will be required to correct the target record and restart the Replicat.</p>
<ul>
<li>
<p>For a file system error, correct the cause of the problem and insert the record from the discard file. Then skip over the primary key update record by advancing the checkpoint RBA to the next record.</p>
</li>
<li>
<p>If the insert generates a duplicate error, try to determine if the discarded record is more correct than the target record. If it is, delete the record in the file and replace it with the discarded record. Then skip over the primary key update record by advancing the checkpoint RBA to the next record.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="GNSAD207"></a>
<div class="sect3"><a id="sthref73"></a>
<h4 class="sect3"><span class="secnum">3.5.2.3</span> Compressed Updates to Enscribe Targets</h4>
<p><code>TARGETDEF</code> using <code>DICTIONARY</code> or <code>SOURCEDEFS</code> is required when:</p>
<ul>
<li>
<p>Compressed updates are being replicated to an Enscribe target database.</p>
</li>
<li>
<p>The data source is on open systems or it is HP NonStop SQL/MP or SQL/MX.</p>
</li>
<li>
<p>The target <code>MAP</code> statement does not explicitly use <code>COLMAP</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i951683"></a><a id="GNSAD208"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.3</span> Files and Tables Other Than Key-Sequenced</h3>
<p>You can replicate files and tables that are not key-sequenced, but there will be conditions that apply.</p>
<p>For relative files, Oracle GoldenGate forces the relative key of the target file to be the same as the source, so target records can be found for updates and deletes. The condition is that you can only replicate from a single source to a single target.</p>
<p>You have more flexibility if the relative file or table has a unique index. Then the columns in that index can be specified with <code>KEYCOLS</code> to identify a path for update and delete statements. However, any application that stores system keys as foreign keys in other tables will have unreliable results.</p>
<p>For entry-sequenced files or tables, selective replication (that is, where selection criteria are applied) is only feasible for inserts. This is due to the difficulty identifying the correct target record for updates. Selective replication from one source to one target is feasible for relative files and tables.</p>
<p>Entry-sequenced files can be replicated in the same order when the source database is TMF audited because the TMF data is in the correct order. If the source database is non-TMF, and GGSLIB is used to extract the data, records may be written to the target file in a different order than they appear in the source. This has a corresponding effect when updates to entry-sequenced records are processed: the record address of the source may be different from that in the target, resulting in a missing or incorrect update.</p>
<p>To get around this, when replicating a non-TMF entry-sequenced file from one source to one target, you can use the parameter and option <code>ENTRYSEQUPDATES</code> <code>EXACTKEY.</code> This requires the target file to be opened with <code>PROTECTED</code> or <code>EXCLUSIVE</code> access so other processes (including other Replicats) can not update the file. See <span class="italic"><span class="italic">Reference for Oracle GoldenGate on HP NonStop Guardian</span></span> for more information on how to use this parameter.</p>
<p>See <a href="#i936439">"Bi-Directional Replication"</a> for information on an environment not limited to single source updating a single target.</p>
</div>
<!-- class="sect2" -->
<a id="i947938"></a><a id="GNSAD209"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.4</span> Load Balancing and Performance Issues</h3>
<p>Replicat often proves to be a bottleneck when initially configured, especially for hot site applications that replicate the entire database. This bottleneck is because Replicat often mimics the original application's processing. In general, this may mean many more random, unbuffered I/Os. In contrast, Extract and Logger perform serial, buffered I/Os, usually in large blocks.</p>
<p>To solve this problem, configure multiple Replicat processes, each of which replicates a portion of the overall data.</p>
<p>One way to do this is assign different files or tables to different Replicat processes. This is conceptually simple. For example, if an application consists of data in four tables, <code>TAB1</code>, <code>TAB2</code>, <code>TAB3</code>, and <code>TAB4</code>, let Replicat process #1 replicate <code>TAB1</code> and <code>TAB2</code>, while Replicat process #2 replicates <code>TAB3</code> and <code>TAB4</code>.</p>
<p>A more complex option is to split the same file or table among multiple Replicat processes. This might be necessary, for example, when one million inserts and updates per day might occur against <code>FILE1</code>, while in the rest of the system only 100,000 inserts and updates occur. In this case, the optimal configuration may be two Replicat processes for <code>FILE1</code>. This is accomplished in two steps:</p>
<ol>
<li>
<p>Let Extract split the data into two trails. Each trail contains half the data for <code>FILE1</code>. To split the data, use the <code>WHERE</code>, <code>RANGE</code>, or <code>FILTER</code> clause of the Extract file parameter.</p>
</li>
<li>
<p>Assign a Replicat process to each of the resulting trails.</p>
</li>
</ol>
<p>Splitting up tables among different Extract processes may temporarily upset original transaction integrity boundaries, because two or more processes may be replicating a single transaction.</p>
<p>The following Extract parameter file splits <code>$DATA.MASTER.ACCOUNT</code> into two trails.</p>
<div class="example">
<p class="titleinexample"><a id="GNSAD210"></a><a id="sthref74"></a>Example 3-2 Splitting to Two Trails</p>
<pre>
EXTRACT DEMO
EXTTRAIL \NY.$DATA1.GGSDAT.E1
TABLE $DATA.MASTER.ACCOUNT, WHERE (ACCOUNT &lt; 500000);
EXTTRAIL \NY.$DATA3.GGSDAT.E2
TABLE $DATA.MASTER.ACCOUNT, WHERE (ACCOUNT &gt;= 500000);
</pre>
<p>A Replicat group is then dedicated to process each of the trails above.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i947438"></a><a id="GNSAD211"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.5</span> Potential Problems with Audit Compressed Files</h3>
<p>When replicating records selected with <code>WHERE</code> criteria from a source file with audit compression, update records can be missed (deletes and inserts will always be extracted). You can guarantee that all updates are processed by omitting fields that are not part of the primary key from your <code>WHERE</code> clauses. Primary key fields are always present in compressed update records.</p>
<p>When mapping selected columns with <code>COLMAP</code>, audit compression also causes potential conflicts. If the key of the target file includes a field not contained in the key of the source, target updates can fail. Updates require the presence of the entire key to guarantee success.</p>
<p>The easiest method for avoiding these conflicts is to turn off audit compression for source tables and files. This may or may not be feasible depending on the characteristics of your transaction load.</p>
</div>
<!-- class="sect2" -->
<a id="i936417"></a><a id="GNSAD212"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.6</span> Conflicts with Updating the Target</h3>
<p>If both Oracle GoldenGate and another application are allowed to update a target, conflicts can arise unless you establish rules to avoid them. For example, application #1 might update a record in the source database that application #2 has deleted from the target database. In such cases, it is impossible for Oracle GoldenGate to apply the source update at the target because the record to update no longer exists.</p>
<p>As a general rule, Replicat should have control over ranges of data that other applications cannot update. However, if conflicts are tolerable, Oracle GoldenGate provides features that allow operations to continue uninterrupted when errors occur:</p>
<ul>
<li>
<p>Use the <code>REPERROR</code> (<span class="variable">error</span>, <code>IGNORE</code>) parameter entries to ignore errors that otherwise cause transactions to abort.</p>
</li>
<li>
<p>Use <code>OVERRIDEDUPS</code> and <code>INSERTMISSINGUPDATES</code> to ensure all updates are inserted.</p>
</li>
<li>
<p>Review the Replicat discard file for operations that failed, and determine corrective measures.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i936429"></a><a id="GNSAD213"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.7</span> Many-to-One Replication</h3>
<p>When replicating many files to one file (collecting), applications should ensure that each source file manages a specific range of keys. If different source files can update the same key value, there can be conflicts at the target. For example, if two source tables receive an insert with the same key, both operations cannot be applied at the target because a duplicate error will result (Guardian error <code>10</code>, SQL error -<code>8227</code>).</p>
<p>Oracle GoldenGate provides several alternatives for dealing with this problem. One is the <code>HANDLECOLLISIONS</code> parameter that directs Replicat to insert the latest version of the record, even if the key exists. <code>HANDLECOLLISIONS</code> ignores missing update and delete conditions. Another option is to restrict the range of values replicated from each source with <code>WHERE</code> criteria. Most often the best alternative is to avoid the possibility of such conflicts as part of the application's processing rules.</p>
</div>
<!-- class="sect2" -->
<a id="i936439"></a><a id="GNSAD214"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.8</span> Bi-Directional Replication</h3>
<p>Sometimes, you may want to have two or more files replicating data to each other. In such cases, have each file manage a unique range of keys directly, as in the many-to-one case above. The difference here is that each file will hold data it manages, along with data replicated from the other file. In this way, each file can act as a backup for the other. The application should ensure that replicated data is read-only in such cases.</p>
<p>Because both files must be replicated, each replicated change will itself be extracted and replicated back to its source, which will cause errors. There are two methods for avoiding this condition:</p>
<ul>
<li>
<p>Restrict the ranges of key values that are extracted and replicated using <code>WHERE</code> criteria.</p>
</li>
<li>
<p>Use the <code>IGNOREREPLICATE</code> parameter in Extract processing. This parameter causes Extract to discard any operations that were applied by Replicat processes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<p><code>PURGEDATA</code> is a DDL statement that is automatically committed and not linked to any transaction, so <code>GETPURGEDATAS</code> is not supported for audited files in a bidirectional configuration. In this case loop detection is not effective and <code>IGNOREPURGEDATAS</code> must be included in the Extract parameters.</p>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i936447"></a><a id="GNSAD215"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.9</span> Replicating Data to Non-TMF Enabled Databases</h3>
<p>You can stimulate overall system performance by implementing buffering on your non-TMF Enscribe databases. To do so, turn on file buffering for target database files with the <code>FUP ALTER</code> <span class="variable">filename,</span> <code>BUFFERED</code> command. This imposes no real risk because the data is mirrored at the source system and can be recovered from there.</p>
<p>Use the <code>NOAUDITREPS</code> Replicat parameter to avoid unnecessary event messages regarding non-audited target files.</p>
</div>
<!-- class="sect2" -->
<a id="i936454"></a><a id="GNSAD216"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.5.10</span> Replicating New SQL Columns</h3>
<p>To replicate new SQL columns that were created since the current Extract and Replicat processes were started, include <code>REPNEWCOLUMNS</code> in the Replicat parameter file. <code>REPNEWCOLUMNS</code> replicates the <code>SQL ALTER TABLE ADD COLUMN</code> statements to create the new columns in the target.</p>
<p>Alternatively, you can specify <code>GETNEWCOLUMNS</code> to update table definitions when a column change is detected on a source table. <code>GETNEWCOLUMNS</code> ensures that data in columns created after Replicat starts up (using <code>ALTER TABLE ADD COLUMN</code> on the source system) are accounted for.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i936461"></a><a id="GNSAD217"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.6</span> Configuring for Maximum Throughput</h2>
<p>You can maximize throughput by modifying Extract, Replicat, or both. This section details strategies for implementing Oracle GoldenGate parameters to achieve data management that suits your needs.</p>
<a id="GNSAD218"></a>
<div class="sect2"><a id="sthref75"></a>
<h3 class="sect2"><span class="secnum">3.6.1</span> Extraction</h3>
<p>Techniques for maximizing throughput on Extract depends on whether the source system produces TMF trails or non-TMF logs.</p>
</div>
<!-- class="sect2" -->
<a id="GNSAD219"></a>
<div class="sect2"><a id="sthref76"></a>
<h3 class="sect2"><span class="secnum">3.6.2</span> TMF Extraction</h3>
<p>In most cases, only a single instance of Extract is required to extract and transmit data to the target system. A single Extract is advantageous because TMF audit trails are only read once.</p>
<p>In rare cases, extracting high volumes of <code>SQL UPDATE</code> statements requires multiple instances of Extract.</p>
</div>
<!-- class="sect2" -->
<a id="GNSAD220"></a>
<div class="sect2"><a id="sthref77"></a>
<h3 class="sect2"><span class="secnum">3.6.3</span> Non-TMF Data Extraction</h3>
<p>Non-TMF logging is linearly scalable by adding more Logger processes to the configuration. Because there is no penalty for adding Logger processes to the configuration, Oracle GoldenGate recommends allocating plenty of slack for high volume activity. In most cases, two or three Logger processes is more than enough to achieve the desired throughput.</p>
</div>
<!-- class="sect2" -->
<a id="GNSAD221"></a>
<div class="sect2"><a id="sthref78"></a>
<h3 class="sect2"><span class="secnum">3.6.4</span> Replication</h3>
<p>To achieve required throughput, more Replicat processes may be required. This is because Replicat's I/O activity tends to be random access, as opposed to Logger and Extract I/O, which is serial, blocked and buffered.</p>
<p>You can add Replicat processes to achieve near linear performance gains. However, to ensure good performance, no more than three Replicat processes should read each Oracle GoldenGate trail. Otherwise, excessively redundant reads result, sometimes causing contention issues on the trail's disk.</p>
</div>
<!-- class="sect2" -->
<a id="i936480"></a><a id="GNSAD222"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.6.5</span> Latency Issues</h3>
<p>Latency often refers to the difference in time between when an update occurs on the source database and when that same update is replicated on the target database. In this respect, latency measures the amount of time "behind" that the target system is from the source system, and can be important when determining the target database's accuracy. Database latency is especially important in certain bi-directional scenarios when two systems might update the same record in different databases at virtually the same time.</p>
<p>Another measure of latency is the lag between an update on the source and the time at which that update has been stored on the target system for later replication. This measure of latency represents the potential for the amount of data lost in a disaster. Once data has been transmitted to the target, it will be replicated eventually and is not exposed to the risk of disaster.</p>
</div>
<!-- class="sect2" -->
<a id="i936485"></a><a id="GNSAD223"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">3.6.6</span> Capacity Planning</h3>
<p>Through testing, Oracle GoldenGate has compiled some capacity planning guidelines, presented in the following sections. Consider these statistics as guidelines; actual performance depends on many of the factors previously discussed including network topology, operating systems, etc.</p>
<a id="GNSAD224"></a>
<div class="sect3"><a id="sthref79"></a>
<h4 class="sect3"><span class="secnum">3.6.6.1</span> TMF Data Extraction</h4>
<p>Oracle GoldenGate has observed TMF audit scanning rates of over ten gigabytes per hour on an S7000 system. A single Extract process has been observed to write out over three gigabytes per hour. In this case, the output figures are far less than the audit generated, because extracted data does not include alternate keys, SQL indexes, <code>FUP RELOAD</code> information and assorted audit records.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD225"></a>
<div class="sect3"><a id="sthref80"></a>
<h4 class="sect3"><span class="secnum">3.6.6.2</span> Non-TMF Data Extraction</h4>
<p>Non-TMF extracts are linearly scalable. Therefore, the potential extraction rate of data is close to the system limits for existing application activity. Oracle GoldenGate has observed I/O extraction rates on a two-processor, eight-disk S7000 system above 400 I/Os per second per Logger process, which can scale on larger systems well above 2000 I/Os per second using multiple Logger processes.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD226"></a>
<div class="sect3"><a id="sthref81"></a>
<h4 class="sect3"><span class="secnum">3.6.6.3</span> Data Transfer into Oracle GoldenGate Trails</h4>
<p>The potential for data transfer is around 75-80% of the communication channel's actual potential. When this limit is reached, you can split data into multiple trails to achieve greater throughput with parallelism.</p>
</div>
<!-- class="sect3" -->
<a id="GNSAD227"></a>
<div class="sect3"><a id="sthref82"></a>
<h4 class="sect3"><span class="secnum">3.6.6.4</span> Replicat Throughput</h4>
<p>The potential throughput of Replicat is greater than that of the database I/O performed on the source system. Replicat performs essentially the same I/Os on the target system as were performed on the source system, excluding reads. In addition, Replicat uses transaction grouping features as mentioned earlier to improve TMF-related performance</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i936498"></a><a id="GNSAD228"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.7</span> Changing Default Component Names</h2>
<p>GGSCI provides default names for processes, parameter files, and report files. You may want to change these defaults to make them more descriptive. For example, you may want to denote the parameter files and reports associated with a particular Extract or Replicat group (when have multiple Extracts and Replicats).</p>
<p>To change default component names:</p>
<ol>
<li>
<p>Launch GGSCI.</p>
</li>
<li>
<p>Specify the define <code>=GGS_PREFIX</code> using the following syntax.</p>
<pre>
GGSCI&gt; ADD DEFINE =GGS_PREFIX, CLASS MAP, FILE $<span class="variable">prefix</span>
</pre>
<p>Where:</p>
<p><span class="variable">prefix</span> consists of two letters.</p>
<p>Consider the example:</p>
<pre>
GGSCI&gt; ADD DEFINE =GGS_PREFIX, CLASS MAP, FILE $EF
</pre>
<p>This example changes the following default components.</p>
<ul>
<li>
<p>The Manager process name changes from <code>$GGMGR</code> to <code>$EFMGR</code>.</p>
</li>
<li>
<p>Logger process names become <code>$EFLnn</code> instead of <code>$GGLnn</code>.</p>
</li>
<li>
<p>Parameter files are stored in the <code>EFSPARM</code> subvolume rather than <code>GGSPARM</code>.</p>
</li>
<li>
<p>Report files are stored in the <code>EFSRPT</code> subvolume rather than <code>GGSRPT</code>.</p>
</li>
<li>
<p>Extract processes are called <code>$EFEnn</code> rather than <code>$GGEnn</code>.</p>
</li>
<li>
<p>Replicat processes are called <code>$EFRnn</code> rather than <code>$GGRnn</code>.</p>
</li>
<li>
<p>Syncfile processes are called <code>$EFSnn</code> rather than <code>$GGSnn.</code></p>
</li>
<li>
<p>Coordinator processes are called <code>$EFCnn</code> rather than <code>$GGCnn</code>.</p>
</li>
</ul>
</li>
<li>
<p>One way to tell GGSCI and application programs bound with GGSLIB where to establish and retrieve configuration information is to use the <code>=GGS_AUDCFG</code> define. Alternatively the location can be specified when running <code>BUILDMAC</code> or <code>NLDLIB</code>. When this location is not provided with one of these methods, the default is <code>$SYSTEM.GGS.AUDCFG</code>.</p>
<pre>
GGSCI&gt; ADD DEFINE =GGS_AUDCFG, CLASS MAP, FILE <span class="variable">config_file</span>
</pre>
<p>Where:</p>
<p><span class="variable">config_file</span> is a file name, and the file portion of the file name is no longer than six characters.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="i936521"></a><a id="GNSAD229"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">3.8</span> Using Wildcards</h2>
<p>You can use wildcard arguments to express volumes, subvolumes, files and tables. Oracle GoldenGate allows wildcards to be expressed as a question mark (?) or an asterisk (*). An asterisk matches any number of characters, whereas a question mark matches only a single character.</p>
<p>The wildcard expression in the following example refers to any file set in the specified volume and subvolume:</p>
<pre>
<a id="BABEFGEJ"></a>
FILE $DATA1.MYSUB.*;
</pre>
<p>In this next example, the wildcard expression refers to any volume <code>$DATAn</code>, where n represents the fifth character in the volume name, and any file in the specified subvolume:</p>
<pre>
<a id="BABIGJJC"></a>
FILE $DATA?.MYSUB.*;
</pre>
<p>By default, Oracle GoldenGate initially allocates 100 wildcard entries. You can change this initial allocation using the <code>MAXWILDCARDENTRIES</code> parameter in the <code>GLOBALS</code>, Extract, and Replicat parameter files. Once this initial <code>MAXWILDCARDENTRIES</code> allocation is exhausted, the program will allocate an additional 100 entries each time it needs more.</p>
<p>When you specify <code>MAXWILDCARDENTRIES</code> in the <code>GLOBALS</code> parameter file, that specification becomes the default. You can override that default using the <code>MAXWILDCARDENTRIES</code> parameter in the Extract or Replicat parameter files.</p>
<p>Most parameters that specify file names or table names can use wildcard expressions. Exceptions are documented in the parameter's description.</p>
</div>
<!-- class="sect1" -->
<a id="A1018337"></a><a id="GNSAD489"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.9</span> Support for DDL and DDL2</h2>
<p>Oracle GoldenGate for HP NonStop supports Enscribe Data Definition Language dictionary builds for DDL or DDL2. The versions that are supported include the following:</p>
<ul>
<li>
<p>C20 and C30 operating system, DDL Version 5</p>
</li>
<li>
<p>D00, D10 and D20 operating system, DDL Version 6</p>
</li>
<li>
<p>D30 and later, DDL Version 7</p>
</li>
<li>
<p>H01 and later, DDL Version 8 and DDL2 Version 9</p>
</li>
</ul>
<p>An error will be generated if a valid version is not identified.</p>
<p>No parameters are required for DDL2 support. Definitions of either size are supported for column mapping. User exits support record manipulation on the DDL2 large record formats by using a new set of function calls. See the user exit function calls in the <span class="italic">Reference for Oracle GoldenGate on HP NonStop Guardian</span> for details.</p>
</div>
<!-- class="sect1" -->
<a id="A1019338"></a><a id="GNSAD490"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.10</span> Specifying Internet Protocol Addresses</h2>
<p>Manager and Extract can be restricted to a specific IP address by using the <code>IPINTERFACE</code> stand-alone parameter or the <code><span class="codeinlineitalic">@ip_address</span></code> option of <code>TCPIPPROCESSNAME</code>.</p>
<ul>
<li>
<p>This example using the <code>IPINTERFACE</code> stand-alone parameter sets the IP address to 2001:db8:2010:5040:4fff:ffff:ffff:28.</p>
<pre>
IPINTERFACE 2001:db8:2010:5040:4fff:ffff:ffff:28
</pre></li>
<li>
<p>This example using the @<code><span class="codeinlineitalic">ip_address</span></code> option of <code>TCPIPPROCESSNAME</code> parameter sets the process name to <code>$ZTC4</code> and its IP address to 2001:db8:2010:5040:4fff:ffff:ffff:28.</p>
<pre>
TCPIPPROCESSNAME $ZTC4@2001:db8:2010:5040:4fff:ffff:ffff:28
</pre></li>
</ul>
<p>Targets can be restricted using options of the <code>RMTHOST</code> parameter.</p>
<ul>
<li>
<p>This example using the <code>IPINTERFACE</code> option sets the IP address of the host to 2001:db8:2010:5040:4fff:ffff:ffff:28</p>
<pre>
RMTHOST host01, MGRPORT 12345,
IPINTERFACE 2001:db8:2010:5040:4fff:ffff:ffff:28
</pre></li>
<li>
<p>This example using the @<code><span class="codeinlineitalic">ip_address</span></code> option of <code>TCPIPPROCESSNAME</code> sets process name to <code>$ZTC1</code> and IP address to <code>2001:db8:2010:5040:4fff:ffff:ffff:28</code>.</p>
<pre>
RMTHOST host01, MGRPORT 12345, 
TCPIPPROCESSNAME $ztc1@2001:db8:2010:5040:4fff:ffff:ffff:28
</pre></li>
</ul>
<p>See the <span class="italic">Reference for Oracle GoldenGate on HP NonStop Guardian</span> for more details on how to use these parameters.</p>
<p>Oracle GoldenGate for HP NonStop supports Internet Protocol versions 4 and 6 (IPv4 and IPv6.) If an IP address is specified for Manager or Extract, the matching version must be configured for that host or an error is generated. If a name is specified for the host and both IPv4 and IPv6 are configured for that host, the default is to use IPv6. The parameter <code>USEIPV4ONLY</code> forces Extract to use IPv4.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment25">
<tr>
<td class="cellalignment34">
<table class="cellalignment30">
<tr>
<td class="cellalignment29"><a href="installing.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment29"><a href="initial_sync.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1995, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment36">
<table class="cellalignment28">
<tr>
<td class="cellalignment29"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment29"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
