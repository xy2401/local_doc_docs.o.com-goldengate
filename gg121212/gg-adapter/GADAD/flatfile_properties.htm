<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml/DTD/xhtml1-transitional.dtd">
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>8 Flat File Properties</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023">
<meta name="description" content="This chapter describes properties that you can configure in the Oracle GoldenGate Flat File Adapter property file.">
<meta name="dcterms.created" content="2015-04-08T9:18:57Z">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta name="robots" content="all">
<meta name="dcterms.title" content="Oracle&reg; GoldenGate Application Adapters Administering Oracle GoldenGate Adapters">
<meta name="dcterms.identifier" content="E61853-01">
<meta name="partno" content="E64636-01">

<meta name="dcterms.isVersionOf" content="GADAD">
<link rel="Start" href="../../index.htm" title="Home" type="text/html">
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html">

<script type="application/javascript" src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript" src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html">
<link rel="Prev" href="flatfile_templates.htm" title="Previous" type="text/html">
<link rel="Next" href="java_msgcap_part.htm" title="Next" type="text/html">
<link rel="alternate" href="../GADAD.pdf" title="PDF version" type="application/pdf">
<link rel="alternate" href="../GADAD.epub" title="ePub version" type="application/epub+zip">
<link rel="alternate" href="../GADAD.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook">
<link rel="schema.dcterms" href="http://purl.org/dc/terms/">
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="application/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-53addf516e0e58a5"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Skip Headers</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns"><div id="BREADCRUMBS"><a href="http://docs.oracle.com">Home</a> / <a href="../../index.html">Middleware</a> / <a href="../index.html">Oracle GoldenGate Adapters</a>
</div>

<span id="PAGE" style="display:none;">13/28</span>
<!-- End Header -->
<div id="GADAD450" class="chapter"><a id="g1044619"></a> <a id="i1014825"></a>
<h1 class="chapter"><span class="secnum">8</span> Flat File Properties</h1>
<p><a id="GADAD451"></a>This chapter describes properties that you can configure in the Oracle GoldenGate Flat File Adapter property file.</p>
<p>The chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#A998855">User Exit Properties</a></p>
</li>
<li>
<p><a href="#A999886">File Writer Properties</a></p>
</li>
</ul>
<a id="A998855"></a>
<div id="GADAD453" class="sect1">
<h2 class="sect1"><span class="secnum">8.1</span> User Exit Properties</h2>
<p>User exit properties include properties to control logging and general properties that control naming and handling of transactions.</p>
<div id="GADAD454" class="sect2"><a id="sthref38"></a>
<h3 class="sect2"><span class="secnum">8.1.1</span> Logging Properties</h3>
<p>Logging is controlled by the following properties.</p>
<div id="GADAD623" class="sect3"><a id="sthref39"></a>
<h4 class="sect3"><span class="secnum">8.1.1.1</span> goldengate.log.logname</h4>
<p>Specifies the prefix to the log file name. This must be a valid ASCII string. The log file name has the current date appended to it, in <code>yyyymmdd</code> format, together with the <code>.log</code> extension.</p>
<p>The following example will create a log file of name <code>writer_20140803.log</code> on August 3, 2014.</p>
<pre>
goldengate.log.logname=writer 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD624" class="sect3"><a id="sthref40"></a>
<h4 class="sect3"><span class="secnum">8.1.1.2</span> goldengate.log.level</h4>
<p>Specifies the overall log level for all modules. The syntax is:</p>
<pre>
goldengate.log.level=ERROR | WARN | INFO| DEBUG 
</pre>
<p>The log levels are defined as follows:</p>
<ul>
<li>
<p><code>ERROR</code> &ndash; Only write messages if errors occur</p>
</li>
<li>
<p><code>WARN</code> &ndash; Write error and warning messages</p>
</li>
<li>
<p><code>INFO</code> &ndash; Write error, warning and informational messages</p>
</li>
<li>
<p><code>DEBUG</code> &ndash; Write all messages, including debug ones.</p>
</li>
</ul>
<p>The default logging level is <code>INFO</code>. The messages in this case will be produced on startup, shutdown, and periodically during operation. For example, the following sets the global logging level to <code>INFO</code>:</p>
<pre>
goldengate.log.level=INFO 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the level is switched to <code>DEBUG</code>, large volumes of messages may occur, which could impact performance.</div>
</div>
<!-- class="sect3" -->
<div id="GADAD625" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref41"></a>
<h4 class="sect3"><span class="secnum">8.1.1.3</span> goldengate.log.tostdout</h4>
<p>Controls whether or not log information is written to standard out. This setting is useful if the Extract process is running with a <code>VAM</code> started from the command line or on an operating system where <code>stdout</code> is piped into the report file. However, Oracle GoldenGate processes generally run as background processes. The syntax is:</p>
<pre>
goldengate.log.tostdout={true | false}
</pre>
<p>The default is <code>false</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD626" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref42"></a>
<h4 class="sect3"><span class="secnum">8.1.1.4</span> goldengate.log.tofile</h4>
<p>Controls whether or not log information is written to the specified log file. The syntax is:</p>
<pre>
goldengate.log.tofile={true | false}
</pre>
<p>The default is <code>false</code>. Log output is written to the specified log file when set to <code>true</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="GADAD460" class="sect2"><a id="sthref43"></a>
<h3 class="sect2"><span class="secnum">8.1.2</span> General Properties</h3>
<p>General properties control file writer names, check pointing, handling of transactions, representation of timestamps, and the format used for column and object names.</p>
<div id="GADAD461" class="sect3"><a id="sthref44"></a>
<h4 class="sect3"><span class="secnum">8.1.2.1</span> goldengate.flatfilewriter.writers</h4>
<p>Specifies the name of the writer that will run within the user exit. Enter multiple string values to enable multiple named writers to run within the same user exit. For example:</p>
<pre>
goldengate.flatfilewriter.writers=dsvwriter,diffswriter,binwriter 
</pre>
<p>Ensure there are no spaces before or after the equal sign or the commas. All other properties in the file should be prefixed by one of the writer names.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD462" class="sect3"><a id="sthref45"></a>
<h4 class="sect3"><span class="secnum">8.1.2.2</span> goldengate.userexit.buffertxs</h4>
<p>Controls whether entire transactions are read before being output.When set to <code>true</code>, an entire transaction is read from the trail before being output. For example:</p>
<pre>
goldengate.userexit.buffertxs=true 
</pre>
<p>The default is <code>false</code>. Setting this to true is useful only if the <code>numops</code> metadata column is used. Currently the only way to calculate the <code>numops</code> value is to buffer transactions and output one transaction at a time.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD463" class="sect3"><a id="sthref46"></a>
<h4 class="sect3"><span class="secnum">8.1.2.3</span> goldengate.userexit.chkptprefix</h4>
<p>Specifies a string value as the prefix to be added to the checkpoint file name. When running multiple data pumps, the checkpoint prefix should be set to the name of the process. For example:</p>
<pre>
goldengate.userexit.chkptprefix=pump1_ 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD464" class="sect3"><a id="sthref47"></a>
<h4 class="sect3"><span class="secnum">8.1.2.4</span> goldengate.userexit.chkpt.ontxend</h4>
<p>Controls whether the need to roll files over is checked after every transaction or only when the Extract process checkpoints. If set to <code>true,</code> the adapter checks if a file is due to be rolled over after it has processed a transaction. If due, the rollover is performed and the checkpoint file updated. This is useful if tight control over the contents of output files is required. For example, if all data up to midnight should be written to files before rolling over at midnight, it is important that the check occurs on every transaction. For example:</p>
<pre>
goldengate.userexit.chkpt.ontxend=true 
</pre>
<p>The default is <code>false</code>. If set to <code>false,</code> the adapter will only check for rollover when Extract checkpoints (every 10 seconds by default).</p>
</div>
<!-- class="sect3" -->
<div id="GADAD465" class="sect3"><a id="sthref48"></a>
<h4 class="sect3"><span class="secnum">8.1.2.5</span> goldengate.userexit.datetime.removecolon</h4>
<p>Controls whether or not a colon is written between the date and time. When set to <code>false</code>, the date and time column values are written to the output files in the default format of the Oracle GoldenGate trail, <code>YYYY-MM-DD:HH:MI:SS.FFFF</code>. When set to <code>true</code>, the format is changed to <code>YYYY-MM-DD HH:MI:SS.FFF</code> with no colon between date and time. The default is <code>false</code>.</p>
<pre>
goldengate.userexit.datetime.removecolon=true 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD466" class="sect3"><a id="sthref49"></a>
<h4 class="sect3"><span class="secnum">8.1.2.6</span> goldengate.userexit.timestamp</h4>
<p>Controls whether the record timestamp is output as local time or Coordinated Universal Time (UTC). When this is not set to <code>utc</code> the record timestamp is output as local time using the local time zone. The default is local time.</p>
<pre>
goldengate.userexit.timestamp=utc 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD467" class="sect3"><a id="sthref50"></a>
<h4 class="sect3"><span class="secnum">8.1.2.7</span> goldengate.userexit.datetime.maxlen</h4>
<p>Controls the maximum output length of a date time column. Setting this to an integer value truncates the column value to that length. Since the date and time format is <code>YYYY-MM-DD:HH:MI:SS.F(9)</code> the maximum length of a date and time column is 29 characters.</p>
<p>For example:</p>
<pre>
goldengate.userexit.datetime.maxlen=19 
</pre>
<p>Setting <code>goldengate.userexit.maxlen=19</code> truncates to date and time with no fractional seconds. Setting <code>goldengate.userexit.maxlen=10</code> truncates to date only. The default is to output the full date and time column value.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD468" class="sect3"><a id="sthref51"></a>
<h4 class="sect3"><span class="secnum">8.1.2.8</span> goldengate.userexit.utf8mode</h4>
<p>Controls whether column data and table, file, and column names are returned in the UTF8 character set. When this is set to <code>false</code>, all data will be in the character set of the operating system. The default is <code>true</code>.</p>
<p>The syntax is:</p>
<pre>
goldengate.userexit.utf8mode=true|false 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="A999886"></a>
<div id="GADAD469" class="sect1">
<h2 class="sect1"><span class="secnum">8.2</span> File Writer Properties</h2>
<p>File writer properties control the format of the output file and how the files are written.</p>
<div id="GADAD470" class="sect2"><a id="sthref52"></a>
<h3 class="sect2"><span class="secnum">8.2.1</span> Output Format Properties</h3>
<p>The following properties set the delimiter types of the values and the grouping of columns.</p>
<div id="GADAD471" class="sect3"><a id="sthref53"></a>
<h4 class="sect3"><span class="secnum">8.2.1.1</span> <span class="italic">writer</span>.mode</h4>
<p>Controls whether the output format is DSV or LDV.</p>
<ul>
<li>
<p><span class="bold">DSV</span> &ndash; Delimiter Separated Values, for example:</p>
</li>
</ul>
<pre>
POSITION<span class="keyword">|</span>OPCODE<span class="keyword">|</span>TIMESTAMP<span class="keyword">|</span>COLVALA<span class="keyword">|</span>COLVALB<span class="keyword">|</span>. . . 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
DSV is not limited to comma separated values (as is CSV).</div>
<ul>
<li>
<p><span class="bold">LDV</span> &ndash; Length Delimited Values, for example:</p>
<pre>
<span class="keyword">0109</span>TIMESTAMPI3<span class="keyword">02</span>MY<span class="keyword">05</span>TABLEP<span class="keyword">04</span>2000P<span class="keyword">03</span>ETC 
</pre></li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Lengths can be ASCII or binary, some metadata columns can be fixed length (see <a href="#i1016619">Section 8.2.4.8, "Metadata Columns"</a>) and this format will support unicode multi-byte data.</div>
<p>For example:</p>
<pre>
writer.mode=dsv 
writer2.mode=ldv 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For backward compatibility, <code>csv</code> is accepted instead of <code>dsv</code>, binary instead of <code>ldv</code>. There is no difference in the output formats when using the alternate options.</div>
</div>
<!-- class="sect3" -->
<div id="GADAD472" class="sect3"><a id="sthref54"></a>
<h4 class="sect3"><span class="secnum">8.2.1.2</span> <span class="italic">writer</span>.groupcols</h4>
<p>Controls whether or not the column names, before values and after values are grouped together.</p>
<p>The syntax is:</p>
<pre>
<span class="italic">writer</span>.groupcols=true|false 
</pre>
<p>The default is false. This results in a set of name, before value and after value listed together, as shown in this example for <code>COL1</code> and <code>COL2</code>:</p>
<pre>
"COL1", COL1_B4, COL1, "COL2", COL2_B4, COL2 
</pre>
<p>With the property set to <code>true</code>, the columns are grouped into sets of all names, all before values, and all after values:</p>
<pre>
"COL1", "COL2", COL1_B4, COL2_B4, COL1, COL2 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1016630"></a>
<div id="GADAD473" class="sect2">
<h3 class="sect2"><span class="secnum">8.2.2</span> Output File Properties</h3>
<p>The following properties control how files are written, where to, and what their extensions will be. This is independent of the writer mode and data contents.</p>
<div id="GADAD474" class="sect3"><a id="sthref55"></a>
<h4 class="sect3"><span class="secnum">8.2.2.1</span> <span class="italic">writer</span>.files.onepertable</h4>
<p>Controls whether data is split over multiple rolling files (one per table in the input data) or all data is written to one rolling file. The default is true.</p>
<p>The syntax is:</p>
<pre>
<span class="italic">writer</span>.files.onepertable=true|false 
</pre>
<p>In the following example the <code>writer</code> file writer will create one file per table, and <code>writer2</code> will write all data to one file.</p>
<pre>
writer.files.onepertable=true 
writer2.files.onepertable=false 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD475" class="sect3"><a id="sthref56"></a>
<h4 class="sect3"><span class="secnum">8.2.2.2</span> <span class="italic">writer</span>.files.oneperopcode</h4>
<p>Controls whether or not data is split based on the insert, update, delete, or primary key operation codes.</p>
<p>For example, the following setting will create separate output files for inserts, updates, deletes, and primary key updates:</p>
<pre>
writer.files.oneperopcode=true 
</pre>
<p>The default is false; output all records to the same files independent of the type of operation.</p>
<p>In addition to this property, you must also modify the <code>files.formatstring</code> property to accept the <code>%O</code> placeholder. This indicates the position to write the operation code when the file name is created if the <code>files.oneperopcode</code> property is set. The default filename should also include the operation code if that property is set.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD476" class="sect3"><a id="sthref57"></a>
<h4 class="sect3"><span class="secnum">8.2.2.3</span> <span class="italic">writer</span>.files.prefix</h4>
<p>Specifies a value to be used as the prefix for data files and control files. This property only applies if the writer is not in one per table mode (<code>files.onepertable=true</code>). For data files, the prefix is ignored if the <code>property files.formatstring</code> is being used.</p>
<p>By default, the prefix is set to the string <code>output</code>. A file named <code>data1</code> will become <code>outputdata1</code>by default. The file name will be <code>test_data1</code> using the following example.</p>
<pre>
writer.files.prefix=test_ 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD477" class="sect3"><a id="sthref58"></a>
<h4 class="sect3"><span class="secnum">8.2.2.4</span> <span class="italic">writer.</span>files.data.rootdir, <span class="italic">writer.</span>files.data.ext, <span class="italic">writer.</span>files.data.tmpext</h4>
<p>Specifies the location and extension of all data files. Before rolling over the files will have the <code>tmpext</code> extension, after rolling over they will have the <code>ext</code> extension. The extension does not have to be just an .<code>ext</code> format, additional characters can be appended to the file name before the extension to differentiate the data output. You should ensure the named output directory exists, and that the user running the Oracle GoldenGate processes has the correct permissions to write to that directory. For example:</p>
<pre>
# specify the root directory for outputting data files 
writer.files.data.rootdir=./out 

# determine the extension for data files when rolled over 
writer.files.data.ext=_data.dsv 

# determine the extension for data files before rolling over 
writer.files.data.tmpext=_data.dsv.temp 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD478" class="sect3"><a id="sthref59"></a>
<h4 class="sect3"><span class="secnum">8.2.2.5</span> <span class="italic">writer.</span>files.control.use, <span class="italic">writer.</span>files.control.rootdir, <span class="italic">writer.</span>files.control.ext</h4>
<p><code><span class="codeinlineitalic">writer.</span></code><code>files.control.use</code> is a boolean true or false value that defaults to true. The others are ASCII values. These properties determine the user, location and extension of control files. Control files will share the same name prefix as the data files they are related to, but will have the defined extension. By default <code>files.control.ext</code> is <code>.control</code>. For example:</p>
<pre>
# specify whether or not to output a control file 
writer.files.control.use=true 

# specify the extension to use for control files 
writer.files.control.ext=_data.control 

# directory in which to place control files, defaults to data directory 
writer.files.control.rootdir=./out 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD479" class="sect3"><a id="sthref60"></a>
<h4 class="sect3"><span class="secnum">8.2.2.6</span> <span class="italic">writer.</span>files.control.delim.chars/code, <span class="italic">writer.</span>files.control.eof.chars/code</h4>
<p>Specifies the value in characters or hexadecimal code to be used as the data delimiter or the end-of-line indicator. The default for the delimiter is a comma (,) The default new line trigger is the <code>newline</code> character that is valid for the platform.</p>
<p>For example, to override the comma as the data delimiter:</p>
<pre>
writer.files.control.delim.chars=# 
</pre>
<p>For example, to set the new line indicator:</p>
<pre>
writer.files.control.eol.chars=\n 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD480" class="sect3"><a id="sthref61"></a>
<h4 class="sect3"><span class="secnum">8.2.2.7</span> <span class="italic">writer.</span>files.formatstring</h4>
<p>Specifies the filename format string to be used in creating the filenames for data files. The format string overrides the <code>files.prefix</code> property. This filename format string is similar in syntax to standard C formatting except the following placeholders can be added to the filename:</p>
<ul>
<li>
<p><span class="bold">%c</span> = catalog</p>
</li>
<li>
<p><span class="bold">%s</span> = schema</p>
</li>
<li>
<p><span class="bold">%t</span> = table</p>
</li>
<li>
<p><span class="bold">%n</span> = seqno</p>
</li>
<li>
<p><span class="bold">%d</span> = timestamp</p>
</li>
<li>
<p><span class="bold">%o</span> = opcode</p>
</li>
</ul>
<p>The format of the <code>seqno</code> can be specified. For example <code>%05n</code> means 5 digits will be displayed and padded with <code>0</code>s. The <code>seqno</code> starts at zero and is incremented by one each time a file rolls over. It is stored as a <code>long int</code> and therefore the maximum value is platform dependent. For example on a 64 bit machine the largest value is 2^64-1.</p>
<p>These placeholders can be intermingled with user specified text in any order desired. For example:</p>
<pre>
writer.files.formatstring=myext_%d_%010n_%s_% 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD481" class="sect3"><a id="sthref62"></a>
<h4 class="sect3"><span class="secnum">8.2.2.8</span> <span class="italic">writer.</span>files.data.bom.code</h4>
<p>Specifies a hexadecimal value as the byte order marker (BOM) to be written to the beginning of the file. The user is responsible for ensuring the BOM matches the data in the files. If no hexadecimal value is specified the marker is not written.</p>
<p>The following example results in the UTF8 BOM <code>efbbf</code> written as the first bytes of all output files.</p>
<pre>
writer.files.data.bom.code=efbbbf 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD482" class="sect3"><a id="sthref63"></a>
<h4 class="sect3"><span class="secnum">8.2.2.9</span> <span class="italic">writer.</span>files.includeprocessname</h4>
<p>Controls whether or not the name of the Extract process is included as part of the file name. The default is false.</p>
<p>The syntax is:</p>
<pre>
<span class="italic">writer.</span>files.includeprocessname=true|false 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD483" class="sect3"><a id="sthref64"></a>
<h4 class="sect3"><span class="secnum">8.2.2.10</span> <span class="italic">writer.</span>files.useownerfiles</h4>
<p>Controls whether or not hidden files are created to identify the Extract process that owns the file. This can be used to avoid overwriting files from different Oracle GoldenGate installations. The default is false.</p>
<p>The syntax is:</p>
<pre>
<span class="italic">writer.</span>files.useownerfiles=true|false 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="GADAD484" class="sect2"><a id="sthref65"></a>
<h3 class="sect2"><span class="secnum">8.2.3</span> File Rollover Properties</h3>
<p>The following properties determine the policies for rolling over files.</p>
<div id="GADAD485" class="sect3"><a id="sthref66"></a>
<h4 class="sect3"><span class="secnum">8.2.3.1</span> <span class="italic">writer.</span>files.data.rollover.time</h4>
<p>Specifies the maximum number of seconds of elapsed time that must pass from the first record written to the file before the file is rolled over. For example:</p>
<pre>
# number of seconds before rolling over 
writer.files.data.rollover.time=10 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD486" class="sect3"><a id="sthref67"></a>
<h4 class="sect3"><span class="secnum">8.2.3.2</span> <span class="italic">writer.</span>files.data.rollover.size</h4>
<p>Specifies the minimum number of kilobytes that must be written to the file before the file is rolled over.</p>
<p>This example sets the minimum to 10,000 KB:</p>
<pre>
# min file size in KB before rolling over 
writer.files.data.rollover.size=10000 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD487" class="sect3"><a id="sthref68"></a>
<h4 class="sect3"><span class="secnum">8.2.3.3</span> <span class="italic">writer.</span>files.data.norecords.timeout</h4>
<p>Specifies the maximum number of elapsed seconds since data was written to a file to wait before rolling over the file. The default is 120 seconds.</p>
<p>This example sets the timeout interval to 10 seconds:</p>
<pre>
# roll over in case no records for a period of time 
writer.files.data.norecords.timeout=10 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD488" class="sect3"><a id="sthref69"></a>
<h4 class="sect3"><span class="secnum">8.2.3.4</span> <span class="italic">writer.</span>files.rolloveronshutdown</h4>
<p>Controls the policy for roll over when the Extract process stops. If this value is false, all empty temporary files will be deleted, but any that have data will be left as temporary files. If this property is true, all non-empty temporary files will be rolled over to their rolled file name, a checkpoint written and empty temporary files deleted. For example:</p>
<pre>
# roll over non-empty and delete all empty files when Extract stops 
writer.files.rolloveronshutdown=true  
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can use time and/or size. If you use both, the first reached will cause a roll over. The time out interval ensures files are rolled over if they contain data, even if there are no records to be processed. If neither time or size are specified, files will roll over after a default maximum size of 1MB.</div>
</div>
<!-- class="sect3" -->
<div id="GADAD489" class="sect3"><a id="sthref70"></a>
<h4 class="sect3"><span class="secnum">8.2.3.5</span> <span class="italic">writer.</span>files.data.rollover.timetype</h4>
<p>Controls whether to use the Julian commit timestamp rather than the system time to trigger file roll over. The syntax is:</p>
<pre>
<span class="italic">writer</span>.files.data.rollover.timetype=commit|system 
</pre>
<p>The following example will use the commit timestamp of the source trail records to determine roll over:</p>
<pre>
writer.files.data.rollover.timetype=commit 
</pre>
<p>The default is to use the system time to determine when to roll over files.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD490" class="sect3"><a id="sthref71"></a>
<h4 class="sect3"><span class="secnum">8.2.3.6</span> <span class="italic">writer.</span>files.data.rollover.multiple</h4>
<p>Controls whether or not all files will be rolled over simultaneously independent of when they first received records. Normally files are rolled over individually based on the time or size properties. The time is based on the roll over period, so it depends on the time records were first written to a particular file. In some cases, especially when outputting data with one file per table, you may want to roll over all currently open files at the same time, independent of when data was first written to that file.</p>
<p>The following example instructs the adapter to roll over all files simultaneously.</p>
<pre>
writer.files.data.rollover.multiple=true 
</pre>
<p>The default value is <code>false</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD491" class="sect3"><a id="sthref72"></a>
<h4 class="sect3"><span class="secnum">8.2.3.7</span> <span class="italic">writer.</span>files.data.rollover.attime</h4>
<p>Specifies a time for the adapter to roll over files. Enter the specified time in 24 hour format (<code>HH:MM</code>). Only one value entry is supported. The wildcard (*) is supported for hours. The syntax is:</p>
<pre>
<span class="italic">writer</span>.files.data.rollover.attime=<span class="italic">time_specifier</span> 
</pre>
<p>The following example will roll over to a new file every hour on the hour:</p>
<pre>
writer.files.data.rollover.attime=*:00 
</pre>
<p>The following example will roll over every hour at fifteen minutes after the hour:</p>
<pre>
writer.files.data.rollover.attime=*:15 
</pre>
<p>Note that the <code><span class="codeinlineitalic">writer.</span></code>r<code>ollover.timetype</code> property determines whether the time to use is system or commit time.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD492" class="sect3"><a id="sthref73"></a>
<h4 class="sect3"><span class="secnum">8.2.3.8</span> <span class="italic">writer.</span>writebuffer.size</h4>
<p>Specifies the write buffer chunk size. Use to reduce the number of system write calls. For example:</p>
<pre>
writer.writebuffer.size=36863 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1018254"></a>
<div id="GADAD493" class="sect2">
<h3 class="sect2"><span class="secnum">8.2.4</span> Data Content Properties</h3>
<p>The following properties determine the data that is written to the data files. These properties are independent of the format of the output data.</p>
<div id="GADAD494" class="sect3"><a id="sthref74"></a>
<h4 class="sect3"><span class="secnum">8.2.4.1</span> <span class="italic">writer.</span>rawchars</h4>
<p>Controls whether character data retains its original binary form or is output as ASCII. The default is false. This property should be set if the input data contains Unicode multibyte data that should not be converted to ASCII. For example:</p>
<pre>
# whether to output characters as ASCII or binary (for Unicode data) 
writer.rawchars=false 
writer2.rawchars=true 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD495" class="sect3"><a id="sthref75"></a>
<h4 class="sect3"><span class="secnum">8.2.4.2</span> <span class="italic">writer.</span>includebefores</h4>
<p>Controls whether or not both the before and after image of data is included in the output for update operations. The default is false. This is only relevant if the before images are available in the original data, and <code>getupdatebefores</code> is present in all Oracle GoldenGate parameter files in the processing chain. For example:</p>
<pre>
# whether to output update before images 
writer.includebefores=true 
</pre>
<p>This produces <code>. . ."VAL_BEFORE_1","VAL_1","VAL_BEFORE_2","VAL_2". . .</code></p>
</div>
<!-- class="sect3" -->
<div id="GADAD496" class="sect3"><a id="sthref76"></a>
<h4 class="sect3"><span class="secnum">8.2.4.3</span> <span class="italic">writer.</span>afterfirst</h4>
<p>Controls whether or not the after image is written before the before image when <code>includebefores</code> is set to <code>true.</code></p>
<p>For example:</p>
<pre>
writer.afterfirst=true 
</pre>
<p>This true setting results in the after image listed before the before image.</p>
<pre>
"VAL_1", "VAL_BEFORE_1", "VAL_2", "VAL_BEFORE_2" 
</pre>
<p>The default is <code>false. In this case</code> the after image is written after the before image.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD497" class="sect3"><a id="sthref77"></a>
<h4 class="sect3"><span class="secnum">8.2.4.4</span> <span class="italic">writer.</span>includecolnames</h4>
<p>Controls whether or not column names are output before the column values. The default is <code>false</code>. For example:</p>
<pre>
# whether to output column names 
writer.includecolnames=true 
</pre>
<p>This produces <code>&hellip;"COL_1","VAL_1","COL_2","VAL_2"&hellip;</code></p>
</div>
<!-- class="sect3" -->
<div id="GADAD498" class="sect3"><a id="sthref78"></a>
<h4 class="sect3"><span class="secnum">8.2.4.5</span> <span class="italic">writer.</span>omitvalues</h4>
<p>Controls whether or not column values are omitted in the output files. The default is <code>false</code>. For example:</p>
<pre>
# whether to output column values 
writer.omitvalues=false 
</pre>
<p>This produces <code>&hellip;"COL_1","COL_2"&hellip;</code>, if <code>includecolnames</code> is also set to <code>true</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD499" class="sect3"><a id="sthref79"></a>
<h4 class="sect3"><span class="secnum">8.2.4.6</span> <span class="italic">writer.</span>diffsonly</h4>
<p>Controls whether all columns are output, or only those where the before image is different from the after image. The default is <code>false</code>. This only applies to updates and requires <code>GETUPDATEBEFORES</code> in all Oracle GoldenGate parameter files in the processing chain. This property is independent of the <code>includebefores</code> property. For example:</p>
<pre>
# whether to output only columns with differences between before and  
# after images (deletes and inserts have all available columns) 
writer.diffsonly=true 
</pre>
<p>This produces <code>. . ."VAL_1",,,"VAL_4",,,"VAL_7". . .</code></p>
</div>
<!-- class="sect3" -->
<div id="GADAD500" class="sect3"><a id="sthref80"></a>
<h4 class="sect3"><span class="secnum">8.2.4.7</span> <span class="italic">writer.</span>omitplaceholders</h4>
<p>Controls whether delimiters/lengths are included in the output for missing columns. The default is <code>false</code>. This applies to updates and deletes where the <code>COMPRESSUPDATES</code> or <code>COMPRESSDELETES</code> flag was present in a Oracle GoldenGate parameter file in the processing chain. In this case, values may be missing. Also, if <code><span class="codeinlineitalic">writer</span></code>.<code>diffsonly</code> is <code>true</code>, values that are not different are said to be missing. For example:</p>
<pre>
# whether to skip record delimiters if columns are missing 
writer.omitplaceholders=true 
</pre>
<p>This changes <code>. . ."VAL_1",,,"VAL_4",,,"VAL_7". . .</code></p>
<p><code>to . . ."VAL_1","VAL_4","VAL_7". . .</code></p>
</div>
<!-- class="sect3" -->
<a id="i1016619"></a>
<div id="GADAD501" class="sect3">
<h4 class="sect3"><span class="secnum">8.2.4.8</span> Metadata Columns</h4>
<p>Metadata columns are optional Extract columns that contain data about a record, not actual record data. These columns are written at the beginning of the output record, before any column values.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD502" class="sect3"><a id="sthref81"></a>
<h4 class="sect3"><span class="secnum">8.2.4.9</span> Valid Metadata Columns</h4>
<p>Valid metadata columns are:</p>
<ul>
<li>
<p><span class="bold">position</span> - A unique position indicator of records in a trail.</p>
</li>
<li>
<p><span class="bold">opcode</span> - <code>I</code>, <code>U</code>, <code>D</code> or <code>K</code> for Insert, Update, Delete, or Primary Key update records.</p>
</li>
<li>
<p><span class="bold">txind</span> - The general record position in a transaction (0 - begin, 1 - middle, 2 - end, 3 - only).</p>
</li>
<li>
<p><span class="bold">txoppos</span> - Position of record in a transaction, starting from 0.</p>
</li>
<li>
<p><span class="bold">catalog</span> - The catalog name of the change record.</p>
</li>
<li>
<p><span class="bold">schema</span> - The schema (owner) name of the changed record.</p>
</li>
<li>
<p><span class="bold">table</span> - The table name of the changed record.</p>
</li>
<li>
<p><span class="bold">schemaandtable</span> - Both the schema and table name concatenated as schema.table</p>
</li>
<li>
<p><span class="bold">timestamp</span> - The commit timestamp of the record.</p>
</li>
<li>
<p><span class="bold">@&lt;token name</span><span class="bold">&gt;</span> - A token value defined in the Extract parameter file.</p>
</li>
<li>
<p><span class="bold">$getenv</span> - A <code>GETENV</code> value as documented in the <span class="italic">Oracle GoldenGate Reference Guide</span>; for example <code>$GGHEADER.OPCODE.</code></p>
</li>
<li>
<p><span class="bold">%COLNAME</span> - The value of a data column.</p>
</li>
<li>
<p><span class="bold">numops</span> -The number of operations in the current transaction. This value will always be 1 if <code>goldengate.userexit</code>.<code>buffertxs</code> is not <code>true.</code></p>
</li>
<li>
<p><span class="bold">numcols</span> - The number of columns to be output. This value is equal to the number of columns in the original record, minus the number of columns output as metadata columns up until the point this metadata column is used.</p>
</li>
<li>
<p><span class="bold">"&lt;value&gt;</span>" - Any literal value.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="GADAD503" class="sect3"><a id="sthref82"></a>
<h4 class="sect3"><span class="secnum">8.2.4.10</span> Using Metadata Columns</h4>
<p>Some things to consider when using metadata columns:</p>
<ul>
<li>
<p>The ASCII values for <code>opcode</code> and <code>txind</code> can be overridden.</p>
</li>
<li>
<p>For <code>LDV</code>, metadata columns can be variable or fixed length.</p>
</li>
<li>
<p>The <code>position</code> can be written in hexadecimal or decimal.</p>
</li>
<li>
<p>Any metadata column can be the internal value or it can be read from a column of the original data.</p>
</li>
<li>
<p>A literal value is indicated by enclosing it in quotes. When a literal value is specified, that value will be output as a character string in the specified metadata column position using the appropriate quote policy.</p>
</li>
<li>
<p>A column value is indicated by <code>%COLNAME</code>. When a column value is specified, that column value is output in the metadata section of the output record, rather than in the column values section. This may be used to ensure that the column is always output in the same position in the record, independent of the table being output.</p>
</li>
</ul>
<p>The following properties apply to metadata columns.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD504" class="sect3"><a id="sthref83"></a>
<h4 class="sect3"><span class="secnum">8.2.4.11</span> <span class="italic">writer.</span>metacols</h4>
<p>Specifies the metadata columns to output in the order of output. Enter multiple names as ASCII values separated by commas. For example:</p>
<pre>
# which metacols to output and in which order 
writer.metacols=timestamp,opcode,txind,position,catalog,schema,table 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD505" class="sect3"><a id="sthref84"></a>
<h4 class="sect3"><span class="secnum">8.2.4.12</span> <span class="italic">writer.</span>metacols.<span class="italic">metacol_name</span>.fixedlen</h4>
<p>Specifies an integer value to determine the length of data to write for the metadata column specified by <code><span class="codeinlineitalic">metacol_name</span></code>. If the actual data is longer than the fixed length it will be truncated, if it is shorter the output will be padded. For example:</p>
<pre>
# timestamp is fixed length 
writer.metacols.timestamp.fixedlen=23 
</pre>
<p>This truncates <code>2011-08-03 10:30:51.123456</code> to <code>2011-08-03 10:30:51.123.</code></p>
</div>
<!-- class="sect3" -->
<div id="GADAD506" class="sect3"><a id="sthref85"></a>
<h4 class="sect3"><span class="secnum">8.2.4.13</span> <span class="italic">writer.</span>metacols.<span class="italic">metacol_name</span>.column</h4>
<p>Specifies an ASCII value to use as the column name of data values instead of using the <code><span class="codeinlineitalic">metacol_name</span></code> value for a metadata column. If set, this column name must exist in all tables processed by the user exit. There is currently no way to override this column name on a per table basis. For example, to override the internal timestamp from a column:</p>
<pre>
# timestamp is read from a column 
writer.metacols.timestamp.column=MY_TIMESTAMP_COL 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD507" class="sect3"><a id="sthref86"></a>
<h4 class="sect3"><span class="secnum">8.2.4.14</span> <span class="italic">writer.</span>metacols.<span class="italic">token_name</span>.novalue.chars | <span class="italic">writer</span>.metacols.<span class="italic">token_name</span>.novalue.code</h4>
<p>Specifies values to represent characters or hexadecimal code to be used when the value of <code><span class="codeinlineitalic">token_name</span></code> is not available. Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. The default value is <code>NO VALUE</code>. For example:</p>
<pre>
writer.metacols.TKN-SCN.novalue.chars=0 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD508" class="sect3"><a id="sthref87"></a>
<h4 class="sect3"><span class="secnum">8.2.4.15</span> <span class="italic">writer.</span>metacols.<span class="italic">metacol_name</span>.fixedjustify</h4>
<p>Controls whether the justification for the <code><span class="codeinlineitalic">metacol_name</span></code> column value is to the left or right. By default all metadata columns will be justified to the left. For example, to justify a token to the right:</p>
<pre>
writer.metacols.TKN-SCN.fixedjustify=right 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD509" class="sect3"><a id="sthref88"></a>
<h4 class="sect3"><span class="secnum">8.2.4.16</span> <span class="italic">writer.</span>metacols.<span class="italic">metacol_name</span>.fixedpadchar.chars | <span class="italic">writer.</span>metacols.<span class="italic">metacol_name</span>.fixedpadchar.code</h4>
<p>Specifies either a character or code value to be used for padding a metadata column. Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. The default character used for padding is a space (" "). For example:</p>
<pre>
writer.metacols.TKN-SCN.fixedpadchar.chars=0 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD510" class="sect3"><a id="sthref89"></a>
<h4 class="sect3"><span class="secnum">8.2.4.17</span> <span class="italic">writer.</span>metacols.opcode.insert.chars | <span class="italic">writer.</span>metacols.opcode.insert.code</h4>
<p>Specifies an override value for the default character <code>I</code> that identifies insert operations. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>.</p>
<p>The following example instructs the adapter to use <code>INS</code> for inserts:</p>
<pre>
writer.metacols.opcode.insert.chars=INS
</pre></div>
<!-- class="sect3" -->
<div id="GADAD585" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref90"></a>
<h4 class="sect3"><span class="secnum">8.2.4.18</span> <span class="italic">writer.</span>metacols.opcode.update.chars | <span class="italic">writer.</span>metacols.opcode.update.code</h4>
<p>Specifies an override value for the default character <code>U</code> that identifies update operations. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>.</p>
<p>The following example instructs the adapter to use <code>UPD</code> for updates:</p>
<pre>
writer.metacols.opcode.update.chars=UPD
</pre></div>
<!-- class="sect3" -->
<div id="GADAD586" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref91"></a>
<h4 class="sect3"><span class="secnum">8.2.4.19</span> <span class="italic">writer.</span>metacols.opcode.delete.chars | <span class="italic">writer.</span>metacols.opcode.delete.code</h4>
<p>Specifies an override value for the default character <code>D</code> that identifies delete operations. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>.</p>
<p>The following example instructs the adapter to use <code>DEL</code> for deletes:</p>
<pre>
writer.metacols.opcode.delete.chars=DEL
</pre></div>
<!-- class="sect3" -->
<div id="GADAD587" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref92"></a>
<h4 class="sect3"><span class="secnum">8.2.4.20</span> <span class="italic">writer.</span>metacols.opcode.updatepk.chars | <span class="italic">writer.</span>metacols.opcode.updatepk.code</h4>
<p>Specifies an override value for the default character <code>K</code> that identifies primary key update operations. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>.</p>
<p>The following example instructs the adapter to use <code>PKU</code> for primary key updates:</p>
<pre>
writer.metacols.opcode.updatepk.chars=PKU
</pre></div>
<!-- class="sect3" -->
<div id="GADAD511" class="sect3"><a id="sthref93"></a>
<h4 class="sect3"><span class="secnum">8.2.4.21</span> <span class="italic">writer.</span>metacols.txind.begin.chars | <span class="italic">writer.</span>metacols.txind.begin.code</h4>
<p>Specifies the override values to use to identify the beginning, middle, end of transactions, or if an operation that is the whole transaction. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. The default value is 0 for Begin.</p>
<p>The following example overrides the 0 with the letter B.</p>
<pre>
# tx indicator values is overridden 
writer.metacols.txind.begin.chars=B 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD588" class="sect3"><a id="sthref94"></a>
<h4 class="sect3"><span class="secnum">8.2.4.22</span> <span class="italic">writer.</span>metacols.txind.middle.chars | <span class="italic">writer.</span>metacols.txind.middle.code</h4>
<p>Specifies the override value to use to identify the middle transactions. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. The default value is 1 for Middle.</p>
<p>The following example overrides the1 with the letter M.</p>
<pre>
# tx indicator value is overridden 
writer.metacols.txind.middle.chars=M 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD589" class="sect3"><a id="sthref95"></a>
<h4 class="sect3"><span class="secnum">8.2.4.23</span> <span class="italic">writer.</span>metacols.txind.end.chars | <span class="italic">writer.</span>metacols.txind.end.code</h4>
<p>Specifies the override value to use to identify the end transactions. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. The default value is 2 for End.</p>
<p>The following example overrides the 2 with the letter E.</p>
<pre>
# tx indicator value is overridden 
writer.metacols.txind.end.chars=E 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD590" class="sect3"><a id="sthref96"></a>
<h4 class="sect3"><span class="secnum">8.2.4.24</span> <span class="italic">writer.</span>metacols.txind.whole.chars | <span class="italic">writer.</span>metacols.txind.whole.code</h4>
<p>Specifies the override value to use to identify. if an operation that is the whole transaction. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. The default value is 3 for Whole.</p>
<p>The following example overrides the 3 with the letter W.</p>
<pre>
# tx indicator value is overridden 
writer.metacols.txind.whole.chars=W 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD512" class="sect3"><a id="sthref97"></a>
<h4 class="sect3"><span class="secnum">8.2.4.25</span> <span class="italic">writer.</span>metacols.position.format</h4>
<p>Controls whether the output of the of the <code>position</code> metadata column is in decimal or hexadecimal format. If hexadecimal, this will typically be a 16 character value; if decimal, the length will vary. Currently this contains the sequence number and RBA of the Oracle GoldenGate trail that the Extract process is reading from. For example:</p>
<pre>
# position is in decimal format (seqno0000000rba) 
writer.metacols.position.format=dec 
</pre>
<p>This produces <code>120000012345</code> for <code>seqno</code> 12, <code>rba</code> 12345</p>
<pre>
writer2.metacols.position.format=hex 
</pre>
<p>This produces <code>0000000c00003039</code> for seqno 12, rba 12345.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD513" class="sect3"><a id="sthref98"></a>
<h4 class="sect3"><span class="secnum">8.2.4.26</span> <span class="italic">writer.</span>metacols.<span class="italic">colname</span>.omit</h4>
<p>Controls whether the <code>COLNAME</code> column can be used as metadata but not output.</p>
<p>The following example specifies that <code>numcols</code> can be used as metadata, but not output.</p>
<pre>
writer.metacols.numcols.omit=true 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD514" class="sect3"><a id="sthref99"></a>
<h4 class="sect3"><span class="secnum">8.2.4.27</span> <span class="italic">writer</span>.begintx.metacols, <span class="italic">writer</span>.endtx.metacols</h4>
<p>Specifies the metadata columns to use to mark the beginning and end of a transaction. These marker records are written (with end of line delimiters) to the output files before and after the operation records that make up the transaction.</p>
<p>The syntax is:</p>
<pre>
<span class="italic">writer</span>.begintx.metacols=<span class="italic">metacols_list</span> 
</pre>
<p>The following example specifies marking the beginning of a transaction with the letter <code>B</code> and the number of operations in the transaction.</p>
<pre>
writer.begintx.metacols="B",numops 
</pre>
<p>In the following example, the end of the transaction marker will be the letter <code>E</code>.</p>
<pre>
writer.endtx.metacols="E" 
</pre>
<p>Any of the existing metadata columns can be used in the transaction begin and end markers. If you specify a column value or specific property of a record (such as table name) for <code>begintx.metacols</code>, the value for the first record in the transaction is used. For <code>endtx.metacols,</code> the value for the last record is used.</p>
<p>For example, if the transaction has the following records:</p>
<pre>
rec=0,table=tabA,operation=insert,col1=val1,col2=val2 
rec=1,table=tabA,operation=update,col1=val3,col2=val4 
rec=2,table=tabA,operation=delete,col1=val5,col2=val6 
rec=3,table=tabB,operation=update,col1=val7,col2=val8 
</pre>
<p>And the properties are set as follows:</p>
<pre>
writer.begintx.metacols="B",table,%col2 
writer.endtx.metacols="E",table,%col2 
</pre>
<p>Then the begin transaction marker will be <code>"B","tabA","val2</code>" and the end marker will be <code>"E","tabB","val8".</code></p>
<p>If <code>numops</code> is used to output the number of operations in a transaction for either the begin or end markers, the user must also set:</p>
<pre>
goldengate.userexit.buffertxs=true 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
When this property is set, the adapter buffers transactions in memory, so care should be taken to limit the number of operations in the transactions being handled by the system.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="GADAD515" class="sect2"><a id="sthref100"></a>
<h3 class="sect2"><span class="secnum">8.2.5</span> DSV Specific Properties</h3>
<p><code>DSV</code> files have the following record format:</p>
<pre>
{[METACOL][FD]}<span class="keyword">n</span>{[COL][FD]}<span class="keyword">m</span>[LD] 
</pre>
<p>Where:</p>
<ul>
<li>
<p><code>METACOL</code> is any defined metadata column</p>
</li>
<li>
<p><code>COL</code> is any data column</p>
</li>
<li>
<p><code>FD</code> is the field delimiter</p>
</li>
<li>
<p><code>LD</code> is the line delimiter</p>
</li>
</ul>
<p>Column values may be quoted, <code>e.g. "2013-01-10 10:20:31","U","MY.TABLE", 2000,"DAVE"</code></p>
<div id="GADAD516" class="sect3"><a id="sthref101"></a>
<h4 class="sect3"><span class="secnum">8.2.5.1</span> <span class="italic">writer</span>.dsv.nullindicator.chars | <span class="italic">writer</span>.dsv.nullindicator.code</h4>
<p>Specifies the characters to use for <code>NULL</code> values in delimiter separated files. These values override the default <code>NULL</code> value of an empty string. Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. For example:</p>
<pre>
<span class="italic">writer</span>.dsv.nullindicator.chars=NULL 
<span class="italic">writer</span>.dsv.nullindicator.code=0a0a0a0a 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD517" class="sect3"><a id="sthref102"></a>
<h4 class="sect3"><span class="secnum">8.2.5.2</span> <span class="italic">writer</span>.dsv.fielddelim.chars | <span class="italic">writer</span>.dsv.fielddelim.code</h4>
<p>Specifies an override value for the field delimiter. The default is a comma (,). Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. For example:</p>
<pre>
# define the characters to use for field delimiters in DSV files 
<span class="italic">writer</span>.dsv.fielddelim.chars=| 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD518" class="sect3"><a id="sthref103"></a>
<h4 class="sect3"><span class="secnum">8.2.5.3</span> <span class="italic">writer</span>.dsv.linedelim.chars | <span class="italic">writer</span>.dsv.linedelim.code</h4>
<p>Specifies an override value for the line delimiter. The default is a new line character appropriate to the operating system. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. For example:</p>
<pre>
# define the characters to use for line delimiters in DSV files 
<span class="italic">writer</span>.dsv.linedelim.chars=\n 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD519" class="sect3"><a id="sthref104"></a>
<h4 class="sect3"><span class="secnum">8.2.5.4</span> <span class="italic">writer</span>.dsv.quote.chars | <span class="italic">writer</span>.dsv.quote.code</h4>
<p>Specifies an override value for the quote character. The default is a double quote ("). Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>.For example:</p>
<pre>
# define the characters to use for quotes in DSV files 
<span class="italic">writer</span>.dsv.quotes.chars=' 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD520" class="sect3"><a id="sthref105"></a>
<h4 class="sect3"><span class="secnum">8.2.5.5</span> <span class="italic">writer</span>.dsv.quotes.policy</h4>
<p>Controls the policy for applying quotes.</p>
<p>The syntax is:</p>
<pre>
<span class="italic">writer</span>.dsv.quotes.policy={default|none|always|datatypes} 
</pre>
<p>Where:</p>
<ul>
<li>
<p><span class="bold">default</span> &ndash; Only dates and chars are quoted</p>
</li>
<li>
<p><span class="bold">none</span> &ndash; No metadata column or column values are quoted</p>
</li>
<li>
<p><span class="bold">always</span> &ndash; All metadata columns and column values are quoted</p>
</li>
<li>
<p><span class="bold">datatypes</span> &ndash; Only specific data types are quoted</p>
</li>
</ul>
<p>If this property is set it will override the <code>dsv.quotealways</code> property. Use the <code>dsv.quotes.datatypes</code> property to specify which data types should be quoted.</p>
</div>
<!-- class="sect3" -->
<a id="i1016108"></a>
<div id="GADAD521" class="sect3">
<h4 class="sect3"><span class="secnum">8.2.5.6</span> <span class="italic">writer</span>.dsv.quotes.datatypes</h4>
<p>Controls whether integer, character, float, or datetime data types are to be quoted when <code>dsv.quotes.policy</code> is set to <code>datatype</code>.</p>
<p>The syntax is:</p>
<pre>
writer.dsv.quotes.datatypes=[char][,integer][,float][,date] 
</pre>
<p>For example the following instructs the adapter to quote characters and date time values only.</p>
<pre>
writer.dsv.quotes.datatypes=char,date 
</pre>
<p>If no data types are specified, the data types option defaults to all data types, which is equivalent to <code>always</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD522" class="sect3"><a id="sthref106"></a>
<h4 class="sect3"><span class="secnum">8.2.5.7</span> <span class="italic">writer</span>.dsv.nullindicator.escaped.chars | <span class="italic">writer</span>.dsv.nullindicator.escaped.code</h4>
<p>Specifies the escaped value for a null indicator. If set, all values will be checked for the null indicator value and replaced with the escaped value when output. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. For example:</p>
<pre>
# (optionally) you can define the characters (or code) to use  
# to escape these values if found in data values 
<span class="italic">writer</span>.dsv.nullindicator.escaped.chars=NULL 
</pre>
<p>This changes the null indicator to <code>NULL</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD591" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref107"></a>
<h4 class="sect3"><span class="secnum">8.2.5.8</span> <span class="italic">writer</span>.dsv.fielddelim.escaped.chars | <span class="italic">writer</span>.dsv.fielddelim.escaped.code</h4>
<p>Specifies the escaped value for a field delimiter. If set, all values will be checked for the field delimiter value and replaced with the escaped value when output. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. For example:</p>
<pre>
<span class="italic">writer</span>.dsv.fielddelim.escaped.chars=| 
</pre>
<p>This changes the field delimiter to <code>|</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD592" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref108"></a>
<h4 class="sect3"><span class="secnum">8.2.5.9</span> <span class="italic">writer</span>.dsv.linedelim.escaped.chars | <span class="italic">writer</span>.dsv.linedelim.escaped.code</h4>
<p>Specifies the escaped value for a line delimiter. If set, all values will be checked for the line delimiter value and replaced with the escaped value when output. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. For example:</p>
<pre>
<span class="italic">writer</span>.dsv.linedelim.escaped.chars=\n 
<span class="italic">writer</span>.dsv.linedelim.escaped.code=D
</pre>
<p>Both change the line delimiter to <code>\n</code>.</p>
</div>
<!-- class="sect3" -->
<div id="GADAD593" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref109"></a>
<h4 class="sect3"><span class="secnum">8.2.5.10</span> <span class="italic">writer</span>.dsv.quotes.escaped.chars | <span class="italic">writer</span>.dsv.quotes.escaped.code</h4>
<p>Specifies the escaped value for a field delimiter. If set, all values will be checked for the field delimiter value and replaced with the escaped value when output. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. For example:</p>
<pre>
<span class="italic">writer</span>.dsv.quotes.escaped.chars="" 
</pre>
<p>This changes the "some text" to ""some text"".</p>
</div>
<!-- class="sect3" -->
<div id="GADAD523" class="sect3"><a id="sthref110"></a>
<h4 class="sect3"><span class="secnum">8.2.5.11</span> <span class="italic">writer</span>.dsv.onecolperline</h4>
<p>Controls whether or not each column value is forced onto a new line. Each line will also contain the metadata columns defined for this writer. The default is false. For example:</p>
<pre>
# Force each column onto a new line with its own meta cols 
<span class="italic">writer</span>.dsv.onecolperline=true 
</pre>
<p>This changes:<code>{metacols},val_1,val_2</code> to</p>
<pre>
{metacols},val1 
{metacols},val2 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD524" class="sect3"><a id="sthref111"></a>
<h4 class="sect3"><span class="secnum">8.2.5.12</span> <span class="italic">writer</span>.dsv.quotealways</h4>
<p>Controls whether or not each column is surrounded by quotes, even if it is a numeric value. The default is false.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This property has been superseded by <code>dsv.quotes.policy</code> and is supported only for backward compatibility. The value set for <code>dsv.quotealways</code> is ignored if <code>dsv.quotes.policy</code> is set.</div>
<p>For example:</p>
<pre>
<span class="italic">writer</span>.dsv.quotealways=true 
</pre>
<p>Changes: <code>. . .,1234,"Hello",10</code> to <code>. . .,"1234","Hello","10</code>"</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="GADAD525" class="sect2"><a id="sthref112"></a>
<h3 class="sect2"><span class="secnum">8.2.6</span> LDV Specific Properties</h3>
<p>LDV files have the following record format:</p>
<pre>
[RECLEN][METACOLS]{[FLAG][LEN][VALUE]}<span class="keyword">n</span> 
</pre>
<p>Where:</p>
<ul>
<li>
<p><code>RECLEN</code> is the full record length in bytes</p>
</li>
<li>
<p><code>METACOLS</code> are all selected metadata columns</p>
</li>
<li>
<p><code>FLAG</code> can be (<code>M</code>)issing, (<code>P</code>)resent, or (<code>N</code>)ull</p>
</li>
<li>
<p><code>LEN</code> is the column values length (0 for missing and null)</p>
</li>
<li>
<p><code>VALUE</code> is the column value</p>
</li>
</ul>
<p>For example:</p>
<pre>
<span class="keyword">0107</span>2007-01-10 10:20:31U3<span class="keyword">02</span>MY<span class="keyword">05</span>TABLEP<span class="keyword">04</span>2000M<span class="keyword">00</span>N<span class="keyword">00</span>P<span class="keyword">04</span>DAVE 
</pre>
<div id="GADAD526" class="sect3"><a id="sthref113"></a>
<h4 class="sect3"><span class="secnum">8.2.6.1</span> <span class="italic">writer</span>.ldv.vals.missing.chars | <span class="italic">writer</span>.ldv.vals.missing.code</h4>
<p>Specifies override values for missing indicators. Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. For example:</p>
<pre>
writer.ldv.vals.missing.chars=MI 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD594" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref114"></a>
<h4 class="sect3"><span class="secnum">8.2.6.2</span> <span class="italic">writer</span>.ldv.vals.present.chars | <span class="italic">writer</span>.ldv.vals.present.code</h4>
<p>Specifies override values for present indicators. Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. For example:</p>
<pre>
writer.ldv.vals.present.chars=PR 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD595" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref115"></a>
<h4 class="sect3"><span class="secnum">8.2.6.3</span> <span class="italic">writer</span>.ldv.vals.null.chars | <span class="italic">writer</span>.ldv.vals.null.code</h4>
<p>Specifies override values for null indicators. Use ASCII values for <code>chars and</code> hexadecimal values for <code>code</code>. For example:</p>
<pre>
writer.ldv.vals.null.chars=NL 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD527" class="sect3"><a id="sthref116"></a>
<h4 class="sect3"><span class="secnum">8.2.6.4</span> <span class="italic">writer</span>.ldv.lengths.record.mode,<span class="italic">writer</span>. ldv.lengths.field.mode</h4>
<p>Controls the output mode of record and field lengths. The value can be either <code>binary</code> or <code>ASCII</code>. The default is <code>binary</code>.</p>
<p>If <code>binary</code>, the number written to the file will be encoded in binary bytes. If <code>ASCII</code>, characters representing the decimal value of the length will be used. For example:</p>
<pre>
writer.ldv.lengths.record.mode=binary 
writer.ldv.lengths.field.mode=binary 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD528" class="sect3"><a id="sthref117"></a>
<h4 class="sect3"><span class="secnum">8.2.6.5</span> <span class="italic">writer</span>.ldv.lengths.record.length, <span class="italic">writer</span>.ldv.lengths.field.length</h4>
<p>Specifies the record and field lengths as integer values. If the mode is <code>ASCII</code>, this represents the fixed number of decimal digits to use. If <code>binary,</code> it represents the number of bytes.</p>
<p>In ASCII mode the lengths can be any value, but the exit will stop if a length exceeds the maximum. In binary mode, the lengths can be 2,4, or 8 bytes, but record length must be greater than field length. For example:</p>
<pre>
# Lengths can be binary (2,4, or 8 bytes) or ASCII (any length) 
writer.ldv.lengths.record.length=4 
writer.ldv.lengths.field.length=2 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007379"></a>
<div id="GADAD529" class="sect2">
<h3 class="sect2"><span class="secnum">8.2.7</span> Statistics and Reporting</h3>
<p>There are two ways that statistics regarding the data written to data files can be obtained:</p>
<ul>
<li>
<p>As a report written to the Oracle GoldenGate report file</p>
</li>
<li>
<p>As a separate summary file associated with a data file on rollover</p>
</li>
</ul>
<p>These two mechanisms can be used together or separately.</p>
<p>The data that can be obtained includes, 1) the total records processed, broken down to inserts, updates, deletes; 2) records processed per table, also broken down; 3) total rate and rate per table; 4) delta for these since last report. Reporting can be time based, or synced to file rollover</p>
<p>This data can be written to the report file or as a summary file linked to a data file on rollover. The reporting format is fixed. The summary file contains the data in a delimited format, but related to the contents of a particular data file. This can be used by a data integration product to cross-check processing. It will have the same name as the data file, but a different extension.</p>
<div id="GADAD530" class="sect3"><a id="sthref118"></a>
<h4 class="sect3"><span class="secnum">8.2.7.1</span> <span class="italic">writer</span>.statistics.toreportfile</h4>
<p>Controls whether or not statistics are output to the Oracle GoldenGate report file. For example:</p>
<pre>
writer.statistics.toreportfile=true 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD531" class="sect3"><a id="sthref119"></a>
<h4 class="sect3"><span class="secnum">8.2.7.2</span> <span class="italic">writer</span>.statistics.period</h4>
<p>Specifies the time period for statistics. The value can be either <code>timebased</code> or <code>onrollover</code>.</p>
<p>For example:</p>
<pre>
writer.statistics.period=onrollover 
writer.statistics.period=timebased 
</pre>
<p>If <code>timebased</code>, the time period should be set in <code>statistics.time</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
These values are valid only for outputting statistics to the report file. Statistics will be output to the summary file only on rollover.</div>
</div>
<!-- class="sect3" -->
<div id="GADAD532" class="sect3"><a id="sthref120"></a>
<h4 class="sect3"><span class="secnum">8.2.7.3</span> <span class="italic">writer</span>.statistics.time</h4>
<p>Specifies a time interval in seconds after which statistics will be reported.</p>
<p>For example:</p>
<pre>
writer.statistics.time=5 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD533" class="sect3"><a id="sthref121"></a>
<h4 class="sect3"><span class="secnum">8.2.7.4</span> <span class="italic">writer</span>.statistics.tosummaryfile</h4>
<p>Controls whether or not a summary file containing statistics for each data file will be created on rollover.</p>
<p>The following example creates the summary file.</p>
<pre>
writer.statistics.tosummaryfile=true 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD534" class="sect3"><a id="sthref122"></a>
<h4 class="sect3"><span class="secnum">8.2.7.5</span> <span class="italic">writer</span>.statistics.summary.fileformat</h4>
<p>Controls the content of the summary files and the order in which the content is written. Multiple comma separated ASCII values can be specified.</p>
<p>Valid values are:</p>
<ul>
<li>
<p><span class="bold">catalog</span> &ndash; catalog of the schema to which the statistics relate</p>
</li>
<li>
<p><span class="bold">schema</span> &ndash; schema or owner of the table that the statistics relate to</p>
</li>
<li>
<p><span class="bold">table</span> &ndash; table that the statistics relate to</p>
</li>
<li>
<p><span class="bold">schemaandtable</span> &ndash; schema and table in one column separated by a period '.'</p>
</li>
<li>
<p><span class="bold">gtotal</span> &ndash; total number of records output for the specified table since the user exit was started</p>
</li>
<li>
<p><span class="bold">gtotaldetail</span> &ndash; total number of inserts, updates and deletes separated by the delimiter since the user exit was started</p>
</li>
<li>
<p><span class="bold">gctimestamp</span> &ndash; minimum and maximum commit timestamp for the specified table since user exit was started</p>
</li>
<li>
<p><span class="bold">ctimestamp</span> &ndash; minimum and maximum commit timestamps for the specified table in the related data file.</p>
</li>
<li>
<p><span class="bold">total</span> &ndash; total number of records output for the specified table in the related data file</p>
</li>
<li>
<p><span class="bold">totaldetail</span> &ndash; total number of inserts, updates and deletes output for the specified table in the related data file</p>
</li>
<li>
<p><span class="bold">rate</span> &ndash; average rate of output of data for the specified table in the related data file in records per second</p>
</li>
<li>
<p><span class="bold">ratedetail</span> &ndash; average rate of inserts, updates and deletes for the specified table in the related data file in records per second</p>
</li>
</ul>
<p>For example:</p>
<pre>
writer.statistics.summary.fileformat= 
   catalog,schema,table,total,totaldetail,gctimestamp,ctimestamp 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD535" class="sect3"><a id="sthref123"></a>
<h4 class="sect3"><span class="secnum">8.2.7.6</span> <span class="italic">writer</span>.statistics.overall</h4>
<p>Controls whether or not an additional statistics row is written to the summary files. This row contains the overall (across all tables) statistics defined by the user using the <code>statistics.summary.fileformat</code> property.</p>
<p>The following example will write this row.</p>
<pre>
writer.statistics.overall=true 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD536" class="sect3"><a id="sthref124"></a>
<h4 class="sect3"><span class="secnum">8.2.7.7</span> <span class="italic">writer</span>.statistics.summary.delimiter.chars/code, <span class="italic">writer</span>.statistics.summary.eol.chars/code</h4>
<p>Specifies override values for the field delimiter and end of line delimiter for the summary files. Use ASCII values for <code>chars</code> and hexadecimal values for <code>code</code>. The default is a comma ',' delimiter and new line character. For example:</p>
<pre>
writer.statistics.summary.delimiter.chars=| 
writer.statistics.summary.eol.code=0a0c 
</pre></div>
<!-- class="sect3" -->
<div id="GADAD537" class="sect3"><a id="sthref125"></a>
<h4 class="sect3"><span class="secnum">8.2.7.8</span> <span class="italic">writer</span>.statistics.summary.extension</h4>
<p>Specifies the override extension to use for the statistics summary file output per data file. The default is <code>stats</code>.</p>
<p>The following example changes the extension from .<code>stats</code> to .<code>statistics</code>.</p>
<pre>
writer.statistics.summary.extension=.statistics 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr>
<table class="cellalignment12">
<tr>
<td class="cellalignment19"><table class="cellalignment17">
<tr>
<td class="cellalignment16"><a href="flatfile_templates.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page"><br>
<span class="icon">Previous</span></a></td>

<td class="cellalignment16"><a href="java_msgcap_part.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page"><br>
<span class="icon">Next</span></a></td>
</tr>
</table></td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle"><br>
Copyright&nbsp;&copy;&nbsp;2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br>
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment21">
<table class="cellalignment15">
<tr>
<td class="cellalignment16"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home"><br>
<span class="icon">Home</span></a></td>
<td class="cellalignment16"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents"><br>
<span class="icon">Contents</span></a></td>
<td class="cellalignment16"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page"><br>
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
