<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml/DTD/xhtml1-transitional.dtd">
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<title>TABLE | MAP</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1056" />
<meta name="description" content="Contains instructions for using Oracle GoldenGate commands, parameters, and functions." />
<meta name="dcterms.created" content="2015-06-05T16:34:26Z" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Oracle&reg; GoldenGate Reference for Oracle GoldenGate for Windows and UNIX" />
<meta name="dcterms.identifier" content="E29392-08" />
<meta name="dcterms.isVersionOf" content="GWURF" />
<link rel="Start" href="../../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Prev" href="gg_parameters159.htm" title="Previous" type="text/html" />
<link rel="Next" href="gg_parameters161.htm" title="Next" type="text/html" />
<link rel="alternate" href="../GWURF.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="../GWURF.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="../GWURF.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Skip Headers</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns"><div id="BREADCRUMBS"><a href="http://docs.oracle.com">Home</a> / <a href="../../index.html">Middleware</a> / <a href="../index.html">Oracle GoldenGate for Windows and UNIX</a>
</div>

<span id="PAGE" style="display:none;">276/413</span>
<!-- End Header --><a id="i2100527"></a>
<div id="GWURF546" class="refsect1">
<h1 class="refsect1">TABLE | MAP</h1>
<div class="refsubsect"><p class="titleinrefsubsect"><a id="sthref1444"></a>Valid For</p>
<p><code dir="ltr">TABLE</code> is valid for Extract. <code dir="ltr">MAP</code> is valid for Replicat</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="sthref1445"></a>Description</p>
<p>The <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code> parameters control the selection, mapping, and manipulation of the objects that are to be affected by an Oracle GoldenGate process. These parameters work as follows:</p>
<ul>
<li>
<p>Use the <code dir="ltr">TABLE</code> parameter in an Extract parameter file to specify one or more objects that are to be captured from the data source by the Extract process. <code dir="ltr">TABLE</code> options specify processing work such as filtering and token definitions that must be performed before Extract writes the captured data to the Oracle GoldenGate trail.</p>
</li>
<li>
<p>Use the <code dir="ltr">MAP</code> parameter in the Replicat parameter file to map the data from the source objects to the appropriate target objects. <code dir="ltr">MAP</code> options specify processing work such as filtering, conversion, and error handling that must be performed before the data is applied to the target objects. Each target object that you want to synchronize with a source object must be associated with that source object by means of a <code dir="ltr">MAP</code> parameter. Multiple source-target relationships can be specified by means of a wildcard.</p>
</li>
</ul>
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code> are valid for initial load configurations and for online processes configured to support the replication of transactional changes.</p>
<p>You can process the following objects with <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>:</p>
<ul>
<li>
<p>Indexes</p>
</li>
<li>
<p>Triggers</p>
</li>
<li>
<p>Materialized views</p>
</li>
<li>
<p>Tables</p>
</li>
</ul>
<p>To specify a sequence for capture by Extract, use the <code dir="ltr">SEQUENCE</code> parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle GoldenGate supports the replication of the actual data values of Oracle materialized views. Oracle GoldenGate supports the replication of Oracle and Teradata DDL for indexes and triggers, but not the content of those objects.</div>
</div>
<!-- class="refsubsect" -->
<p>You can use one or more <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements in a parameter file, with or without wildcards, to specify all of the objects that you want to process.</p>
<p>You can exclude objects from a wildcarded <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement with the <a href="gg_parameters163.htm#i1177280">TABLEEXCLUDE</a> and <a href="gg_parameters100.htm#CIHIDAEI">MAPEXCLUDE</a> parameters. Additional exclusion parameters are <a href="gg_parameters018.htm#BABJIDDE">CATALOGEXCLUDE</a>, <a href="gg_parameters141.htm#BABFIJED">SCHEMAEXCLUDE</a>, and <a href="gg_parameters058.htm#BABCEGDG">EXCLUDEWILDCARDOBJECTSONLY</a>.</p>
<p>For more information about using <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>, see <a class="olink GWUAD391" href="../../gg-winux/GWUAD/wu_datainteg.htm#GWUAD391"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
<div class="refsubsect"><p class="titleinrefsubsect"><a id="sthref1446"></a>Default</p>
<p>None</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="sthref1447"></a>Syntax for TABLE</p>
<p>For tables, you can use all of the <code dir="ltr">TABLE</code> options. For non-table objects, use <code dir="ltr">TABLE</code> only to specify an object for capture.</p>
<pre dir="ltr">
TABLE <span class="codeinlineitalic">source_table</span>[, TARGET <span class="italic">target_table</span>]
[, COLMAP (<span class="codeinlineitalic">column_mapping</span>)]
[, {COLS | COLSEXCEPT} (<span class="codeinlineitalic">column_list</span>)]
[, {DEF | TARGETDEF} <span class="italic">template</span>]
[, EVENTACTIONS <span class="italic">action</span>]
[, EXITPARAM '<span class="italic">parameter</span>']
[, {FETCHCOLS | FETCHCOLSEXCEPT} (<span class="codeinlineitalic">column_list</span>)]
[, {FETCHMODCOLS | FETCHMODCOLSEXCEPT} (<span class="italic">column_list</span>)]
[, FETCHBEFOREFILTER]
[, FILTER (<span class="italic">filter_clause</span>)]
[, GETBEFORECOLS (<span class="codeinlineitalic">column_specification</span>)]
[, KEYCOLS (<span class="italic">columns</span>)]
[, SQLEXEC (<span class="italic">SQL_specification</span>)]
[, SQLPREDICATE 'WHERE <span class="italic">where_clause</span>']
[, TOKENS (<span class="italic">token_definition</span>)]
[, TRIMSPACES | NOTRIMSPACES]
[, TRIMVARSPACES | NOTRIMVARSPACES]
[, WHERE (<span class="italic">clause</span>)]
;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="sthref1448"></a>Syntax for MAP</p>
<pre dir="ltr">
MAP <span class="italic">source_table</span>, TARGET <span class="italic">target_table</span>
[, COLMAP (<span class="italic">column_mapping</span>)]
[, COMPARECOLS (<span class="codeinlineitalic">column_specification</span>)]
[, COORDINATED]
[, {DEF | TARGETDEF} <span class="italic">template</span>]
[, EXCEPTIONSONLY]
[, EXITPARAM '<span class="italic">parameter</span>']
[, EVENTACTIONS (<span class="italic">action</span>)]
[, FILTER (<span class="italic">filter_clause</span>)]
[, HANDLECOLLISIONS | NOHANDLECOLLISIONS]
[, INSERTALLRECORDS]
[, INSERTAPPEND | NOINSERTAPPEND]
[, KEYCOLS (<span class="italic">columns</span>)]
[, MAPEXCEPTION (<span class="codeinlineitalic">exceptions_mapping</span>)]
[, REPERROR (<span class="italic">error</span>, <span class="italic">response</span>)]
[, RESOLVECONFLICT (<span class="codeinlineitalic">conflict_resolution_specification</span>)]
[, SQLEXEC (<span class="italic">SQL_specification</span>)]
[, THREAD (<span class="codeinlineitalic">thread_ID</span>)]
[, THREADRANGE (<span class="codeinlineitalic">thread_range</span>[, <span class="codeinlineitalic">column_list</span>])]
[, TRIMSPACES | NOTRIMSPACES]
[, TRIMVARSPACES | NOTRIMVARSPACES]
[, WHERE (<span class="italic">clause</span>)]
;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="sthref1449"></a>TABLE and MAP Options</p>
<p>The following table summarizes the options that are available for the <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code> parameters. Note that not all options are valid for both parameters.</p>
</div>
<!-- class="refsubsect" -->
<div id="GWURF1026" class="tblhruleformal"><p class="titleintable"><a id="sthref1450"></a><a id="sthref1451"></a>Table 3-33 Summary of TABLE and MAP Syntax Components</p>
<table class="cellalignment145" title="Summary of TABLE and MAP Syntax Components" summary="This table describes the TABLE and MAP syntax components.">
<thead>
<tr class="cellalignment136">
<th class="cellalignment146" id="r1c1-t75">Component</th>
<th class="cellalignment146" id="r1c2-t75">Description</th>
<th class="cellalignment146" id="r1c3-t75">Valid For</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment136">
<td class="cellalignment142" id="r2c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGEIJIE">TABLE <span class="codeinlineitalic">source_table</span>[, TARGET <span class="codeinlineitalic">taget_table</span>] </a>
</pre></td>
<td class="cellalignment142" headers="r2c1-t75 r1c2-t75">
<p>Specifies the source object in a <code dir="ltr">TABLE</code> statement for Extract and an optional mapping to a target object. Use in the Extract parameter file.</p>
</td>
<td class="cellalignment142" headers="r2c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r3c1-t75" headers="r1c1-t75">
<p><a href="#CEGBBCHF"><code dir="ltr">MAP</code> <code dir="ltr"><span class="codeinlineitalic">source_table</span></code><code dir="ltr">, TARGET</code> <code dir="ltr"><span class="codeinlineitalic">target_table</span></code></a></p></td>
<td class="cellalignment142" headers="r3c1-t75 r1c2-t75">
<p>Specifies the source-target object mapping for the Replicat process. Use in the Replicat parameter file.</p>
</td>
<td class="cellalignment142" headers="r3c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r4c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2767670">COLMAP<span class="codeinlineitalic"> (column_mapping)</span></a>
</pre></td>
<td class="cellalignment142" headers="r4c1-t75 r1c2-t75">
<p>Maps records between different source and target columns.</p>
</td>
<td class="cellalignment142" headers="r4c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r5c1-t75" headers="r1c1-t75">
<p><a href="#CEGICBHB"><code dir="ltr">{COLS | COLSEXCEPT} (</code><code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></a></p></td>
<td class="cellalignment142" headers="r5c1-t75 r1c2-t75">
<p>Selects or excludes columns for processing.</p>
</td>
<td class="cellalignment142" headers="r5c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r6c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2790161">COMPARECOLS (<span class="codeinlineitalic">column_specification</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r6c1-t75 r1c2-t75">
<p>Specifies columns to use for conflict detection and resolution.</p>
</td>
<td class="cellalignment142" headers="r6c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r7c1-t75" headers="r1c1-t75">
<p><a href="#BABGIJJA"><code dir="ltr">COORDINATED</code></a></p></td>
<td class="cellalignment142" headers="r7c1-t75 r1c2-t75">
<p>Forces a transaction to be processed as a barrier transaction.</p>
</td>
<td class="cellalignment142" headers="r7c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r8c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2790163">{DEF| TARGETDEF} <span class="codeinlineitalic">template</span></a>
</pre></td>
<td class="cellalignment142" headers="r8c1-t75 r1c2-t75">
<p>Specifies a source-definitions or target-definitions template.</p>
</td>
<td class="cellalignment142" headers="r8c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r9c1-t75" headers="r1c1-t75">
<p><code dir="ltr"><a href="#i2790160"><code dir="ltr">EXCEPTIONSONLY</code></a></code></p></td>
<td class="cellalignment142" headers="r9c1-t75 r1c2-t75">
<p>Specifies that the <code dir="ltr">MAP</code> statement is an exceptions <code dir="ltr">MAP</code> statement.</p>
</td>
<td class="cellalignment142" headers="r9c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r10c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2016744">EVENTACTIONS (<span class="codeinlineitalic">action</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r10c1-t75 r1c2-t75">
<p>Triggers an action based on a record that satisfies a specified filter rule.</p>
</td>
<td class="cellalignment142" headers="r10c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r11c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i1053366">EXITPARAM '<span class="codeinlineitalic">parameter</span>'</a>
</pre></td>
<td class="cellalignment142" headers="r11c1-t75 r1c2-t75">
<p>Passes a parameter in the form of a literal string to a user exit.</p>
</td>
<td class="cellalignment142" headers="r11c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r12c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGCCHAG">FETCHBEFOREFILTER</a>
</pre></td>
<td class="cellalignment142" headers="r12c1-t75 r1c2-t75">
<p>Directs the <code dir="ltr">FETCHCOLS</code> or <code dir="ltr">FETCHCOLSEXCEPT</code> action to be performed before a filter is executed.</p>
</td>
<td class="cellalignment142" headers="r12c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r13c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGHBBED">{FETCHCOLS | FETCHCOLSEXCEPT} (<span class="codeinlineitalic">column_list</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r13c1-t75 r1c2-t75">
<p>Enables the fetching of column values from the source database when the values are not in the transaction record.</p>
</td>
<td class="cellalignment142" headers="r13c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r14c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGDFCEH">{FETCHMODCOLS | FETCHMODCOLSEXCEPT} (<span class="codeinlineitalic">column_list</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r14c1-t75 r1c2-t75">
<p>Forces column values to be fetched from the database when the columns are present in the transaction log.</p>
</td>
<td class="cellalignment142" headers="r14c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r15c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2016736">FILTER (<span class="codeinlineitalic">filter_clause</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r15c1-t75 r1c2-t75">
<p>Selects records based on a numeric value. <code dir="ltr">FILTER</code> provides more flexibility than <code dir="ltr">WHERE</code>.</p>
</td>
<td class="cellalignment142" headers="r15c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r16c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGJBFDC">GETBEFORECOLS (<span class="codeinlineitalic">column_specification</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r16c1-t75 r1c2-t75">
<p>Forces before images of columns to be captured and written to the trail.</p>
</td>
<td class="cellalignment142" headers="r16c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r17c1-t75" headers="r1c1-t75">
<p><code dir="ltr"><a href="#i2790159"><code dir="ltr">HANDLECOLLISIONS | NOHANDLECOLLISIONS</code></a></code></p></td>
<td class="cellalignment142" headers="r17c1-t75 r1c2-t75">
<p>Reconciles the results of changes made to the target table by an initial load process with those applied by a change-synchronization group.</p>
</td>
<td class="cellalignment142" headers="r17c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r18c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2790158">INSERTALLRECORDS</a>
</pre></td>
<td class="cellalignment142" headers="r18c1-t75 r1c2-t75">
<p>Applies all row changes as inserts.</p>
</td>
<td class="cellalignment142" headers="r18c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r19c1-t75" headers="r1c1-t75">
<p><code dir="ltr"><a href="#i2790157"><code dir="ltr">INSERTAPPEND | NOINSERTAPPEND</code></a></code></p></td>
<td class="cellalignment142" headers="r19c1-t75 r1c2-t75">
<p>Controls whether or not Replicat uses an Oracle <code dir="ltr">APPEND</code> hint for <code dir="ltr">INSERT</code> statements.</p>
</td>
<td class="cellalignment142" headers="r19c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r20c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i1146401">KEYCOLS (<span class="codeinlineitalic">columns</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r20c1-t75 r1c2-t75">
<p>Designates columns that uniquely identify rows.</p>
</td>
<td class="cellalignment142" headers="r20c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r21c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2790156">MAPEXCEPTION (<span class="codeinlineitalic">exceptions_mapping</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r21c1-t75 r1c2-t75">
<p>Specifies that the <code dir="ltr">MAP</code> statement contains exceptions handling for wildcarded tables.</p>
</td>
<td class="cellalignment142" headers="r21c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r22c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2790155">REPERROR (<span class="codeinlineitalic">error</span>, <span class="codeinlineitalic">response</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r22c1-t75 r1c2-t75">
<p>Controls how Replicat responds to errors when executing the <code dir="ltr">MAP</code> statement.</p>
</td>
<td class="cellalignment142" headers="r22c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r23c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2790154">RESOLVECONFLICT (<span class="codeinlineitalic">conflict_resolution_specification</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r23c1-t75 r1c2-t75">
<p>Specifies rules for conflict resolution.</p>
</td>
<td class="cellalignment142" headers="r23c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r24c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2312155">SQLEXEC (<span class="codeinlineitalic">SQL_specification</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r24c1-t75 r1c2-t75">
<p>Executes stored procedures and queries.</p>
</td>
<td class="cellalignment142" headers="r24c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r25c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGGGEIJ">SQLPREDICATE 'WHERE <span class="codeinlineitalic">where_clause</span>'</a>
</pre></td>
<td class="cellalignment142" headers="r25c1-t75 r1c2-t75">
<p>Enables a <code dir="ltr">WHERE</code> clause to select rows for an initial load.</p>
</td>
<td class="cellalignment142" headers="r25c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r26c1-t75" headers="r1c1-t75">
<p><a href="#BABHHEHH"><code dir="ltr">THREAD (</code><code dir="ltr"><span class="codeinlineitalic">thread_ID</span></code><code dir="ltr">)</code></a></p></td>
<td class="cellalignment142" headers="r26c1-t75 r1c2-t75">
<p>Valid for Replicat in coordinated mode. Specifies that the <code dir="ltr">MAP</code> statement will be processed by the specified Replicat thread.</p>
</td>
<td class="cellalignment142" headers="r26c1-t75 r1c3-t75">
<p><code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r27c1-t75" headers="r1c1-t75">
<p><a href="#BABIEAFI"><code dir="ltr">THREADRANGE (</code><code dir="ltr"><span class="codeinlineitalic">thread_range</span></code><code dir="ltr">,</code> <code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></a></p></td>
<td class="cellalignment142" headers="r27c1-t75 r1c2-t75">
<p>Valid for Replicat in coordinated mode. Specifies that the <code dir="ltr">MAP</code> statement will be processed by the specified range of Replicat threads.</p>
</td>
<td class="cellalignment142" headers="r27c1-t75 r1c3-t75">&nbsp;</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r28c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#CEGHEJII">TOKENS (<span class="codeinlineitalic">token_definition</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r28c1-t75 r1c2-t75">
<p>Defines user tokens.</p>
</td>
<td class="cellalignment142" headers="r28c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r29c1-t75" headers="r1c1-t75">
<p><code dir="ltr"><a href="#i2790153"><code dir="ltr">TRIMSPACES | NOTRIMSPACES</code></a></code></p></td>
<td class="cellalignment142" headers="r29c1-t75 r1c2-t75">
<p>Controls whether trailing spaces are trimmed or not when mapping <code dir="ltr">CHAR</code> to <code dir="ltr">VARCHAR</code> columns.</p>
</td>
<td class="cellalignment142" headers="r29c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r30c1-t75" headers="r1c1-t75">
<p><code dir="ltr"><a href="#i2790152"><code dir="ltr">TRIMVARSPACES | NOTRIMVARSPACES</code></a></code></p></td>
<td class="cellalignment142" headers="r30c1-t75 r1c2-t75">
<p>Controls whether trailing spaces are trimmed or not when mapping <code dir="ltr">VARCHAR</code> to <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR</code> columns.</p>
</td>
<td class="cellalignment142" headers="r30c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r31c1-t75" headers="r1c1-t75">
<pre dir="ltr">
<a href="#i2016740">WHERE (<span class="codeinlineitalic">clause</span>)</a>
</pre></td>
<td class="cellalignment142" headers="r31c1-t75 r1c2-t75">
<p>Selects records based on conditional operators.</p>
</td>
<td class="cellalignment142" headers="r31c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r32c1-t75" headers="r1c1-t75">
<p>;</p>
</td>
<td class="cellalignment142" headers="r32c1-t75 r1c2-t75">
<p>(Semicolon) Terminates the <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement and is required.</p>
</td>
<td class="cellalignment142" headers="r32c1-t75 r1c3-t75">
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGEIJIE"></a><code dir="ltr">TABLE</code> <code dir="ltr"><span class="codeinlineitalic">source_table</span></code><code dir="ltr">[, TARGET</code> <code dir="ltr"><span class="codeinlineitalic">taget_table</span></code><code dir="ltr">]</code></p>
<p><code dir="ltr">TABLE</code> is valid in an Extract parameter file.</p>
<p>Use <code dir="ltr">TABLE</code> to specify a source object for which you want Extract to capture data. Specify the fully qualified two-part or three-part name of the object, such as <code dir="ltr"><span class="codeinlineitalic">schema.table</span></code> or <code dir="ltr"><span class="codeinlineitalic">catalog.schema.table</span></code>. You can use a wildcard to specify multiple objects with one <code dir="ltr">TABLE</code> statement. To specify object names and wildcards correctly, see <a class="olink GWUAD192" href="../../gg-winux/GWUAD/wu_gettingstarted.htm#GWUAD192"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
<p>Use the <code dir="ltr">TARGET</code> option only when Extract must refer to a target definitions file (specified with the <code dir="ltr">TARGETDEFS</code> parameter) to perform conversions or when the <code dir="ltr">COLMAP</code> option is used to map columns. Otherwise, it can be omitted from a <code dir="ltr">TABLE</code> parameter. Column mapping with <code dir="ltr">COLMAP</code> and conversion work usually are performed on the target system to minimize the impact of replication activities on the source system, but can be performed on the source system if required. For example, column mapping and conversion can be performed on the source system in a configuration where there are multiple sources and one target. In this scenario, it may be easier to manage one target definitions file rather than managing a definitions file for each source database, especially if there are frequent application changes that require new definitions files to be generated.</p>
<p>Using <code dir="ltr">TARGET</code> in a <code dir="ltr">TABLE</code> parameter identifies the metadata of the extracted data based on the target structure, rather than that of the source, to reflect the structure of the record that is reflected in the definitions file or the column map. Do not use three-part names if <code dir="ltr">TARGET</code> specifies tables in a target Oracle container database or SQL/MX database. Replicat can only connect to one container or catalog, so it is assumed that the container or catalog portion of the name is the same as the one that Replicat logs into (as specified with <code dir="ltr">USERID</code>, <code dir="ltr">USERIDALIAS</code>, or <code dir="ltr">TARGETDB</code>, depending on the database).</p>
<p>If no other <code dir="ltr">TABLE</code> syntax options are required to process the specified source data, you can use a simple <code dir="ltr">TABLE</code> statement, making sure to terminate it with a semicolon.</p>
<pre dir="ltr">
TABLE sales.customers;
</pre>
<p>The following shows the use of a wildcard to specify multiple tables:</p>
<pre dir="ltr">
TABLE sales.*;
</pre>
<p>The preceding <code dir="ltr">TABLE</code> statements direct Extract to capture all supported column data for the specified objects and write it to the trail without performing any filtering, conversion, or other manipulation.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGBBCHF"></a><code dir="ltr">MAP</code> <code dir="ltr"><span class="codeinlineitalic">source_table</span></code><code dir="ltr">, TARGET</code> <code dir="ltr"><span class="codeinlineitalic">target_table</span></code></p>
<p><code dir="ltr">MAP</code> is valid in a Replicat parameter file.</p>
<p>Use <code dir="ltr">MAP</code> to specify a source object, and use <code dir="ltr">TARGET</code> to specify the target object to which Replicat applies the replicated source data. Together, the <code dir="ltr">MAP</code> and <code dir="ltr">TARGET</code> clause comprise a <span class="italic">mapping</span>.</p>
<ul>
<li>
<p>For <code dir="ltr">MAP</code> <code dir="ltr"><span class="codeinlineitalic">source_table</span></code>, specify the source object. Specify the fully qualified two-part or three-part name of the object, such as <code dir="ltr"><span class="codeinlineitalic">schema.table</span></code> or <code dir="ltr"><span class="codeinlineitalic">catalog.schema.table</span></code>. You can use a wildcard to specify multiple source objects.</p>
</li>
<li>
<p>For <code dir="ltr">TARGET</code> <code dir="ltr"><span class="codeinlineitalic">target_table</span></code>, specify a two-part name, even if the target is a container database or SQL/MX database. Replicat can only connect to one container or catalog, so it is assumed that the container or catalog portion of the name is the same as the one that Replicat logs into (as specified with <code dir="ltr">USERID</code>, <code dir="ltr">USERIDALIAS</code>, or <code dir="ltr">TARGETDB</code>, depending on the database). You can use a wildcard to specify multiple target objects.</p>
</li>
</ul>
<p>The following shows the use of a wildcard to specify multiple tables. Note that the <code dir="ltr">TARGET</code> clause does not include the <code dir="ltr">tab</code> prefix before the wildcard. That specification would be invalid, because the wildcard would be resolved as <code dir="ltr">sales.tabtab1</code>, <code dir="ltr">sales.tabtab2</code>, and so forth.</p>
<pre dir="ltr">
MAP sales.tab*, TARGET sales.*;
</pre>
<p>To specify object names and wildcards correctly in the <code dir="ltr">MAP</code> and <code dir="ltr">TARGET</code> clauses, see <a class="olink GWUAD192" href="../../gg-winux/GWUAD/wu_gettingstarted.htm#GWUAD192"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
<p>If no filtering, mapping, or other work is required for the objects, you can use simple <code dir="ltr">MAP</code> statements like the following, making sure to terminate each one with a semicolon.</p>
<pre dir="ltr">
MAP sales.customers, TARGET sales.customers;
MAP fin.*, TARGET fin.*;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2767670"></a><code dir="ltr">COLMAP</code> <code dir="ltr"><span class="codeinlineitalic">(column_mapping)</span></code></p>
<p><code dir="ltr">COLMAP</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">COLMAP</code> to:</p>
<ul>
<li>
<p>Map individual source columns to target columns when the source and target columns have different names.</p>
</li>
<li>
<p>Specify default column mapping when the source and target names are identical.</p>
</li>
</ul>
<p><code dir="ltr">COLMAP</code> provides instructions for selecting, translating, and moving column data from a source column to a target column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To create <span class="italic">global</span> rules for column mapping across all tables in subsequent <code dir="ltr">MAP</code> statements, use the <code dir="ltr">COLMATCH</code> parameter.</div>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1452"></a>Getting More Information about Configuring Column Mapping</p>
<p>See <a class="olink GWUAD405" href="../../gg-winux/GWUAD/wu_datainteg.htm#GWUAD405"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for more information about using <code dir="ltr">COLMAP</code>. To use <code dir="ltr">COLMAP</code>, related configuration considerations must be taken into account, such as whether source and target column structures are identical or different and whether global column mapping parameters may be sufficient.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1453"></a>Syntax</p>
<pre dir="ltr">
COLMAP (
[USEDEFAULTS, ]
<span class="italic">target_column</span> = <span class="italic">source_expression</span> [BINARYINPUT]
[, ...]
)
</pre>
<dl>
<dt><code dir="ltr">USEDEFAULTS</code></dt>
<dd>
<p>Automatically maps source and target columns that have the same name if they were not specified in an explicit column mapping. The data types are translated automatically, as needed, based on the local data-definitions file. <code dir="ltr">USEDEFAULTS</code> eliminates the need for an explicit column mapping if those columns have the same name and the data does not require any filtering or conversion.</p>
<p>Specify <code dir="ltr">USEDEFAULTS</code> before explicit column mappings in the <code dir="ltr">COLMAP</code> clause. For additional information about default column mapping in <code dir="ltr">COLMAP</code>, see <a class="olink GWUAD900" href="../../gg-winux/GWUAD/wu_datainteg.htm#GWUAD900"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">target_column = source_expression</span></code></dt>
<dd>
<p>Defines an explicit source-target column mapping.</p>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">target_column</span></code></dt>
<dd>
<p>Specifies the name of the target column. For supported characters in column names, see <a class="olink GWUAD192" href="../../gg-winux/GWUAD/wu_gettingstarted.htm#GWUAD192"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">source_expression</span></code></dt>
<dd>
<p>Can be any of the following:</p>
<ul>
<li>
<p>The name of a source column, such as <code dir="ltr">ORD_DATE</code></p>
</li>
<li>
<p>A numeric constant, such as <code dir="ltr">123</code></p>
</li>
<li>
<p>A string constant within single quotes, such as <code dir="ltr">'ABCD'</code></p>
</li>
<li>
<p>An expression using an Oracle GoldenGate column-conversion function, such as <code dir="ltr">@STREXT (COL1, 1, 3)</code>. See <a href="column_conversion_functions.htm#i1110551">"Column Conversion Functions"</a> for more information.</p>
</li>
</ul>
</dd>
</dl>
</dd>
<dt><code dir="ltr">BINARYINPUT</code></dt>
<dd>
<p>Use <code dir="ltr">BINARYINPUT</code> when the target column is defined as a binary data type, such as <code dir="ltr">RAW</code> or <code dir="ltr">BLOB</code>, but the source input contains binary zeros in the middle of the data. Use <code dir="ltr">BINARYINPUT</code> when replicating a full Enscribe record defined as a single column into a target column. The source input is handled as binary input, and replacement of data values is suppressed.</p>
</dd>
</dl>
<dl>
<dd><a id="GWURF548"></a><a id="sthref1454"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<pre dir="ltr">
MAP ggs.tran, TARGET ggs.tran2, COLMAP (loc2 = loc, type2 = type);
</pre></dd>
<dd><a id="GWURF550"></a><a id="sthref1455"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<pre dir="ltr">
TABLE ggs.tran, COLMAP (SECTION = @STRCAT('\u00a7', SECTION ));
</pre></dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGICBHB"></a><code dir="ltr">{COLS | COLSEXCEPT} (</code><code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">COLS</code> and <code dir="ltr">COLSEXCEPT</code> are valid for <code dir="ltr">TABLE</code>.</p>
<p>Use <code dir="ltr">COLS</code> and <code dir="ltr">COLSEXCEPT</code> to control the columns for which data is captured.</p>
<ul>
<li>
<p><code dir="ltr">COLS</code> specifies columns that contain the data that you want to capture. When <code dir="ltr">COLS</code> is used, all columns that are not in the <code dir="ltr">COLS</code> list are ignored by Oracle GoldenGate.</p>
</li>
<li>
<p><code dir="ltr">COLSEXCEPT</code> specifies columns to exclude from being captured. When <code dir="ltr">COLSEXCEPT</code> is used, all columns that are not in the <code dir="ltr">COLSEXCEPT</code> list are captured by Oracle GoldenGate. For tables with numerous columns, <code dir="ltr">COLSEXCEPT</code> may be more efficient than listing each column with <code dir="ltr">COLS</code>.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Do <span class="italic">not</span> exclude key columns, and do <span class="italic">not</span> use <code dir="ltr">COLSEXCEPT</code> to exclude columns that contain data types that are not supported by Oracle GoldenGate. <code dir="ltr">COLSEXCEPT</code> does not exclude unsupported data types.</div>
</li>
</ul>
<p>To use <code dir="ltr">COLS</code>, the following is required:</p>
<ul>
<li>
<p>The table must have one or more key columns, or a substitute key must be defined with the <code dir="ltr">KEYCOLS</code> option. See <a href="#i1146401">"<code dir="ltr">KEYCOLS (</code><code dir="ltr"><span class="codeinlineitalic">columns</span></code><code dir="ltr">)</code>"</a>.</p>
</li>
<li>
<p>The key columns or the columns specified with <code dir="ltr">KEYCOLS</code> must be included in the column list that is specified with <code dir="ltr">COLS</code>. Otherwise, they will not be captured, and an error will be generated during processing.</p>
</li>
</ul>
<p>Without a primary key, a unique key, or a <code dir="ltr">KEYCOLS</code> clause in the <code dir="ltr">TABLE</code> statement, Oracle GoldenGate uses all of the columns in the table, rendering <code dir="ltr">COLS</code> unnecessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use this option for tables that are processed in pass-through mode by a data-pump Extract group.</div>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1456"></a>Syntax</p>
<pre dir="ltr">
{COLS | COLSEXCEPT} (<span class="italic">column</span> [, ...])
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">column</span></code></dt>
<dd>
<p>The name of a column. To specify multiple columns, create a comma-delimited list, for example:</p>
<pre dir="ltr">
COLS (name, city, state, phone)
</pre></dd>
</dl>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the database only logs values for columns that were changed in an update operation, a column specified for capture with <code dir="ltr">COLS</code> might not be available. To make those columns available, use the <code dir="ltr">FETCHCOLS</code> option in the <code dir="ltr">TABLE</code> statement or enable supplemental logging for the column.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1457"></a>Example</p>
<p>The <code dir="ltr">COLS</code> clause in this example captures <span class="italic">only</span> columns 1 and 3, whereas the <code dir="ltr">COLSEXCEPT</code> clause captures all columns <span class="italic">except</span> columns 1 and 3.</p>
<pre dir="ltr">
TABLE hq.acct, COLS (col1, col3);
TABLE hq.sales, COLSEXCEPT (col1, col3);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790161"></a><code dir="ltr">COMPARECOLS (</code><code dir="ltr"><span class="codeinlineitalic">column_specification</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">COMPARECOLS</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">COMPARECOLS</code> to specify the columns that Replicat uses to detect and resolve update or delete conflicts when configured with the <code dir="ltr">RESOLVECONFLICT</code> option of <code dir="ltr">MAP</code> in a multi-master configuration. A conflict is a mismatch between the before image of a record in the trail and the correct data in the target table.</p>
<p>To use <code dir="ltr">COMPARECOLS</code>, the before image must be available in the trail record by means of the <code dir="ltr">GETBEFORECOLS</code> parameter in the Extract <code dir="ltr">TABLE</code> statement. The specified columns must exist in the target database and also be part of the Replicat configuration (satisfy the <code dir="ltr">TARGET</code> specification with or without a <code dir="ltr">COLMAP</code> clause).</p>
<p>Only scalar data types are supported by <code dir="ltr">COMPARECOLS</code> as comparison columns. A scalar data type can be used in a <code dir="ltr">WHERE</code> clause, has a single, atomic value and no internal components. Scalar data types supported by Oracle GoldenGate include the following, but not LOBs.</p>
<ul>
<li>
<p>Numeric data types</p>
</li>
<li>
<p>Date data types</p>
</li>
<li>
<p>Character data types</p>
</li>
</ul>
<p>Some examples of non-scalar data types are spatial data, user-defined data types, large objects (LOB), XML, reference data types, and RAW. A row being considered for CDR can include non-scalar data so long as the conflict is not in the non-scalar data itself.</p>
<p>To specify conflict resolution routines, use the <code dir="ltr">RESOLVECONFLICT</code> option of <code dir="ltr">MAP</code>. <code dir="ltr">COMPARECOLS</code> and <code dir="ltr">RESOLVECONFLICT</code> can be in any order in the <code dir="ltr">MAP</code> statement.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1458"></a>Getting More Information about Configuring the CDR Feature</p>
<p>See <a class="olink GWUAD314" href="../../gg-winux/GWUAD/wu_bidirectional.htm#GWUAD314"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for more information about configuring conflict detection and resolution.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1459"></a>Syntax</p>
<pre dir="ltr">
COMPARECOLS(
{ON UPDATE | ON DELETE}
{ALL | KEY | KEYINCLUDING (<span class="codeinlineitalic">col</span>[,...]) | ALLEXCLUDING (<span class="codeinlineitalic">col</span>[,...]) }
[,...]
)
</pre>
<dl>
<dt><code dir="ltr">{ON UPDATE | ON DELETE}</code></dt>
<dd>
<p>Specifies whether the before image of the specified columns should be compared for updates or deletes. You can use <code dir="ltr">ON UPDATE</code> only, <code dir="ltr">ON DELETE</code> only, or both. If using both, specify them within the same <code dir="ltr">COMPARECOLS</code> clause. See the example for how to use both.</p>
</dd>
<dt><code dir="ltr">{ALL | KEY | KEYINCLUDING (</code><code dir="ltr"><span class="codeinlineitalic">col</span></code><code dir="ltr">[,...]) | ALLEXCLUDING (</code><code dir="ltr"><span class="codeinlineitalic">col</span></code><code dir="ltr">[,...])}</code></dt>
<dd>
<p>Specifies the columns for which a before image is captured.</p>
<dl>
<dt><code dir="ltr">ALL</code></dt>
<dd>
<p>Compares using all columns in the target table. An error is generated if any corresponding before images are not available in the trail. Using <code dir="ltr">ALL</code> imposes the highest processing load for Replicat, but allows conflict-detection comparisons to be performed using all columns for maximum accuracy.</p>
</dd>
<dt><code dir="ltr">KEY</code></dt>
<dd>
<p>Compares only the primary key columns. This is the fastest option, but does not permit the most accurate conflict detection, because keys can match but non-key columns could be different.</p>
</dd>
<dt><code dir="ltr">KEYINCLUDING</code></dt>
<dd>
<p>Compares the primary key columns and the specified column or columns. This is a reasonable compromise between speed and detection accuracy.</p>
</dd>
<dt><code dir="ltr">ALLEXCLUDING</code></dt>
<dd>
<p>Compares all columns except the specified columns. For tables with numerous columns, <code dir="ltr">ALLEXCLUDING</code> may be more efficient than <code dir="ltr">KEYINCLUDING</code>. Do <span class="italic">not</span> exclude key columns.</p>
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><a id="GWURF551"></a><a id="sthref1460"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In the following example, the key columns plus the <code dir="ltr">name</code>, <code dir="ltr">address</code>, and <code dir="ltr">salary</code> columns are compared for conflicts.</p>
<pre dir="ltr">
MAP src, TARGET tgt
COMPARECOLS (
ON UPDATE KEYINCLUDING (name, address, salary),
ON DELETE KEYINCLUDING (name, address, salary));
</pre></dd>
<dd><a id="GWURF552"></a><a id="sthref1461"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In the following example, the <code dir="ltr">comment</code> column is ignored and all other columns are compared for conflicts.</p>
<pre dir="ltr">
MAP src, TARGET tgt
COMPARECOLS (ON UPDATE ALLEXCLUDING (comment))
</pre></dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="BABGIJJA"></a><code dir="ltr">COORDINATED</code></p>
<p><code dir="ltr">COORDINATED</code> is valid for <code dir="ltr">MAP</code>. This option is valid when Replicat is in coordinated mode.</p>
<p>Use the <code dir="ltr">COORDINATED</code> option to force transactions made on objects in the same <code dir="ltr">MAP</code> statement to be processed as barrier transactions. It causes all of the threads across all <code dir="ltr">MAP</code> statements to synchronize to the same trail location. The synchronized position is the beginning of the transaction that contains a record that satisfies a <code dir="ltr">MAP</code> that contains the <code dir="ltr">COORDINATED</code> keyword. The transaction is then applied atomically by a single thread, which is either the thread with the lowest thread ID among the currently running threads or a dedicated thread with the ID of 0 if <code dir="ltr">USEDEDICATEDCOORDINATIONTHREAD</code> is specified in the parameter file.</p>
<p><code dir="ltr">THREAD</code> and <code dir="ltr">THREADRANGE</code> clauses specified in conjunction with <code dir="ltr">COORDINATED</code> are ignored because the record will not be applied by the designated thread(s). The <code dir="ltr">COORDINATED</code> keyword results in temporarily suspending parallelism so that the target tables are in a consistent state before the force-coordinated transaction is applied. After this point, parallel execution commences again.</p>
<p>Replicat by default coordinates transactions in which the primary key is updated, transactions that perform DDL, and certain <code dir="ltr">EVENTACTIONS</code> actions. <code dir="ltr">COORDINATED</code> provides for explicit coordination.</p>
<p>See <a class="olink GWUAD" href="../../gg-winux/GWUAD/toc.htm"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for more information about coordinated Replicat.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1462"></a>Syntax</p>
<pre dir="ltr">
COORDINATED
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1463"></a>Example</p>
<p>The following is an example of the use of the <code dir="ltr">COORDINATED</code> option. In this example, business rules require that the target tables be in a consistent state before Replicat executes transactions that include <code dir="ltr">SQLEXEC</code> operations on the objects specified in the <code dir="ltr">MAP</code> statement. Parallelism must be temporarily converted to serial SQL processing in this case.</p>
<p>Given the following <code dir="ltr">MAP</code> statement, if another thread inserts into <code dir="ltr">t2</code> a record with a value of 100 for <code dir="ltr">col_val</code> before the insert to <code dir="ltr">t1</code> is performed by thread 1, then the <code dir="ltr">SQLEXEC</code> will delete the row. If other threads are still processing the record that has the value of 100, the <code dir="ltr">SQLEXEC</code> fails. The results of this <code dir="ltr">MAP</code> statement are, therefore, not predictable.</p>
<pre dir="ltr">
MAP u1.t1, TARGET u2.t1 SQLEXEC (ID test2, QUERY ' delete from u2.t2 where col_val =100 ', NOPARAMS)), THREAD(1);
</pre>
<p>Conversely, when <code dir="ltr">COORDINATED</code> is used, all of the threads synchronize at a common point, including the one processing the <code dir="ltr">col_val=100</code> record, thereby removing the ambiguity of the results.</p>
<pre dir="ltr">
MAP u1.t1, TARGET u2.t1 SQLEXEC (ID test2, QUERY ' delete from u2.t2 where col_val =100 ', NOPARAMS)), THREAD(1), COORDINATED;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790163"></a><code dir="ltr">{DEF| TARGETDEF}</code> <code dir="ltr"><span class="codeinlineitalic">template</span></code></p>
<p><code dir="ltr">DEF</code> and <code dir="ltr">TARGETDEF</code> are valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">DEF</code> and <code dir="ltr">TARGETDEF</code> to specify the name of a definitions template that was created by the DEFGEN utility.</p>
<ul>
<li>
<p><code dir="ltr">DEF</code> specifies a source-definitions template.</p>
</li>
<li>
<p><code dir="ltr">TARGETDEF</code> specifies a target-definitions template.</p>
</li>
</ul>
<p>A template is based on the definitions of a specific table. It enables new tables that have the same definitions as the original table to be added to the Oracle GoldenGate configuration without running <code dir="ltr">DEFGEN</code> for them, and without having to stop and start the Oracle GoldenGate process. The definitions in the template are used for definitions lookups.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1464"></a>Getting More Information about Creating Definitions Templates</p>
<p>For more information about templates and <code dir="ltr">DEFGEN</code>, see <a class="olink GWUAD473" href="../../gg-winux/GWUAD/wu_data_definitions.htm#GWUAD473"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1465"></a>Syntax</p>
<pre dir="ltr">
{DEF | TARGETDEF} <span class="italic">template</span>
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">template</span></code></dt>
<dd>
<p>The name of one of the following definitions templates generated by the DEFGEN utility:</p>
<ul>
<li>
<p>Use <code dir="ltr">DEF</code> to specify a source-definitions template generated by the <code dir="ltr">DEF</code> option of the <code dir="ltr">TABLE</code> parameter in the DEFGEN parameter file.</p>
</li>
<li>
<p>Use <code dir="ltr">TARGETDEF</code> to specify a target-definitions template generated by the <code dir="ltr">TARGETDEF</code> option of the <code dir="ltr">TABLE</code> parameter in the DEFGEN parameter file.</p>
</li>
</ul>
<p>The definitions contained in the template must be identical to the definitions of the table or tables that are specified in the same <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement.</p>
<p>Case-sensitivity of the template name is observed when the name is specified the same way that it is stored in the database. Make certain that the template name is specified the same way in both the <code dir="ltr">DEF</code> or <code dir="ltr">TARGETDEF</code> clause in this <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement, and in the <code dir="ltr">DEFGEN</code> parameter file that created the template.</p>
</dd>
</dl>
<dl>
<dd><a id="GWURF553"></a><a id="sthref1466"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example shows a case-insensitive template name.</p>
<pre dir="ltr">
MAP acct.cust*, TARGET acct.cust*, DEF custdef;
</pre></dd>
<dd><a id="GWURF554"></a><a id="sthref1467"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example shows a case-sensitive template name when the database requires quotes to enforce case-sensitivity.</p>
<pre dir="ltr">
TABLE acct.cust*, DEF "CustDef";
</pre></dd>
<dd><a id="GWURF1027"></a><a id="sthref1468"></a></dd>
<dt class="seghead">Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example shows a case where both <code dir="ltr">DEF</code> and <code dir="ltr">TARGETDEF</code> are used.</p>
<pre dir="ltr">
MAP acct.cust*, TARGET acc.cust*, DEF custdef, TARGETDEF tcustdef;
</pre></dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790160"></a><code dir="ltr">EXCEPTIONSONLY</code></p>
<p><code dir="ltr">EXCEPTIONSONLY</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">EXCEPTIONSONLY</code> in an exceptions <code dir="ltr">MAP</code> statement intended for error handling. The exceptions <code dir="ltr">MAP</code> statement must follow the <code dir="ltr">MAP</code> statement for which errors are anticipated. The exceptions <code dir="ltr">MAP</code> statement executes only if an error occurs for the last record processed in the preceding regular <code dir="ltr">MAP</code> statement.</p>
<p>To use <code dir="ltr">EXCEPTIONSONLY</code>, use a <code dir="ltr">REPERROR</code> statement with the <code dir="ltr">EXCEPTION</code> option either within the regular <code dir="ltr">MAP</code> statement or at the root of the parameter file. See <a href="gg_parameters126.htm#i1214605">"REPERROR"</a> for more information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If using the Oracle GoldenGate Conflict Detection and Resolution (CDR) feature, a <code dir="ltr">REPERROR</code> with <code dir="ltr">EXCEPTION</code> is not needed. CDR automatically sends all operations that cause errors to the exceptions <code dir="ltr">MAP</code> statement.</div>
<p>The exceptions <code dir="ltr">MAP</code> statement must specify the same source table as in the regular <code dir="ltr">MAP</code> statement, but the target table in the exceptions <code dir="ltr">MAP</code> statement must be an exceptions table. When using an exceptions <code dir="ltr">MAP</code> statement, do not use wildcarded object names in the regular <code dir="ltr">MAP</code> statement.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See <a href="#i2790156">"<code dir="ltr">MAPEXCEPTION (</code><code dir="ltr"><span class="codeinlineitalic">exceptions_mapping</span></code><code dir="ltr">)</code>"</a> to support wildcarded object names.</div>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1469"></a>Getting More Information about Configuring Exceptions Handling</p>
<p>For more information about configuring exceptions handling with an exceptions <code dir="ltr">MAP</code> statement, see <a class="olink GWUAD497" href="../../gg-winux/GWUAD/wu_errorhandling.htm#GWUAD497"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1470"></a>Syntax</p>
<pre dir="ltr">
EXCEPTIONSONLY
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2016744"></a><code dir="ltr">EVENTACTIONS (</code><code dir="ltr"><span class="codeinlineitalic">action</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">EVENTACTIONS</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>. Some options apply only to one or the other parameter and are noted as such in the descriptions.</p>
<p>Use <code dir="ltr">EVENTACTIONS</code> to cause the process to take a defined action based on a record in the trail, known as the <span class="italic">event record</span>, that qualifies for a specific filter rule. You can use this system, known as the <span class="italic">event marker system</span> (or <span class="italic">event marker infrastructure</span>) to customize processing based on database events. For example, you can suspend a process to perform a transformation or report statistics. The event marker feature is supported for the replication of data changes, but not for initial loads.</p>
<p>To trigger actions that do not require data to be applied to target tables, you can use the Replicat <code dir="ltr">TABLE</code> parameter with filtering options that support <code dir="ltr">EVENTACTIONS</code>. See <a href="gg_parameters162.htm#i2779083">"TABLE for Replicat"</a> for more information.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
<code dir="ltr">EVENTACTIONS</code> is not supported if the source database is Teradata and Extract is configured in maximum performance mode.</div>
<p>You may need to combine two or more actions to achieve your goals. When multiple actions are combined, the entire <code dir="ltr">EVENTACTIONS</code> statement is parsed first, and then the specified options execute in order of precedence. The following list shows the order of precedence. The actions listed before <code dir="ltr">Process the record</code> occur before the record is written to the trail or applied to the target (depending on the process). Actions listed after <code dir="ltr">Process the record</code> are executed after the record is processed.</p>
<br />
<code dir="ltr">TRACE</code><br />
<code dir="ltr">LOG</code><br />
<code dir="ltr">CHECKPOINT BEFORE</code><br />
<code dir="ltr">DISCARD</code><br />
<code dir="ltr">SHELL</code><br />
<code dir="ltr">ROLLOVER</code><br />
(Process the record)<br />
<code dir="ltr">IGNORE</code><br />
<code dir="ltr">REPORT</code><br />
<code dir="ltr">SUSPEND</code><br />
<code dir="ltr">ABORT</code><br />
<code dir="ltr">CHECKPOINT AFTER</code><br />
<code dir="ltr">FORCESTOP</code><br />
<code dir="ltr">STOP</code><br />
<p>To prevent the event record itself from being processed in the normal manner, use the <code dir="ltr">IGNORE</code> or <code dir="ltr">DISCARD</code> option. Because <code dir="ltr">IGNORE</code> and <code dir="ltr">DISCARD</code> are evaluated before the record itself, they prevent the record from being processed. Without those options, <code dir="ltr">EVENTACTIONS</code> for Extract writes the record to the trail, and <code dir="ltr">EVENTACTIONS</code> for Replicat applies that operation to the target database.</p>
<p>You should take into account the possibility that a transaction could contain two or more records that trigger an event action. In such a case, there could be multiple executions of certain <code dir="ltr">EVENTACTIONS</code> specifications. For example, encountering two qualifying records that trigger two successive <code dir="ltr">ROLLOVER</code> actions will cause Extract to roll over the trail twice, leaving one of the two files empty of transaction data.</p>
<p>You should also take into account that when the <code dir="ltr">GETUPDATEBEFORES</code> parameter is in effect, two records are generated for <code dir="ltr">UPDATE</code> operations: a record that contains the before image and a record that contains the after image. An event action is triggered for each of those records when the operation qualifies as an event record. You can use the <code dir="ltr">BEFOREAFTERINDICATOR</code> token of the <code dir="ltr">GGHEADER</code> column-conversion function as a filter in a <code dir="ltr">FILTER</code> clause to qualify the records so that the event action triggers only once, either on the before record or the after record, but not both.</p>
<p>The following example filters on the <code dir="ltr">BEFORE</code> indicator. The <code dir="ltr">EVENTACTION</code> issues the <code dir="ltr">ECHO</code> shell command to output the string 'Triggered on <code dir="ltr">BEFORE</code>' to the event log when a <code dir="ltr">BEFORE</code> record is encountered.</p>
<pre dir="ltr">
TABLE qasource.test, &amp; 
FILTER(@STRFIND('BEFORE', @GETENV('GGHEADER' , 'BEFOREAFTERINDICATOR')) &gt; 0), &amp;
EVENTACTIONS ( shell ('echo --== Triggered on BEFORE ==-- '), LOG);
 
</pre>
<p>The following shows the result of the event action:</p>
<pre dir="ltr">
013-03-06 17:59:31  INFO    OGG-05301  Shell command output: '--== Triggered 
on AFTER ==--'
 
</pre>
<p>The following example does the same thing, but for the <code dir="ltr">AFTER</code> indicator.</p>
<pre dir="ltr">
TABLE qasource.test, &amp; 
FILTER(@STRFIND('AFTER', @GETENV('GGHEADER' , 'BEFOREAFTERINDICATOR')) &gt; 0), &amp; 
EVENTACTIONS ( shell ('echo --== Triggered on AFTER ==-- '), LOG);
</pre>
<p>In a Teradata configuration where Extract is configured in maximum protection mode, use <code dir="ltr">EVENTACTIONS</code> only in the VAM-sort Extract group. It is not supported by the primary Extract in this configuration because concurrent changes are not sorted in transaction order at this point in the processing stream. For more information, see <span class="italic">Installing and Configuring Oracle GoldenGate for Teradata</span>.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1471"></a>Getting More Information about Configuring the Event Marker System</p>
<p>See <a class="olink GWUAD622" href="../../gg-winux/GWUAD/wu_customcode.htm#GWUAD622"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for more information about using <code dir="ltr">EVENTACTIONS</code> and the Event Marker System.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1472"></a>Syntax</p>
<pre dir="ltr">
EVENTACTIONS (
[STOP | SUSPEND | ABORT | FORCESTOP]
[IGNORE [RECORD | TRANSACTION [INCLUDEVENT]]
[DISCARD]
[LOG [INFO | WARNING]]
[REPORT]
[ROLLOVER]
[SHELL '<span class="italic">command</span>' |
  SHELL ('<span class="italic">command</span>', VAR <span class="italic">variable</span> = {<span class="italic">column_name</span> | <span class="italic">expression</span>}
  [, ...]) ]
[TRACE[2] <span class="italic">file</span> [TRANSACTION] [DDL[INCLUDE] | DDLONLY] [PURGE | APPEND]]
[CHECKPOINT [BEFORE | AFTER | BOTH]]
[, ...]
)
</pre>
<dl>
<dt><code dir="ltr">STOP</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Brings the process to a graceful stop when the specified event record is encountered. The process waits for other operations within event transaction to be completed before stopping. If the transaction is a Replicat grouped or batched transaction, the current group of transactions are applied before the process stops gracefully. The process restarts at the next record after the event record, so long as that record also signified the end of a transaction.</p>
<p>The process logs a message if it cannot stop immediately because a transaction is still open. However, if the event record is encountered within a long-running open transaction, there is no warning message that alerts you to the uncommitted state of the transaction. Therefore, the process may remain running for a long time despite the <code dir="ltr">STOP</code> event.</p>
<p><code dir="ltr">STOP</code> can be combined with other <code dir="ltr">EVENTACTIONS</code> options except for <code dir="ltr">ABORT</code> and <code dir="ltr">FORCESTOP</code>.</p>
</dd>
<dt><code dir="ltr">SUSPEND</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Pauses the process so that it retains the active context of the current run and can still respond to <code dir="ltr">SEND</code> commands that are issued in GGSCI. When a process is suspended, the <code dir="ltr">INFO</code> command shows it as <code dir="ltr">RUNNING</code>, and the <code dir="ltr">RBA</code> field shows the last checkpoint position.</p>
<p>To resume processing, issue the <code dir="ltr">SEND</code> command with the <code dir="ltr">RESUME</code> option.</p>
<p>To use the <code dir="ltr">CHECKPOINT BEFORE</code> option in conjunction with <code dir="ltr">SUSPEND</code>, the event record must be the start of a transaction for the <code dir="ltr">SUSPEND</code> to take place. That way, if the process is killed while in the suspended state, the event record with the <code dir="ltr">SUSPEND</code> action is the first record to be reprocessed upon restart. If both <code dir="ltr">CHECKPOINT BERORE</code> and <code dir="ltr">SUSPEND</code> are specified, but the event record is not the start of a transaction, the process abends before <code dir="ltr">SUSPEND</code> can take place.</p>
<p>To use the <code dir="ltr">CHECKPOINT AFTER</code> option in conjunction with <code dir="ltr">SUSPEND</code>, the <code dir="ltr">RESUME</code> command must be issued before the checkpoint can take place, and the event record must be a <code dir="ltr">COMMIT</code> record. If the process is killed while in a <code dir="ltr">SUSPEND</code> state, the process reprocesses the transaction from the last checkpointed position upon restart.</p>
<p><code dir="ltr">SUSPEND</code> cannot be combined with <code dir="ltr">ABORT</code> but can be combined with all other options.</p>
</dd>
<dt><code dir="ltr">ABORT</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Forces the process to exit immediately when the specified event record is encountered, whether or not there are open transactions. The event record is not processed. A fatal error is written to the log, and the event record is written to the discard file if <code dir="ltr">DISCARD</code> is also specified. The process will undergo recovery on startup.</p>
<p><code dir="ltr">ABORT</code> can be combined only with <code dir="ltr">CHECKPOINT BEFORE</code>, <code dir="ltr">DISCARD</code>, <code dir="ltr">SHELL</code>, and <code dir="ltr">REPORT</code>.</p>
</dd>
<dt><code dir="ltr">FORCESTOP</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Forces the process to stop gracefully when the specified event record is encountered, but only if the event record is the last operation in the transaction or the only record in the transaction. The record is written normally.</p>
<p>If the event record is encountered within a long-running open transaction, the process writes a warning message to the log and exits immediately, as in <code dir="ltr">ABORT</code>. In this case, recovery may be required on startup. If the <code dir="ltr">FORCESTOP</code> action is triggered in the middle of a long-running transaction, the process exits without a warning message.</p>
<p><code dir="ltr">FORCESTOP</code> can be combined with other <code dir="ltr">EVENTACTIONS</code> options except for <code dir="ltr">ABORT</code>, <code dir="ltr">STOP</code>, <code dir="ltr">CHECKPOINT AFTER</code>, and <code dir="ltr">CHECKPOINT BOTH</code>. If used with <code dir="ltr">ROLLOVER</code>, the rollover only occurs if the process stops gracefully.</p>
</dd>
<dt><code dir="ltr">IGNORE [RECORD | TRANSACTION [INCLUDEVENT]]</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Ignores some or all of the transaction, depending on the selected action.</p>
<ul>
<li>
<p><code dir="ltr">RECORD</code> is the default. It forces the process to ignore only the specified event record, but not the rest of the transaction. No warning or message is written to the log, but the Oracle GoldenGate statistics are updated to show that the record was ignored.</p>
</li>
<li>
<p>Use <code dir="ltr">TRANSACTION</code> to ignore the entire transaction that contains the record that triggered the event. If <code dir="ltr">TRANSACTION</code> is used, the event record must be the first one in the transaction. When ignoring a transaction, the event record is also ignored by default. <code dir="ltr">TRANSACTION</code> can be shortened to <code dir="ltr">TRANS</code>.</p>
</li>
<li>
<p>Use <code dir="ltr">INCLUDEEVENT</code> with <code dir="ltr">TRANSACTION</code> to propagate the event record to the trail or to the target, but ignore the rest of the associated transaction.</p>
</li>
</ul>
<p><code dir="ltr">IGNORE</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">ABORT</code> and <code dir="ltr">DISCARD</code>.</p>
<p>An <code dir="ltr">IGNORE</code> action is processed after all the qualification, filtering, mapping, and user-exit operations are processed. The record or transaction is ignored in the final output phase and prevents the record or transaction from being written to the output target (the trail in the case of Extract or the database in the case of Replicat). Therefore, in certain expressions, for example those that include <code dir="ltr">SQLEXEC</code> operations, the <code dir="ltr">SQLEXEC</code> will be executed before the <code dir="ltr">IGNORE</code> is processed. This means that, while the record is not written to the trail or target database, all of the effects of processing the record through qualification, filtering, mapping and user-exit will occur.</p>
<p>This action is not valid for DDL records. Because DDL operations are autonomous, ignoring a record is equivalent to ignoring the entire transaction.</p>
</dd>
<dt><code dir="ltr">DISCARD</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes the process to:</p>
<ul>
<li>
<p>write the specified event record to the discard file.</p>
</li>
<li>
<p>update the Oracle GoldenGate statistics to show that the record was discarded.</p>
</li>
</ul>
<p>The process resumes processing with the next record in the trail.</p>
<p><code dir="ltr">DISCARD</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">IGNORE</code>.</p>
</dd>
<dt><code dir="ltr">LOG [INFO | WARNING]</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes the process to log the event when the specified event record is encountered. The message is written to the report file, to the Oracle GoldenGate error log, and to the system event log.</p>
<p>Use the following options to specify the severity of the message:</p>
<ul>
<li>
<p><code dir="ltr">INFO</code> specifies a low-severity informational message. This is the default.</p>
</li>
<li>
<p><code dir="ltr">WARNING</code> specifies a high-severity warning message.</p>
</li>
</ul>
<p><code dir="ltr">LOG</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">ABORT</code>. If using <code dir="ltr">ABORT</code>, <code dir="ltr">LOG</code> is not needed because <code dir="ltr">ABORT</code> logs a fatal error before the process exits.</p>
</dd>
<dt><code dir="ltr">REPORT</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes the process to generate a report file when the specified event record is encountered. This is the same as using the <code dir="ltr">SEND</code> command with the <code dir="ltr">REPORT</code> option in GGSCI.</p>
<p>The <code dir="ltr">REPORT</code> message occurs after the event record is processed (unless <code dir="ltr">DISCARD</code>, <code dir="ltr">IGNORE</code>, or <code dir="ltr">ABORT</code> are used), so the report data will include the event record.</p>
<p><code dir="ltr">REPORT</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options.</p>
</dd>
<dt><code dir="ltr">ROLLOVER</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract.</p>
<p>Causes Extract to roll over the trail to a new file when the specified event record is encountered. The <code dir="ltr">ROLLOVER</code> action occurs before Extract writes the event record to the trail file, which causes the record to be the first one in the new file unless <code dir="ltr">DISCARD</code>, <code dir="ltr">IGNORE</code> or <code dir="ltr">ABORT</code> are also used.</p>
<p><code dir="ltr">ROLLOVER</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">ABORT</code>. <code dir="ltr">ROLLOVER</code> cannot be combined with <code dir="ltr">ABORT</code> because <code dir="ltr">ROLLOVER</code> does not cause the process to write a checkpoint, and <code dir="ltr">ROLLOVER</code> happens before <code dir="ltr">ABORT</code>.</p>
<p>Without a <code dir="ltr">ROLLOVER</code> checkpoint, <code dir="ltr">ABORT</code> causes Extract to go to its previous checkpoint upon restart, which would be in the previous trail file. In effect, this cancels the rollover.</p>
</dd>
<dt><code dir="ltr">SHELL '</code><code dir="ltr"><span class="codeinlineitalic">command'</span></code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes the process to execute the specified shell command when the event record is encountered. <code dir="ltr">SHELL '</code><code dir="ltr"><span class="codeinlineitalic">command'</span></code> executes a basic shell command. The command string is taken at its literal value and sent to the system that way. The command is case-sensitive. Enclose the command string within single quote marks, for example:</p>
<pre dir="ltr">
EVENTACTIONS (SHELL 'echo hello world! &gt; output.txt')
</pre>
<p>If the shell command is successful, the process writes an informational message to the report file and to the event log. Success is based upon the exit status of the command in accordance with the UNIX shell language. In that language, zero indicates success.</p>
<p>If the system call is not successful, the process abends with a fatal error. In the UNIX shell language, non-zero equals failure. Note that the error message relates only to the execution of the <code dir="ltr">SHELL</code> command itself, and not the exit status of any subordinate commands. For example, <code dir="ltr">SHELL</code> can execute a script successfully, but commands in that script could fail.</p>
<p><code dir="ltr">SHELL</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options.</p>
</dd>
<dt><code dir="ltr">SHELL ('</code><code dir="ltr"><span class="codeinlineitalic">command</span></code><code dir="ltr">', VAR</code> <code dir="ltr"><span class="codeinlineitalic">variable</span></code> <code dir="ltr">= {</code><code dir="ltr"><span class="codeinlineitalic">column_name</span></code> <code dir="ltr">|</code> <code dir="ltr"><span class="codeinlineitalic">expression</span></code><code dir="ltr">} [, ...])</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes the process to execute the specified shell command when the event record is encountered and supports parameter passing. The command and the parameters are case-sensitive.</p>
<p>When <code dir="ltr">SHELL</code> is used with arguments, the entire command and argument strings must be enclosed within parentheses, for example:</p>
<pre dir="ltr">
EVENTACTIONS (SHELL ('Current timestamp: $1  SQLEXEC result is $2 ',VAR $1 = @GETENV('JULIANTIMESTAMP'),VAR $2 = mytest.description));
</pre>
<p>The input is as follows:</p>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">command</span></code></dt>
<dd>
<p>Is the command, which is passed literally to the system.</p>
</dd>
<dt><code dir="ltr">VAR</code></dt>
<dd>
<p>Is a required keyword that starts the parameter input.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">variable</span></code></dt>
<dd>
<p>Is the user-defined name of the placeholder variable where the run-time variable value will be substituted. Extra variables that are not used in the command are ignored. Note that any literal in the <code dir="ltr">SHELL</code> command that matches a <code dir="ltr">VAR</code> variable name is replaced by the substituted <code dir="ltr">VAR</code> value. This may have unintended consequences, so test your code before putting it into production.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">column_name</span></code></dt>
<dd>
<p>Can be the before or after (current) image of a column value.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">expression</span></code></dt>
<dd>
<p>can be the following, depending on whether column data or DDL is being handled.</p>
<ul>
<li>
<p>Valid expressions for column data:</p>
<ul>
<li>
<p>The value from a <code dir="ltr">TOKENS</code> clause in a <code dir="ltr">TABLE</code> statement.</p>
</li>
<li>
<p>A return value from any Oracle GoldenGate column-conversion function.</p>
</li>
<li>
<p>A return value from a <code dir="ltr">SQLEXEC</code> query or procedure.</p>
</li>
</ul>
</li>
<li>
<p>Valid expressions for DDL:</p>
<ul>
<li>
<p>Return value from <code dir="ltr">@TOKEN</code> function (Replicat only).</p>
</li>
<li>
<p>Return value from <code dir="ltr">@GETENV</code> function.</p>
</li>
<li>
<p>Return value from other functions that do not reference column data (for example, <code dir="ltr">@DATENOW</code>).</p>
</li>
<li>
<p>Return value from <code dir="ltr">@DDL</code> function.</p>
</li>
</ul>
</li>
</ul>
</dd>
</dl>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">TRACE[2]</span></code> <code dir="ltr"><span class="codeinlineitalic">file</span></code> <code dir="ltr">[TRANSACTION] [DDL[INCLUDE] | DDLONLY] [PURGE | APPEND]</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes process trace information to be written to a trace file when the specified event record is encountered. <code dir="ltr">TRACE</code> provides step-by-step processing information. <code dir="ltr">TRACE2</code> identifies the code segments on which the process is spending the most time.</p>
<p>By default (without options), standard DML tracing without consideration of transaction boundaries is enabled until the process terminates.</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">file</span></code> specifies the name of the trace file and must appear immediately after the <code dir="ltr">TRACE</code> keyword. You can specify a unique trace file, or use the default trace file that is specified with the standalone <code dir="ltr">TRACE</code> or <code dir="ltr">TRACE2</code> parameter.</p>
<p>The same trace file can be used across different <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements in which <code dir="ltr">EVENTACTIONS</code> <code dir="ltr">TRACE</code> is used. If multiple <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements specify the same trace file name, but the <code dir="ltr">TRACE</code> options are not used consistently, preference is given to the options in the last resolved <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> that contains this trace file.</p>
</li>
<li>
<p>Use <code dir="ltr">TRANSACTION</code> to enable tracing only until the end of the current transaction, instead of when the process terminates. For Replicat, transaction boundaries are based on the source transaction, not the typical Replicat grouped or batched target transaction. <code dir="ltr">TRANSACTION</code> can be shortened to <code dir="ltr">TRANS</code>. This option is valid only for DML operations.</p>
</li>
<li>
<p><code dir="ltr">DDL[INCLUDE]</code> traces DDL and also DML transactional data processing. Either <code dir="ltr">DDL</code> or <code dir="ltr">DDLINCLUDE</code> is valid.</p>
</li>
<li>
<p><code dir="ltr">DDLONLY</code> traces DDL but does not trace DML transactional data.</p>
<p>These options are valid only for Replicat. By default DDL tracing is disabled.</p>
</li>
<li>
<p>Use <code dir="ltr">PURGE</code> to truncate the trace file before writing additional trace records, or use <code dir="ltr">APPEND</code> to write new trace records at the end of the existing records. <code dir="ltr">APPEND</code> is the default.</p>
</li>
</ul>
<p><code dir="ltr">TRACE</code> can be combined with all other <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">ABORT</code>.</p>
<p>To disable tracing to the specified trace file, issue the GGSCI <code dir="ltr">SEND</code> <code dir="ltr"><span class="codeinlineitalic">process</span></code> command with the <code dir="ltr">TRACE OFF</code> <code dir="ltr"><span class="codeinlineitalic">file_name</span></code> option.</p>
</dd>
<dt><code dir="ltr">CHECKPOINT [BEFORE | AFTER | BOTH]</code></dt>
<dd>
<p>Valid in <code dir="ltr">TABLE</code> for Extract and in <code dir="ltr">MAP</code> for Replicat.</p>
<p>Causes the process to write a checkpoint when the specified event record is encountered. Checkpoint actions provide a context around the processing that is defined in <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements. This context has a begin point and an end point, thus providing synchronization points for mapping the functions that are performed with <code dir="ltr">SQLEXEC</code> and user exits.</p>
<dl>
<dt><code dir="ltr">BEFORE</code></dt>
<dd>
<p><code dir="ltr">BEFORE</code> for an Extract process writes a checkpoint before Extract writes the event record to the trail. <code dir="ltr">BEFORE</code> for a Replicat process writes a checkpoint before Replicat applies the SQL operation that is contained in the record to the target.</p>
<p><code dir="ltr">BEFORE</code> requires the event record to be the first record in a transaction. If it is not the first record, the process will abend. Use <code dir="ltr">BEFORE</code> to ensure that all transactions prior to the one that begins with the event record are committed.</p>
<p>When using <code dir="ltr">EVENTACTIONS</code> for a DDL record, note that since each DDL record is autonomous, the DDL record is guaranteed to be the start of a transaction; therefore the <code dir="ltr">CHECKPOINT BEFORE</code> event action is implied for a DDL record.</p>
<p><code dir="ltr">CHECKPOINT BEFORE</code> can be combined with all <code dir="ltr">EVENTACTIONS</code> options.</p>
</dd>
<dt><code dir="ltr">AFTER</code></dt>
<dd>
<p><code dir="ltr">AFTER</code> for Extract writes a checkpoint after Extract writes the event record to the trail. <code dir="ltr">AFTER</code> for Replicat writes a checkpoint after Replicat applies the SQL operation that is contained in the record to the target.</p>
<p><code dir="ltr">AFTER</code> flags the checkpoint request as an advisory, meaning that the process will only issue a checkpoint at the next practical opportunity. For example, in the case where the event record is one of a multi-record transaction, the checkpoint will take place at the next transaction boundary, in keeping with the Oracle GoldenGate data-integrity model.</p>
<p>When using <code dir="ltr">EVENTACTIONS</code> for a DDL record, note that since each DDL record is autonomous, the DDL record is guaranteed to be the end (boundary) of a transaction; therefore the <code dir="ltr">CHECKPOINT AFTER</code> event action is implied for a DDL record.</p>
<p><code dir="ltr">CHECKPOINT AFTER</code> can be combined with all <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">ABORT.</code></p>
</dd>
<dt><code dir="ltr">BOTH</code></dt>
<dd>
<p><code dir="ltr">BOTH</code> combines <code dir="ltr">BEFORE</code> and <code dir="ltr">AFTER</code>. The Extract or Replicat process writes a checkpoint before and after it processes the event record.</p>
<p><code dir="ltr">CHECKPOINT BOTH</code> can be combined with all <code dir="ltr">EVENTACTIONS</code> options except <code dir="ltr">ABORT.</code></p>
</dd>
</dl>
<p><code dir="ltr">CHECKPOINT</code> can be shortened to <code dir="ltr">CP</code>.</p>
</dd>
</dl>
<dl>
<dd><a id="GWURF555"></a><a id="sthref1473"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following example shows how you can configure a process to ignore certain records. When Extract processes any trail record that has <code dir="ltr">name = abc</code>, it ignores the record.</p>
<pre dir="ltr">
TABLE fin.cust, &amp;
WHERE (name = 'abc'), &amp;
EVENTACTIONS (ignore);
</pre></dd>
<dd><a id="GWURF556"></a><a id="sthref1474"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>Based on the compatibility and precedence rules of <code dir="ltr">EVENTACTIONS</code> options, <code dir="ltr">DISCARD</code> takes higher precedence than <code dir="ltr">ABORT</code>, so in this example the event record gets written to the discard file before the process abends.</p>
<pre dir="ltr">
MAP fin.cust, TARGET fin.cust2, &amp;
WHERE (name = 'abc'), &amp;
EVENTACTIONS (DISCARD, ABORT);
</pre></dd>
<dd><a id="GWURF557"></a><a id="sthref1475"></a></dd>
<dt class="seghead">Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following example executes a <code dir="ltr">SHELL</code> action. It gets the result of a <code dir="ltr">SQLEXEC</code> query and pairs it with the current timestamp.</p>
<pre dir="ltr">
TABLE src.tab &amp;
SQLEXEC (id mytest, query 'select description from lookup &amp;
where pop = :mycol2', params (mycol2 = col2) ), &amp;
EVENTACTIONS (SHELL ('Current timestamp: $1  SQLEXEC result is $2 ', &amp;
VAR $1 = @GETENV('JULIANTIMESTAMP'), VAR $2 = mytest.description));
</pre>
<p>The shell command that results from this example could be similar to the following:</p>
<pre dir="ltr">
'Current timestamp: 212156002704718000  SQLEXEC result is test passed'
</pre></dd>
<dd><a id="GWURF558"></a><a id="sthref1476"></a></dd>
<dt class="seghead">Example 4&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following example shows how invalid results can occur if a placeholder name conflicts with literal text in the command string. In this example, a placeholder named <code dir="ltr">$1</code> is associated with a column value, and the <code dir="ltr">SHELL</code> command echoes a literal string that includes <code dir="ltr">$1</code>.</p>
<pre dir="ltr">
MAP src.tab1, TARGET targ.tab1 &amp;
EVENTACTIONS (SHELL ('echo Extra charge for $1 is $1', VAR $1 = COL1));
</pre>
<p>This is the unintended result, assuming the column value is <code dir="ltr">gift wrap</code>:</p>
<pre dir="ltr">
'Extra charge for gift wrap is gift wrap'
</pre>
<p>Changing the placeholder variable to <code dir="ltr">$col</code> results in the correct output:</p>
<pre dir="ltr">
MAP src.tab1, TARGET targ.tab1 &amp;
EVENTACTIONS (SHELL ('echo Extra charge for $col is $1', VAR $col = COL1));
'Extra charge for gift wrap is $1'
</pre>
<p>The following shows similar potential for unintended results:</p>
<pre dir="ltr">
MAP src.tab1, TARGET targ.tab1 &amp;
EVENTACTIONS (SHELL ('Timestamp: $1  Price is $13 &gt; out.txt ', &amp;
VAR $1 = @GETENV('JULIANTIMESTAMP')));
</pre>
<p>The redirected output file might contain a string like this (notice the second timestamp contains an appended value of <code dir="ltr">3</code>):</p>
<pre dir="ltr">
'Timestamp: 212156002704718000 Price is 2121560027047180003'
</pre>
<p>The intended result is this:</p>
<pre dir="ltr">
'Timestamp: 212156002704718000 Price is $13'
</pre></dd>
<dd><a id="GWURF560"></a><a id="sthref1477"></a></dd>
<dt class="seghead">Example 5&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>These examples show different ways to configure tracing.</p>
<pre dir="ltr">
MAP tab1, TARGET tab1 EVENTACTIONS (TRACE ./dirrpt/trace1.txt);
MAP tab2, TARGET tab2 EVENTACTIONS (TRACE ./dirrpt/trace2.txt TRANSACTION);
</pre>
<ul>
<li>
<p>In the first <code dir="ltr">MAP</code> statement, the <code dir="ltr">trace1.txt</code> trace file is generated just before the first <code dir="ltr">tab1</code> event record is applied to the target. It contains all of the tracing information from that point forward until Replicat terminates or unless tracing is turned off with the GGSCI <code dir="ltr">SEND REPLICAT</code> command.</p>
</li>
<li>
<p>Because the second <code dir="ltr">MAP</code> statement contains the <code dir="ltr">TRANSACTION</code> option, the <code dir="ltr">trace2.txt</code> file is generated just before the first <code dir="ltr">tab2</code> event record is applied to the target, but the tracing stops automatically at the conclusion of the transaction that contains the <code dir="ltr">tab2</code> event record.</p>
</li>
</ul>
</dd>
<dd><a id="GWURF561"></a><a id="sthref1478"></a></dd>
<dt class="seghead">Example 6&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>The following shows how <code dir="ltr">EVENTACTIONS</code> with <code dir="ltr">SUSPEND</code> can be used.</p>
<ul>
<li>
<p><span class="italic">Case 1</span>: You are replicating DDL, and you want to ensure that there is enough space in the target database to create a new table. Use <code dir="ltr">EVENTACTIONS</code> with <code dir="ltr">SUSPEND</code> in the <code dir="ltr">MAP</code> statement that maps the <code dir="ltr">CREATE TABLE DDL</code> operation, and then execute a SQL statement in that <code dir="ltr">MAP</code> statement to query the amount of space remaining in a tablespace. If there is enough space, use <code dir="ltr">SEND REPLICAT</code> with <code dir="ltr">RESUME</code> to resume processing immediately; if not, leave Replicat suspended until a DBA can add the space, and then use <code dir="ltr">SEND REPLICAT</code> with <code dir="ltr">RESUME</code> to resume processing.</p>
</li>
<li>
<p><span class="italic">Case 2</span>: You want to fix unique key violations when they occur on any table. Because Replicat is processing thousands of tables, you do not want to stop the process each time there is a violation, because this would cause Replicat to spend time rebuilding the object cache again upon restart. By using <code dir="ltr">EVENTACTIONS</code> with <code dir="ltr">SUSPEND</code>, you can simply suspend processing until the problem is fixed.</p>
</li>
<li>
<p><span class="italic">Case 3</span>: At the end of the day, you suspend Replicat to run daily reports, and then resume processing immediately without stopping and restarting the process.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i1053366"></a><code dir="ltr">EXITPARAM '</code><code dir="ltr"><span class="codeinlineitalic">parameter</span></code><code dir="ltr">'</code></p>
<p><code dir="ltr">EXITPARAM</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">EXITPARAM</code> to pass a parameter to the <code dir="ltr">EXIT_PARAMS</code> function of a user exit routine whenever a record from the <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement is encountered.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1479"></a>Getting More Information about User Exits</p>
<p>See <a class="olink GWUAD607" href="../../gg-winux/GWUAD/wu_customcode.htm#GWUAD607"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for instructions on how to configure user exits.</p>
<p>See <a href="user_exit_functions.htm#g1216113">"User Exit Functions"</a> for more information about the syntax for the user exits.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1480"></a>Syntax</p>
<pre dir="ltr">
EXITPARAM '<span class="italic">parameter string</span>'
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">'parameter string'</span></code></dt>
<dd>
<p>A parameter that is a literal string. Enclose the parameter within single quotes. You can specify up to 100 characters for the parameter string.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGCCHAG"></a><code dir="ltr">FETCHBEFOREFILTER</code></p>
<p><code dir="ltr">FETCHBEFOREFILTER</code> is valid for <code dir="ltr">TABLE</code>.</p>
<p>Use <code dir="ltr">FETCHBEFOREFILTER</code> to fetch columns that are specified with <code dir="ltr">FETCHCOLS</code> or <code dir="ltr">FETCHCOLSEXCEPT</code> before a <code dir="ltr">FILTER</code> operation is executed. Fetching before the filter ensures that values required for the filter are available. Without <code dir="ltr">FETCHBEFOREFILTER</code>, fetches specified with <code dir="ltr">FETCHCOLS</code> or <code dir="ltr">FETCHCOLSEXCEPT</code> are not performed until after filters are executed. Specify <code dir="ltr">FETCHBEFOREFILTER</code> before <code dir="ltr">FILTER</code> in the parameter file.</p>
<p>Do not use this option for tables being processed in pass-through mode by a data-pump Extract group.</p>
<p><code dir="ltr">FETCHBEFOREFILTER</code> is not supported for the SQL/MX database.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1481"></a>Syntax</p>
<pre dir="ltr">
FETCHBEFOREFILTER
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1482"></a>Example</p>
<pre dir="ltr">
TABLE hr.salary, FETCHCOLS (<span class="italic">sal_level</span>),
FETCHBEFOREFILTER,
FILTER (sal_level &gt;= 8)
;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGHBBED"></a><code dir="ltr">{FETCHCOLS | FETCHCOLSEXCEPT} (</code><code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">FETCHCOLS</code> and <code dir="ltr">FETCHCOLSEXCEPT</code> are valid for <code dir="ltr">TABLE</code>. These options are only valid for the primary extract and cannot be used on data pump.</p>
<p>Use <code dir="ltr">FETCHCOLS</code> and <code dir="ltr">FETCHCOLSEXCEPT</code> to fetch column values from the database when the values are not present in the transaction log record. Use this option if the database only logs the values of columns that were changed in an update operation, but you need to ensure that other column values required for <code dir="ltr">FILTER</code> operations are available.</p>
<ul>
<li>
<p><code dir="ltr">FETCHCOLS</code> fetches the specified columns.</p>
</li>
<li>
<p><code dir="ltr">FETCHCOLSEXCEPT</code> fetches all columns except the specified columns. For tables with numerous columns, <code dir="ltr">FETCHCOLSEXCEPT</code> may be more efficient than listing each column with <code dir="ltr">FETCHCOLS</code>.</p>
</li>
</ul>
<p><code dir="ltr">FETCHCOLS</code> and <code dir="ltr">FETCHCOLSEXCEPT</code> are valid for all databases that are supported by Oracle GoldenGate, except NonStop SQL/MX.</p>
<p>For an Oracle database, Oracle GoldenGate fetches the values from the undo tablespace through Oracle's Flashback Query mechanism. The query provides a read-consistent image of the columns as of a specific time or SCN. For more information about how Oracle GoldenGate uses Flashback Query, see <a class="olink GIORA" href="../../gg-winux/GIORA/toc.htm"><span class="italic">Installing and Configuring Oracle GoldenGate for Oracle Database</span></a>.</p>
<p>Instead of using <code dir="ltr">FETCHCOLS</code> or <code dir="ltr">FETCHCOLSEXCEPT</code>, it may be more efficient to enable supplemental logging for the desired columns.</p>
<p>For Sybase, encrypted column data is not supported by these parameters because Oracle GoldenGate does not support Sybase encrypted data.</p>
<p>To control fetching and enable a response when a column specified for fetching cannot be located, use the <code dir="ltr">FETCHOPTIONS</code> parameter. To include fetch results in statistical displays generated by the <code dir="ltr">STATS EXTRACT</code> command, use the <code dir="ltr">STATOPTIONS</code> parameter.</p>
<p>If values for columns specified with <code dir="ltr">FETCHCOLS</code> or <code dir="ltr">FETCHCOLSEXCEPT</code> are present in the transaction log, no database fetch is performed. This reduces database overhead.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1483"></a>Syntax</p>
<pre dir="ltr">
{FETCHCOLS | FETCHCOLSEXCEPT} (<span class="italic">column</span> [, ...])
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">column</span></code></dt>
<dd>
<p>Can be one of the following:</p>
<ul>
<li>
<p>A column name or a comma-delimited list of column names, as in <code dir="ltr">(col1, col2)</code>.</p>
</li>
<li>
<p>An asterisk wildcard, as in (*).</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1484"></a>Example</p>
<p>The <code dir="ltr">FETCHCOLS</code> clause in this example fetches <span class="italic">only</span> columns 1 and 3, whereas the <code dir="ltr">FETCHCOLSEXCEPT</code> clause fetches all columns <span class="italic">except</span> columns 1 and 3.</p>
<pre dir="ltr">
TABLE hq.acct, FETCHCOLS (col1, col3);
TABLE hq.sales, FETCHCOLSEXCEPT (col1, col3);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGDFCEH"></a><code dir="ltr">{FETCHMODCOLS | FETCHMODCOLSEXCEPT} (</code><code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">FETCHMODCOLS</code> and <code dir="ltr">FETCHMODCOLSEXCEPT</code> are valid for <code dir="ltr">TABLE</code>. These options are only valid for the primary extract and cannot be used on data pump.</p>
<p>Use <code dir="ltr">FETCHMODCOLS</code> and <code dir="ltr">FETCHMODCOLSEXCEPT</code> to force column values to be fetched from the database even if the columns are present in the transaction log. These Depending on the database type, a log record can contain all of the columns of a table or only the columns that changed in the given transaction operation.</p>
<ul>
<li>
<p><code dir="ltr">FETCHMODCOLS</code> fetches the specified columns.</p>
</li>
<li>
<p><code dir="ltr">FETCHMODCOLSEXCEPT</code> fetches all columns that are present in the transaction log, except the specified columns. For tables with numerous columns, <code dir="ltr">FETCHMODCOLSEXCEPT</code> might be more efficient than listing each column with <code dir="ltr">FETCHMODCOLS</code>.</p>
</li>
</ul>
<p><code dir="ltr">FETCHMODCOLS</code> and <code dir="ltr">FETCHMODCOLSEXCEPT</code> are valid for all databases that are supported by Oracle GoldenGate, except NonStop SQL/MX.</p>
<p>Observe the following usage guidelines:</p>
<ul>
<li>
<p>Do not use <code dir="ltr">FETCHMODCOLS</code> and <code dir="ltr">FETCHMODCOLSEXCEPT</code> for key columns.</p>
</li>
<li>
<p>(Sybase) Do not use <code dir="ltr">FETCHMODCOLS</code> and <code dir="ltr">FETCHMODCOLSEXCEPT</code> for encrypted column data. Oracle GoldenGate does not support Sybase encrypted data.</p>
</li>
</ul>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1485"></a>Syntax</p>
<pre dir="ltr">
{FETCHMODCOLS | FETCHMODCOLSEXCEPT} (<span class="italic">column</span> [, ...])
</pre>
<dl>
<dt><code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">column</span></code> <code dir="ltr">[, ...])</code></dt>
<dd>
<p>Can be one of the following:</p>
<ul>
<li>
<p>A column name or a comma-delimited list of column names, as in <code dir="ltr">(col1, col2)</code>.</p>
</li>
<li>
<p>An asterisk wildcard, as in (*).</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1486"></a>Example</p>
<p>The <code dir="ltr">FETCHMODCOLS</code> clause in this example fetches <span class="italic">only</span> columns 1 and 3, whereas the <code dir="ltr">FETCHMODCOLSEXCEPT</code> clause fetches all columns <span class="italic">except</span> columns 1 and 3.</p>
<pre dir="ltr">
TABLE hq.acct, FETCHMODCOLS (col1, col3);
TABLE hq.sales, FETCHMODCOLSEXCEPT (col1, col3);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2016736"></a><code dir="ltr">FILTER (</code><code dir="ltr"><span class="codeinlineitalic">filter_clause</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">FILTER</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">FILTER</code> to select or exclude records based on a numeric value. A filter expression can use conditional operators, Oracle GoldenGate column-conversion functions, or both.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To filter based on a string, use one of the Oracle GoldenGate string functions. See <a href="column_conversion_functions.htm#i1110551">"Column Conversion Functions"</a> for more information about these functions. You can also use the <code dir="ltr">WHERE</code> option. See <a href="#i2016740">"<code dir="ltr">WHERE (</code><code dir="ltr"><span class="codeinlineitalic">clause</span></code><code dir="ltr">)</code>"</a>.</div>
<p>Separate all <code dir="ltr">FILTER</code> components with commas. A <code dir="ltr">FILTER</code> clause can include the following:</p>
<ul>
<li>
<p>Numbers</p>
</li>
<li>
<p>Columns that contain numbers</p>
</li>
<li>
<p>Functions that return numbers</p>
</li>
<li>
<p>Arithmetic operators:</p>
<p>+ (plus)</p>
<p>- (minus)</p>
<p>* (multiply)</p>
<p>/ (divide)</p>
<p>\ (remainder)</p>
</li>
<li>
<p>Comparison operators:</p>
<p>&gt; (greater than)</p>
<p>&gt;= (greater than or equal)</p>
<p>&lt; (less than)</p>
<p>&lt;= (less than or equal)</p>
<p>= (equal)</p>
<p>&lt;&gt; (not equal)</p>
<p>Results derived from comparisons can be zero (indicating <code dir="ltr">FALSE</code>) or non-zero (indicating <code dir="ltr">TRUE</code>).</p>
</li>
<li>
<p>Parentheses (for grouping results in the expression)</p>
</li>
<li>
<p>Conjunction operators: <code dir="ltr">AND</code>, <code dir="ltr">OR</code></p>
</li>
</ul>
<p>Enclose literals in single quotes. Specify case-sensitive column names as they are stored in the database, and enclose them in double quotes if the database requires quotes to enforce case-sensitivity (such as Oracle).</p>
<p>Oracle GoldenGate supports <code dir="ltr">FILTER</code> for columns that have a multi-byte character set.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1487"></a>Getting More Information about Record Filtering</p>
<p>See <a class="olink GWUAD426" href="../../gg-winux/GWUAD/wu_datainteg.htm#GWUAD426"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for more information about <code dir="ltr">FILTER</code> and other filtering options.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1488"></a>Syntax</p>
<pre dir="ltr">
FILTER (
[, ON INSERT | ON UPDATE| ON DELETE]
[, IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE]
, <span class="italic">filter_clause</span>
[, RAISEERROR <span class="italic">error_number</span>]
)
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">filter_clause</span></code></dt>
<dd>
<p>Selects records based on an expression, such as:</p>
<pre dir="ltr">
FILTER ((PRODUCT_PRICE*PRODUCT_AMOUNT) &gt; 10000))
</pre>
<p>You can use the column-conversion functions of Oracle GoldenGate in a filter clause, as in:</p>
<pre dir="ltr">
FILTER (@COMPUTE (PRODUCT_PRICE*PRODUCT_AMOUNT)&gt;10000)
</pre>
<p>Enclose literals in single quotes. Specify case-sensitive column names as they are stored in the database, and enclose them in double quotes if the database requires quotes to enforce case-sensitivity (such as Oracle).</p>
<p>Oracle GoldenGate does not support <code dir="ltr">FILTER</code> for columns that have a multi-byte character set or a character set that is incompatible with the character set of the local operating system.</p>
<p>The maximum size of the filter clause is 5,000 bytes.</p>
</dd>
<dt><code dir="ltr">ON INSERT | ON UPDATE | ON DELETE</code></dt>
<dd>
<p>Restricts record filtering to the specified operation(s). Separate operations with commas, for example:</p>
<pre dir="ltr">
FILTER (ON UPDATE, ON DELETE,
@COMPUTE (PRODUCT_PRICE*PRODUCT_AMOUNT)&gt;10000)
</pre>
<p>The preceding example executes the filter for <code dir="ltr">UPDATE</code> and <code dir="ltr">DELETE</code> operations, but not <code dir="ltr">INSERT</code> operations.</p>
</dd>
<dt><code dir="ltr">IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE</code></dt>
<dd>
<p>Does not apply the filter for the specified operation(s). Separate operations with commas, for example:</p>
<pre dir="ltr">
FILTER (IGNORE INSERT, @COMPUTE (PRODUCT_PRICE*PRODUCT_AMOUNT)&gt;10000)
</pre>
<p>The preceding example executes the filter on <code dir="ltr">UPDATE</code> and <code dir="ltr">DELETE</code> operations, but ignores <code dir="ltr">INSERT</code> operations.</p>
</dd>
<dt><code dir="ltr">RAISEERROR</code> <code dir="ltr"><span class="codeinlineitalic">error</span></code></dt>
<dd>
<p>Raises a user-defined error number if the filter fails. Can be used as input to the <code dir="ltr">REPERROR</code> parameter to invoke error handling. Make certain that the value for <code dir="ltr"><span class="codeinlineitalic">error</span></code> is outside the range of error numbers that is used by the database or by Oracle GoldenGate. For example: <code dir="ltr">RAISEERROR 21000</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGJBFDC"></a><code dir="ltr">GETBEFORECOLS (</code><code dir="ltr"><span class="codeinlineitalic">column_specification</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">GETBEFORECOLS</code> is valid for <code dir="ltr">TABLE</code>.</p>
<p>Use <code dir="ltr">GETBEFORECOLS</code> to specify columns for which you want before image to be captured and written to the trail upon an update or delete operation. Use <code dir="ltr">GETBEFORECOLS</code> when using the Oracle GoldenGate Conflict Detection and Resolution (CDR) feature in a bi-directional or multi-master configuration. Also use it when using conversion functions or other processing features that require the before image of a record.</p>
<p>For updates, the before image of the specified columns is included in the trail whether or not any given column is modified. In addition to the columns specified in the <code dir="ltr">GETBEFORECOLS</code> clause, an Oracle database will also log the before image of other columns that are modified. For other supported databases, you can use the <code dir="ltr">GETUPDATEBEFORES</code> parameter to force the inclusion of the before values of other columns that are modified.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr">GETUPDATEBEFORES</code> overrides <code dir="ltr">GETBEFORECOLS</code> if both are used in the same parameter file.</div>
<p>To use this parameter, supplemental logging must be enabled for any database that does not log before values by default.</p>
<p><code dir="ltr">GETBEFORECOLS</code> overrides <code dir="ltr">COMPRESSUPDATES</code> and <code dir="ltr">COMPRESSDELETES</code> if used in the same parameter file.</p>
<p>This parameter is valid for all databases except DB2. For DB2 on all platforms that are supported by Oracle GoldenGate, use the <code dir="ltr">GETUPDATEBEFORES</code> parameter instead of <code dir="ltr">GETBEFORECOLS.</code></p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1489"></a>Syntax</p>
<pre dir="ltr">
GETBEFORECOLS(
{ON UPDATE | ON DELETE}
{ALL | KEY | KEYINCLUDING (<span class="italic">col</span>[,...])  | KEYANDMOD | | ALLEXCLUDING (<span class="italic">col</span>[,...]) }
[,...]
)
</pre>
<dl>
<dt><code dir="ltr">{ON UPDATE | ON DELETE}</code></dt>
<dd>
<p>Specifies whether the before image of the specified columns should be captured for updates or deletes. You can use <code dir="ltr">ON UPDATE</code> only, <code dir="ltr">ON DELETE</code> only, or both. If using both, specify them within the same <code dir="ltr">GETBEFORECOLS</code> clause. See the example for how to use both.</p>
</dd>
<dt><code dir="ltr">{ALL | KEY | KEYINCLUDING (</code><code dir="ltr"><span class="codeinlineitalic">col</span></code><code dir="ltr">[,...]) | KEYANDMOD | ALLEXCLUDING (</code><code dir="ltr"><span class="codeinlineitalic">col</span></code><code dir="ltr">[,...])}</code></dt>
<dd>
<p>Specifies the columns for which a before image is captured.</p>
<dl>
<dt><code dir="ltr">ALL</code></dt>
<dd>
<p>Captures a before image of all supported data type columns in the target table, including the primary key; all unsupported columns are skipped and logged in the Extract or Replicat parameter file as an information message. This imposes the highest processing load for Extract, but allows conflict-detection comparisons to be performed using all columns for maximum accuracy.</p>
</dd>
<dt><code dir="ltr">KEY</code></dt>
<dd>
<p>Capture before image only for the primary key. This is the fastest option, but does not permit the most accurate conflict detection, because keys can match but non-key columns could be different. <code dir="ltr">KEY</code> is the default.</p>
</dd>
<dt><code dir="ltr">KEYINCLUDING</code></dt>
<dd>
<p>Capture before image of the primary key and also the specified column or columns. This is a reasonable compromise between speed and detection accuracy.</p>
</dd>
<dt><code dir="ltr">KEYANDMOD</code></dt>
<dd>
<p>Use this option as an extension of the key option for both Extract and Replicat. For update DMLs on the source, Extract logs the key and modified columns. Replicat on the target will use the <code dir="ltr">KEY</code> and <code dir="ltr">MODIFIED</code> columns during conflict detection in a <code dir="ltr">WHERE</code> clause. With Oracle databases, the modified column is always used for conflict detection by default and this parameter makes it explicit.</p>
</dd>
<dt><code dir="ltr">ALLEXCLUDING</code></dt>
<dd>
<p>Capture before image of all columns except the specified columns. For tables with numerous columns, <code dir="ltr">ALLEXCLUDING</code> may be more efficient than <code dir="ltr">KEYINCLUDING</code>. Do <span class="italic">not</span> exclude key columns.</p>
</dd>
</dl>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1490"></a>Example</p>
<p>In the following example, the before images for the key column(s) plus the <code dir="ltr">name</code>, <code dir="ltr">address</code>, and <code dir="ltr">salary</code> are always written to the trail file on update and delete operations.</p>
<pre dir="ltr">
TABLE src,
GETBEFORECOLS (
ON UPDATE KEYINCLUDING (name, address,  salary),
ON DELETE KEYINCLUDING (name, address, salary));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790159"></a><code dir="ltr">HANDLECOLLISIONS | NOHANDLECOLLISIONS</code></p>
<p><code dir="ltr">HANDLECOLLISIONS</code> and <code dir="ltr">NOHANDLECOLLISIONS</code> are valid for <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">HANDLECOLLISIONS</code> and <code dir="ltr">NOHANDLECOLLISIONS</code> to control whether or not Oracle GoldenGate reconciles the results of an initial load with replicated transactional changes that are made to the same tables. When Oracle GoldenGate applies replicated changes after the load is finished, <code dir="ltr">HANDLECOLLISIONS</code> causes Replicat to overwrite duplicate records in the target tables and provides alternate handling of errors for missing records.</p>
<p><code dir="ltr">HANDLECOLLISIONS</code> and <code dir="ltr">NOHANDLECOLLISIONS</code> can be used globally for all <code dir="ltr">MAP</code> statements in the parameter file or as an <code dir="ltr">ON/OFF</code> switch for groups of tables specified with <code dir="ltr">MAP</code> statements, and they can be used within a <code dir="ltr">MAP</code> statement. When used in a <code dir="ltr">MAP</code> statement, they override the global specifications.</p>
<p>See <a href="gg_parameters081.htm#i1067175">"HANDLECOLLISIONS | NOHANDLECOLLISIONS"</a> for syntax and usage.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790158"></a><code dir="ltr">INSERTALLRECORDS</code></p>
<p><code dir="ltr">INSERTALLRECORDS</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use the <code dir="ltr">INSERTALLRECORDS</code> parameter to convert all mapped operations to <code dir="ltr">INSERT</code> operations on the target. <code dir="ltr">INSERTALLRECORDS</code> can be used at the root level of the parameter file, within a <code dir="ltr">MAP</code> statement, and within a <code dir="ltr">MAPEXCEPTION</code> clause of a <code dir="ltr">MAP</code> statement.</p>
<p>See <a href="gg_parameters085.htm#i1033053">"INSERTALLRECORDS"</a> for syntax and usage.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790157"></a><code dir="ltr">INSERTAPPEND | NOINSERTAPPEND</code></p>
<p><code dir="ltr">INSERTAPPEND</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use the <code dir="ltr">INSERTAPPEND</code> and <code dir="ltr">NOINSERTAPPEND</code> parameters to control whether or not Replicat uses an <code dir="ltr">APPEND</code> hint when it applies <code dir="ltr">INSERT</code> operations to Oracle target tables. These parameters are valid only for Oracle databases.</p>
<p>See <a href="gg_parameters086.htm#i2125957">"INSERTAPPEND | NOINSERTAPPEND"</a> for syntax and usage.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i1146401"></a><code dir="ltr">KEYCOLS (</code><code dir="ltr"><span class="codeinlineitalic">columns</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">KEYCOLS</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">KEYCOLS</code> to define one or more columns of the target table as unique. The primary use for <code dir="ltr">KEYCOLS</code> is to define a substitute primary key when a primary key or an appropriate unique index is not available for the table. You can also use <code dir="ltr">KEYCOLS</code> to specify additional columns to use in the row identifier that Replicat uses. Without the availability of a key or <code dir="ltr">KEYCOLS</code> clause, Replicat uses all columns of the table to build its <code dir="ltr">WHERE</code> clause, essentially performing a full table scan.</p>
<p>The columns of a key rendered by <code dir="ltr">KEYCOLS</code> must uniquely identify a row, and they must match the columns that are used as a key on the source table. The source table must contain at least as many key or index columns as the <code dir="ltr">KEYCOLS</code> key specified for the target table. Otherwise, in the event of an update to the source key or index columns, Replicat will not have the before images for the extra target <code dir="ltr">KEYCOL</code> columns.</p>
<p>When defining a substitute key with <code dir="ltr">KEYCOLS</code>, observe the following guidelines:</p>
<ul>
<li>
<p>If the source and target tables both lack keys or unique indexes, use a <code dir="ltr">KEYCOLS</code> clause in the <code dir="ltr">TABLE</code> parameter and in the <code dir="ltr">MAP</code> parameter, and specify matching sets of columns in each <code dir="ltr">KEYCOLS</code> clause.</p>
</li>
<li>
<p>If either of the tables lacks a key or unique index, use <code dir="ltr">KEYCOLS</code> for that table. Specify columns that match the actual key or index columns of the other table. If a matching set cannot be defined with <code dir="ltr">KEYCOLS</code>, you must use <code dir="ltr">KEYCOLS</code> for the source table (<code dir="ltr">TABLE</code> parameter) and for the target table (<code dir="ltr">MAP</code> parameter). Specify matching sets of columns that contain unique values. <code dir="ltr">KEYCOLS</code> overrides a key or unique index.</p>
</li>
<li>
<p>If the target table has a larger key than the source table does (or if it has more unique-index columns), use <code dir="ltr">KEYCOLS</code> in the <code dir="ltr">TABLE</code> statement to specify the source columns that match the extra target columns. You must also include the actual source key or index columns in this <code dir="ltr">KEYCOLS</code> clause. Using <code dir="ltr">KEYCOLS</code> in this way ensures that before images are available to Replicat in case the non-key columns are updated on the source.</p>
</li>
</ul>
<p>When using <code dir="ltr">KEYCOLS</code>, make certain that the specified columns are configured for logging so that they are available to Replicat in the trail records. For an Oracle database, you can enable the logging by using the <code dir="ltr">COLS</code> option of the <code dir="ltr">ADD TRANDATA</code> command.</p>
<p>On the target tables, create a unique index on the <code dir="ltr">KEYCOLS</code>-defined key columns. An index improves the speed with which Oracle GoldenGate locates the target rows that it needs to process.</p>
<p>Do not use <code dir="ltr">KEYCOLS</code> for tables being processed in pass-through mode by a data-pump Extract group.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1491"></a>Syntax</p>
<pre dir="ltr">
KEYCOLS (<span class="italic">column</span> [, ... ])
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">column</span></code></dt>
<dd>
<p>Defines a column to be used as a substitute primary key. If a primary or unique key exists, those columns must be included in the <code dir="ltr">KEYCOLS</code> specification. To specify multiple columns, create a comma-delimited list as in:</p>
<pre dir="ltr">
KEYCOLS (id, name)
</pre>
<p>The following column-types are <span class="bold">not</span> supported in <code dir="ltr">KEYCOLS</code>:</p>
<ul>
<li>
<p>Oracle column types <span class="bold">not</span> supported by <code dir="ltr">KEYCOLS</code>:</p>
<p>Virtual columns, UDTs, function-based columns, and any columns that are explicitly excluded from the Oracle GoldenGate configuration.</p>
</li>
<li>
<p>SQL Server, DB2 LUW, DB2 z/OS, MySQL, SQL/MX, Teradata, TimesTen column types <span class="bold">not</span> supported by <code dir="ltr">KEYCOLS</code>:</p>
<p>Columns that contain a timestamp or non-materialized computed column, and any columns excluded from the Oracle GoldenGate configuration. For SQL Server Oracle GoldenGate enforces the total length of data in rows for target tables without a primary key to be below 8000 bytes.</p>
</li>
<li>
<p>Sybase column types <span class="bold">not</span> supported by <code dir="ltr">KEYCOLS</code>:</p>
<p>Computed columns, function-based columns, and any columns that are explicitly excluded from the GoldenGate configuration.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1492"></a>Example</p>
<pre dir="ltr">
TABLE hr.emp, KEYCOLS (id, first, last, birthdate);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790156"></a><code dir="ltr">MAPEXCEPTION (</code><code dir="ltr"><span class="codeinlineitalic">exceptions_mapping</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">MAPEXCEPTIONS</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">MAPEXCEPTION</code> as part of an exceptions <code dir="ltr">MAP</code> statement intended for error handling. <code dir="ltr">MAPEXCEPTION</code> maps failed operations that are flagged as exceptions by the <code dir="ltr">REPERROR</code> parameter to an <span class="italic">exceptions table</span>. Replicat writes the values of these operations along with other information to the exceptions table.</p>
<p>You can use <code dir="ltr">MAPEXCEPTION</code> within the same <code dir="ltr">MAP</code> statement that includes the source-target table mapping and other standard <code dir="ltr">MAP</code> options. The source and target table names can include wildcards.</p>
<p>When using <code dir="ltr">MAPEXCEPTION</code>, use a <code dir="ltr">REPERROR</code> statement with the <code dir="ltr">EXCEPTION</code> option either within the same <code dir="ltr">MAP</code> statement or at the root of the Replicat parameter file. See <a href="#i2790160">"<code dir="ltr">EXCEPTIONSONLY</code>"</a> and <a href="gg_parameters126.htm#i1214605">"REPERROR"</a>.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1493"></a>Getting More Information about Exceptions Handling</p>
<p>For more information about configuring exceptions handling with an exceptions <code dir="ltr">MAP</code> statement, see <a class="olink GWUAD501" href="../../gg-winux/GWUAD/wu_errorhandling.htm#GWUAD501"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1494"></a>Syntax</p>
<pre dir="ltr">
MAPEXCEPTION (TARGET <span class="italic">exceptions_table</span>, INSERTALLRECORDS [, <span class="italic">exception_MAP_options</span>])
</pre>
<dl>
<dt><code dir="ltr">TARGET</code> <code dir="ltr"><span class="codeinlineitalic">exceptions_table</span></code></dt>
<dd>
<p>The fully qualified name of the exceptions table. Standard Oracle GoldenGate rules for object names apply to the name of the exceptions table. See <a class="olink GWUAD153" href="../../gg-winux/GWUAD/wu_gettingstarted.htm#GWUAD153"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">exception_MAP_options</span></code></dt>
<dd>
<p>Any valid options of the <code dir="ltr">MAP</code> parameter that you want to apply to the exceptions handling.</p>
</dd>
<dt><code dir="ltr">INSERTALLRECORDS</code></dt>
<dd>
<p>Applies all exceptions to the exceptions table as <code dir="ltr">INSERT</code> operations. This parameter is required when using <code dir="ltr">MAPEXCEPTION</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1495"></a>Example</p>
<p>This is an example of how to use <code dir="ltr">MAPEXCEPTION</code> for exceptions mapping. The <code dir="ltr">MAP</code> and <code dir="ltr">TARGET</code> clauses contain wildcarded source and target table names. Exceptions that occur when processing any table with a name beginning with <code dir="ltr">TRX</code> will be captured to the <code dir="ltr">fin.trxexceptions</code> table using the specified mapping.</p>
<pre dir="ltr">
MAP src.trx*, TARGET trg.*,
MAPEXCEPTION (TARGET fin.trxexceptions,
INSERTALLRECORDS,
COLMAP (USEDEFAULTS,
ACCT_NO = ACCT_NO,
OPTYPE = @GETENV ('LASTERR', 'OPTYPE'),
DBERR = @GETENV ('LASTERR', 'DBERRNUM'),
DBERRMSG = @GETENV ('LASTERR', 'DBERRMSG')
)
);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790155"></a><code dir="ltr">REPERROR (</code><code dir="ltr"><span class="codeinlineitalic">error</span></code><code dir="ltr">,</code> <code dir="ltr"><span class="codeinlineitalic">response</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">REPERROR</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">REPERROR</code> to specify an error and a response that together control how Replicat responds to the error when executing the <code dir="ltr">MAP</code> statement. You can use <code dir="ltr">REPERROR</code> at the <code dir="ltr">MAP</code> level to override and supplement global error handling rules set with the <code dir="ltr">REPERROR</code> parameter at the root level of the parameter file. Multiple <code dir="ltr">REPERROR</code> statements can be applied to the same <code dir="ltr">MAP</code> statement to enable automatic, comprehensive management of errors and interruption-free replication processing.</p>
<p>For syntax and descriptions, see <a href="gg_parameters126.htm#i1214605">"REPERROR"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790154"></a><code dir="ltr">RESOLVECONFLICT (</code><code dir="ltr"><span class="codeinlineitalic">conflict_resolution_specification</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">RESOLVECONFLICT</code> is valid for <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">RESOLVECONFLICT</code> in a bi-directional or multi-master configuration to specify how Replicat handles conflicts on operations made to the tables in the <code dir="ltr">MAP</code> statement.</p>
<p>Multiple resolutions can be specified for the same conflict type and are executed in the order listed in <code dir="ltr">RESOLVECONFLICT</code>. Multiple resolutions are limited to <code dir="ltr">INSERTROWEXISTS</code> and <code dir="ltr">UPDATEROWEXISTS</code> conflicts only.</p>
<p><code dir="ltr">RESOLVECONFLICT</code> can be used multiple times in a <code dir="ltr">MAP</code> statement to specify different resolutions for different conflict types.</p>
<p>The following are the data types and platforms that are supported by <code dir="ltr">RESOLVECONFLICT</code>.</p>
<ul>
<li>
<p><code dir="ltr">RESOLVECONFLICT</code> supports all databases that are supported by Oracle GoldenGate for Windows and UNIX.</p>
</li>
<li>
<p>To use <code dir="ltr">RESOLVECONFLICT</code>, the database must reside on a Windows, Linux, or UNIX system (including those running on NonStop OSS).</p>
</li>
<li>
<p>CDR supports data types that can be compared with simple SQL and without explicit conversion. See the individual parameter options for details.</p>
</li>
<li>
<p>Do not use <code dir="ltr">RESOLVECONFLICT</code> for columns that contain LOBs, abstract data types (ADT), or user-defined types (UDT).</p>
</li>
<li>
<p>Do not use <code dir="ltr">RESOLVECONFLICT</code> for BigNum data types in a SQL/MX database.</p>
</li>
</ul>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1496"></a>Getting More Information about Configuring Conflict Resolution</p>
<p>See <a class="olink GWUAD282" href="../../gg-winux/GWUAD/wu_bidirectional.htm#GWUAD282"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for detailed instructions on configuring bi-directional replication and conflict resolution, including use cases and examples.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1497"></a>Syntax</p>
<pre dir="ltr">
RESOLVECONFLICT (
{INSERTROWEXISTS | UPDATEROWEXISTS | UPDATEROWMISSING | 
   DELETEROWEXISTS | DELETEROWMISSING} 
( {DEFAULT | <span class="italic">resolution_name</span>},
  {USEMAX (<span class="italic">resolution_column</span>) | USEMAXEQ (<span class="codeinlineitalic">resolution_column</span>) | USEMIN (<span class="codeinlineitalic">resolution_column</span>) | USEMINEQ (<span class="codeinlineitalic">resolution_column</span>) | USEDELTA |
     DISCARD | OVERWRITE | IGNORE} 
 )   
[, COLS (<span class="italic">column</span>[,...])]
)
</pre>
<dl>
<dt><code dir="ltr">INSERTROWEXISTS | UPDATEROWEXISTS | UPDATEROWMISSING |</code></dt>
<dt><code dir="ltr">DELETEROWEXISTS | DELETEROWMISSING</code></dt>
<dd>
<p>The type of conflict that this resolution handles.</p>
<dl>
<dt><code dir="ltr">INSERTROWEXISTS</code></dt>
<dd>
<p>An inserted row violates a uniqueness constraint on the target.</p>
</dd>
<dt><code dir="ltr">UPDATEROWEXISTS</code></dt>
<dd>
<p>An updated row exists on the target, but one or more columns have a before image in the trail that is different from the current value in the database.</p>
</dd>
<dt><code dir="ltr">UPDATEROWMISSING</code></dt>
<dd>
<p>An updated row does not exist in the target.</p>
</dd>
<dt><code dir="ltr">DELETEROWEXISTS</code></dt>
<dd>
<p>A deleted row exists in the target, but one or more columns have a before image in the trail that is different from the current value in the database.</p>
</dd>
<dt><code dir="ltr">DELETEROWMISSING</code></dt>
<dd>
<p>A deleted row does not exist in the target.</p>
</dd>
</dl>
</dd>
<dt><code dir="ltr">DEFAULT |</code> <code dir="ltr"><span class="codeinlineitalic">resolution_name</span></code></dt>
<dd>
<dl>
<dt><code dir="ltr">DEFAULT</code></dt>
<dd>
<p>The default column group. The resolution that is associated with the <code dir="ltr">DEFAULT</code> column group is used for all columns that are not in an explicitly named column group. You must define a <code dir="ltr">DEFAULT</code> column group.</p>
</dd>
</dl>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">resolution_name</span></code></dt>
<dd>
<p>A name for a specific column group that is linked to a specific resolution type. Supply a name that identifies the resolution type. Valid values are alphanumeric characters. Avoid spaces and special characters, but underscores are permitted, for example:</p>
<pre dir="ltr">
delta_res_method
</pre>
<p>Use either a named resolution or <code dir="ltr">DEFAULT</code>, but not both.</p>
</dd>
</dl>
</dd>
<dt><code dir="ltr">USEMAX (</code><code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code><code dir="ltr">) | USEMAXEQ (</code><code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code><code dir="ltr">) | USEMIN (</code><code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code><code dir="ltr">) | USEMINEQ (</code><code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code><code dir="ltr">) | USEDELTA |</code></dt>
<dt><code dir="ltr">DISCARD | OVERWRITE | IGNORE</code></dt>
<dd>
<p>The conflict-handler logic that is used to resolve the conflict. Valid resolutions are:</p>
<dl>
<dt><code dir="ltr">USEMAX</code></dt>
<dd>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code> in the trail record is greater than the value of the column in the database, the appropriate action is performed.</p>
<ul>
<li>
<p>(<code dir="ltr">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code dir="ltr">UPDATEROWEXISTS</code> conflict) Apply the trail record as an update.</p>
</li>
</ul>
</dd>
<dt><code dir="ltr">USEMAXEQ</code></dt>
<dd>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code> in the trail record is greater than or equal to the value of the column in the database, the appropriate action is performed.</p>
<ul>
<li>
<p>(<code dir="ltr">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code dir="ltr">UPDATEROWEXISTS</code> conflict) Apply the trail record as an update.</p>
</li>
</ul>
</dd>
<dt><code dir="ltr">USEMIN</code></dt>
<dd>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code> in the trail record is less than the value of the column in the database, the appropriate action is performed:</p>
<ul>
<li>
<p>(<code dir="ltr">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code dir="ltr">UPDATEROWEXISTS</code> conflict) Apply the update from the trail record.</p>
</li>
</ul>
</dd>
<dt><code dir="ltr">USEMINEQ</code></dt>
<dd>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code> in the trail record is less than or equal to the value of the column in the database, the appropriate action is performed:</p>
<ul>
<li>
<p>(<code dir="ltr">INSERTROWEXISTS</code> conflict) Apply the trail record, but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code dir="ltr">UPDATEROWEXISTS</code> conflict) Apply the update from the trail record.</p>
</li>
</ul>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code></dt>
<dd>
<p>The name of a <code dir="ltr">NOT NULL</code> column that serves as the resolution column. This column must be part of the column group that is associated with this resolution. The value of the resolution column compared to the current value in the target database determines how a resolution should be applied. The after image of the resolution column is used for the comparison, if available; otherwise the before image value is used. Use a column that can be compared through simple SQL:</p>
<ul>
<li>
<p><code dir="ltr">NUMERIC</code></p>
</li>
<li>
<p><code dir="ltr">DATE</code></p>
</li>
<li>
<p><code dir="ltr">TIMESTAMP</code></p>
</li>
<li>
<p><code dir="ltr">CHAR/NCHAR</code></p>
</li>
<li>
<p><code dir="ltr">VARCHAR/ NVARCHAR</code></p>
</li>
</ul>
<p>To use a latest-timestamp resolution, use a timestamp column as the <code dir="ltr"><span class="codeinlineitalic">resolution_column</span></code> and set the timestamp column to the current time when a row is inserted or updated. If possible, define the resolution column with the <code dir="ltr">SYSTIMESTAMP</code> data type, which supports fractional seconds. When comparisons are performed with sub-second granularity, there is little need for tie-breaking conflict handlers that resolve cases where the value of the resolution column is identical in both trail and target. If you ensure that the value of the timestamp column can only increase or only decrease (depending on the resolution), then <code dir="ltr">USEMAX</code> and <code dir="ltr">USEMIN</code> does not lead to data divergence.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use a primary key column as the resolution column in a <code dir="ltr">USEMAX</code> statement for the <code dir="ltr">UPDATEROWEXISTS</code> conflict. Otherwise, Replicat abends with an error similar to the following:
<pre dir="ltr">
2013-04-04 10:18:38  ERROR   OGG-01922  Missing  RESOLUTION COLUMN NAME while mapping to target table "FIN"."ACCT".
</pre></div>
</dd>
<dt><code dir="ltr">USEDELTA</code></dt>
<dd>
<p>(<code dir="ltr">UPDATEROWEXISTS</code> conflict only) Add the difference between the before and after values in the trail record to the current value of the column in the target database. If any of the values is <code dir="ltr">NULL</code>, an error is raised. Base <code dir="ltr">USEDELTA</code> on columns that contain <code dir="ltr">NUMERIC</code> data types. <code dir="ltr">USEDELTA</code> is useful in a multi-node configuration when a row is getting simultaneously updated on multiple nodes. It propagates only the difference in the column values to the other nodes, so that all nodes become synchronized.</p>
</dd>
<dt><code dir="ltr">DISCARD</code></dt>
<dd>
<p>(Valid for all conflict types) Retain the current value in the target database, and write the data in the trail record to the discard file.</p>
<p>Use <code dir="ltr">DISCARD</code> with caution, because it can lead to data divergence.</p>
</dd>
<dt><code dir="ltr">OVERWRITE</code></dt>
<dd>
<p>(Valid for all conflict types except <code dir="ltr">DELETEROWMISSING</code>) Apply the trail record as follows:</p>
<ul>
<li>
<p>(<code dir="ltr">INSERTROWEXISTS</code> conflict) Apply the trail record but change the insert to an update to avoid a uniqueness violation, and overwrite the existing values.</p>
</li>
<li>
<p>(<code dir="ltr">UPDATEROWEXISTS</code> conflict) Apply the update from the trail record.</p>
</li>
<li>
<p>(<code dir="ltr">UPDATEROWMISSING</code> conflict) Apply the trail record but convert the missing <code dir="ltr">UPDATE</code> to an <code dir="ltr">INSERT</code> by using the modified columns from the after image and the unmodified columns from the before image. To convert an update to an insert, the before image of all columns of the row must be available in the trail. Use supplemental logging if the database does not log before images by default, and specify <code dir="ltr">ALL</code> for the Extract <code dir="ltr">GETBEFORECOLS</code> parameter<code dir="ltr">.</code></p>
</li>
<li>
<p>(<code dir="ltr">DELETEROWEXISTS</code> conflict) Apply the delete from the trail record, but use only the primary key columns in the <code dir="ltr">WHERE</code> clause.</p>
</li>
</ul>
<p>Use <code dir="ltr">OVERWRITE</code> with caution, because it can lead to data divergence.</p>
</dd>
<dt><code dir="ltr">IGNORE</code></dt>
<dd>
<p>(Valid for all conflict types) Retain the current value in the target database, and ignore the trail record: Do not apply to the target table or a discard file.</p>
</dd>
</dl>
</dd>
<dt><code dir="ltr">COLS (</code><code dir="ltr"><span class="codeinlineitalic">column</span></code><code dir="ltr">[, ...])</code></dt>
<dd>
<p>A non-default column group. This is a list of columns in the target database (after mapping) that are linked to, and operated upon by, a specific resolution type. If no column group is specified for a conflict, then all columns are affected by the resolution that is specified for the given conflict.</p>
<p>Alternatively, you can specify a <code dir="ltr">DEFAULT</code> column group, which includes all columns that are not listed in another column group. See the <code dir="ltr">DEFAULT</code> option.</p>
<p>You can specify multiple column groups, each with a different resolution. For example, you could use <code dir="ltr">OVERWRITE</code> for <code dir="ltr">col2</code> and <code dir="ltr">col3</code>, and you could use <code dir="ltr">USEDELTA</code> for <code dir="ltr">col4</code>. No column in any group can be in any other group. Conflicts for columns in different column groups are resolved separately according to the specified resolution, and in the order listed.</p>
<p>Column groups work as follows:</p>
<ul>
<li>
<p>For <code dir="ltr">INSERTROWEXISTS</code> and <code dir="ltr">UPDATEROWEXISTS</code> conflicts, you can use different column groups to specify more than one of these conflict types and resolutions per table. Conflicts for columns in different column groups are resolved separately, according to the conflict resolution method specified for the column group.</p>
</li>
<li>
<p>For <code dir="ltr">UPDATEROWMISSING</code>, <code dir="ltr">DELETEROWEXISTS</code>, and <code dir="ltr">DELETEROWMISSING</code>, you can use only one column group, and all columns of the table must be in this column group (considered the <span class="italic">default</span> column group).</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1498"></a>Examples</p>
<p>The following examples are explained in detail in <a class="olink GWUAD315" href="../../gg-winux/GWUAD/conflict_resolution.htm#GWUAD315"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
<dl>
<dd><a id="GWURF1028"></a><a id="sthref1499"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example demonstrates all conflict types with <code dir="ltr">USEMAX</code>, <code dir="ltr">OVERWRITE</code>, <code dir="ltr">DISCARD</code>.</p>
<pre dir="ltr">
MAP fin.src, TARGET fin.tgt,
    COMPARECOLS (ON UPDATE ALL, ON DELETE ALL),
    RESOLVECONFLICT (UPDATEROWEXISTS, (DEFAULT, USEMAX (last_mod_time)),
    RESOLVECONFLICT (INSERTROWEXISTS, (DEFAULT, USEMAX (last_mod_time)),
    RESOLVECONFLICT (DELETEROWEXISTS, (DEFAULT, OVERWRITE)),
    RESOLVECONFLICT (UPDATEROWMISSING, (DEFAULT, OVERWRITE)),
    RESOLVECONFLICT (DELETEROWMISSING, (DEFAULT, DISCARD)),
    );
</pre></dd>
<dd><a id="GWURF1029"></a><a id="sthref1500"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example demonstrates <code dir="ltr">UPDATEROWEXISTS</code> with <code dir="ltr">USEDELTA</code> and <code dir="ltr">USEMAX</code>.</p>
<pre dir="ltr">
MAP fin.src, TARGET fin.tgt,
    COMPARECOLS
    (ON UPDATE KEYINCLUDING (address, phone, salary, last_mod_time),
    ON DELETE KEYINCLUDING (address, phone, salary, last_mod_time)),
    RESOLVECONFLICT (
    UPDATEROWEXISTS,
    (delta_res_method, USEDELTA, COLS (salary)),
    (DEFAULT, USEMAX (last_mod_time)));
</pre></dd>
<dd><a id="GWURF1030"></a><a id="sthref1501"></a></dd>
<dt class="seghead">Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>This example demonstrates <code dir="ltr">UPDATEROWEXISTS</code> with <code dir="ltr">USEDELTA</code>, <code dir="ltr">USEMAX</code>, and <code dir="ltr">IGNORE</code>.</p>
<pre dir="ltr">
MAP fin.src, TARGET fin.tgt,
    COMPARECOLS
    (ON UPDATE ALLEXCLUDING (comment)),
    RESOLVECONFLICT (
    UPDATEROWEXISTS,
    (delta_res_method, USEDELTA, COLS (salary, balance)),
    (max_res_method, USEMAX (last_mod_time), COLS (address, last_mod_time)),
    (DEFAULT, IGNORE));
</pre></dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2312155"></a><code dir="ltr">SQLEXEC (</code><code dir="ltr"><span class="codeinlineitalic">SQL_specification</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">SQLEXEC</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">SQLEXEC</code> to execute a SQL stored procedure or query from within a <code dir="ltr">MAP</code> statement during Oracle GoldenGate processing. <code dir="ltr">SQLEXEC</code> enables Oracle GoldenGate to communicate directly with the database to perform any work that is supported by the database. This work can be part of the synchronization process, such as retrieving values for column conversion, or it can be independent of extracting or replicating data, such as executing a stored procedure that executes an action within the database.</p>
<p>See <a href="gg_parameters156.htm#i2640121">"SQLEXEC"</a> for syntax and usage.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGGGEIJ"></a><code dir="ltr">SQLPREDICATE 'WHERE</code> <code dir="ltr"><span class="codeinlineitalic">where_clause</span></code><code dir="ltr">'</code></p>
<p><code dir="ltr">SQLPREDICATE</code> is valid for <code dir="ltr">TABLE</code>.</p>
<p>Use <code dir="ltr">SQLPREDICATE</code> to include a conventional SQL <code dir="ltr">WHERE</code> clause in the <code dir="ltr">SELECT</code> statement that Extract uses when selecting data from a table in preparation for an initial load. <code dir="ltr">SQLPREDICATE</code> forces the records returned by the selection to be ordered by the key values.</p>
<p><code dir="ltr">SQLPREDICATE</code> is a faster selection method for initial loads than the <code dir="ltr">WHERE</code> or <code dir="ltr">FILTER</code> options. It affects the SQL statement directly and does not require Extract to fetch all records before filtering them.</p>
<p>For Oracle tables, <code dir="ltr">SQLPREDICATE</code> reduces the amount of data that is stored in the undo segment, which can reduce the incidence of snapshot-too-old errors. This is useful when loading very large tables.</p>
<p>By using a <code dir="ltr">SQLPREDICATE</code> clause, you can partition the rows of a large table among two or more parallel Extract processes. This configuration enables you to take advantage of parallel delivery load processing as well.</p>
<p><code dir="ltr">SQLPREDICATE</code> also enables you to select data based on a timestamp or other criteria to filter the rows that are extracted and loaded to the target table. <code dir="ltr">SQLPREDICATE</code> can be used for <code dir="ltr">ORDER BY</code> clauses or any other type of selection clause.</p>
<p>Make certain that the <code dir="ltr">WHERE</code> clause contains columns that are part of a key or index. Otherwise, Extract performs a full table scan, which reduces the efficiency of the <code dir="ltr">SELECT</code> statement.</p>
<p><code dir="ltr">SQLPREDICATE</code> is valid for Oracle, DB2 LUW, DB2 on z/OS, SQL Server, and Teradata databases. Do not use <code dir="ltr">SQLPREDICATE</code> for an Extract group that is configured to synchronize transactional changes. It is only appropriate for an initial load Extract, because it re quires a <code dir="ltr">SELECT</code> statement that selects records directly from tables.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1502"></a>Syntax</p>
<pre dir="ltr">
TABLE <span class="italic">source_table</span>, SQLPREDICATE 'WHERE <span class="italic">where_clause</span>';
</pre>
<dl>
<dt><code dir="ltr">WHERE</code></dt>
<dd>
<p>This is a required keyword.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">where_clause</span></code></dt>
<dd>
<p>A valid SQL <code dir="ltr">WHERE</code> clause that selects records from the source tables.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1503"></a>Example</p>
<pre dir="ltr">
TABLE hr.emp, SQLPREDICATE 'WHERE state = 'CO' and city = 'DENVER''
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="BABHHEHH"></a><code dir="ltr">THREAD (</code><code dir="ltr"><span class="codeinlineitalic">thread_ID</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">THREAD</code> is valid for <code dir="ltr">MAP</code>. This option is valid when Replicat is in coordinated mode.</p>
<p>Use <code dir="ltr">THREAD</code> to specify that all of the object or objects in the same <code dir="ltr">MAP</code> statement are to be processed by the specified Replicat thread. The specified thread handles filtering, manipulation, delivery to the target, error handling, and other work that is configured for those objects. Wildcards can be used in the <code dir="ltr">TARGET</code> clause when <code dir="ltr">THREAD</code> is used.</p>
<p>All tables that have referential dependencies among one another must be mapped in the same thread. For example, if tables <code dir="ltr">scott.cust</code> and <code dir="ltr">scott.ord</code> have a foreign-key relationship, the following is a possible mapping:</p>
<pre dir="ltr">
MAP scott.cust, TARGET scott.cust, THREAD (5);
MAP scott.ord, TARGET scott.ord, THREAD (5);
</pre>
<p>The thread with the lowest thread ID always processes barrier transactions if the <code dir="ltr">THREAD</code> or <code dir="ltr">THREADRANGE</code> option is omitted. Additionally, and work that is not explicitly assigned to a thread is processed through this thread. For example, if there are threads with IDs ranging from 1 to 10, barrier and non-assigned transactions are performed by thread 1.</p>
<p>To process a <code dir="ltr">MAP</code> statement among multiple threads, see <a href="#BABIEAFI"><code dir="ltr">THREADRANGE (</code><code dir="ltr"><span class="codeinlineitalic">thread_range</span></code><code dir="ltr">,</code> <code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></a>. <code dir="ltr">THREAD</code> and <code dir="ltr">THREADRANGE</code> are mutually exclusive options. Do not use them together in the same <code dir="ltr">MAP</code> statement.</p>
<p>For more information about Replicat modes, see <a class="olink GIORA216" href="../../gg-winux/GIORA/process_mode.htm#GIORA216">"Deciding Which Apply Method to Use"</a> in <span class="italic">Installing and Configuring Oracle GoldenGate for Oracle Database</span> and <a href="gg_parameters011.htm#i1025987">"BATCHSQL"</a>.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1504"></a>Syntax</p>
<pre dir="ltr">
THREAD (thread_ID)
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">thread_ID</span></code></dt>
<dd>
<p>A numerical identifier for the thread that will process this <code dir="ltr">MAP</code> statement. Valid values are 1 through the value that was specified with the <code dir="ltr">MAXTHREADS</code> option of the <code dir="ltr">ADD REPLICAT</code> command that created this group. You can use the <code dir="ltr">INFO REPLICAT</code> command to verify the maximum number of threads allowed for a Replicat group. When specifying thread IDs, the following must be true:</p>
<ul>
<li>
<p>The <span class="italic">total number</span> of threads specified across all <code dir="ltr">MAP</code> statements of a Replicat group cannot exceed the value of <code dir="ltr">MAXTHREADS</code>.</p>
</li>
<li>
<p>No single <code dir="ltr"><span class="codeinlineitalic">thread_ID</span></code> value in the Replicat group can be higher than the value of <code dir="ltr">MAXTHREADS</code>. For example, if <code dir="ltr">MAXTHREADS</code> is 25, there cannot be a <code dir="ltr"><span class="codeinlineitalic">thread_ID</span></code> of 26 or higher.</p>
</li>
</ul>
<p>If <code dir="ltr">MAXTHREADS</code> was not used, the default maximum number of threads is 25.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1505"></a>Examples</p>
<p>The following examples show some ways to use the <code dir="ltr">THREAD</code> option.</p>
<dl>
<dd><a id="GWURF1130"></a><a id="sthref1506"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In this example, thread 1 processes table <code dir="ltr">cust</code>.</p>
<pre dir="ltr">
MAP scott.cust, TARGET scott.cust, THREAD (1);
</pre></dd>
<dd><a id="GWURF1131"></a><a id="sthref1507"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In this example, thread 1 processes all of the tables in the <code dir="ltr">scott</code> schema.</p>
<pre dir="ltr">
MAP scott.*, TARGET scott.*, THREAD (1);
</pre></dd>
<dd><a id="GWURF1132"></a><a id="sthref1508"></a></dd>
<dt class="seghead">Example 3&nbsp;&nbsp;&nbsp;</dt>
<dd>
<p>In this example, the <code dir="ltr">orders</code> table is partitioned among two <code dir="ltr">MAP</code> statements through the use of <code dir="ltr"><a href="#i2016736"><code dir="ltr">FILTER (</code><code dir="ltr"><span class="codeinlineitalic">filter_clause</span></code><code dir="ltr">)</code></a></code> and the <code dir="ltr">@RANGE</code> function. For more information about <code dir="ltr">@RANGE</code>, see <a href="column_conversion_functions022.htm#i1001040">"RANGE"</a>.</p>
<pre dir="ltr">
MAP scott.orders, TARGET scott.orders, FILTER (@RANGE (1, 2, OID)), THREAD (1);
MAP scott.orders, TARGET scott.orders, FILTER (@RANGE (2, 2, OID)), THREAD (2);
</pre></dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="BABIEAFI"></a><code dir="ltr">THREADRANGE (</code><code dir="ltr"><span class="codeinlineitalic">thread_range</span></code><code dir="ltr">,</code> <code dir="ltr"><span class="codeinlineitalic">column_list</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">THREADRANGE</code> is valid for <code dir="ltr">MAP</code>. This option is valid when Replicat is in coordinated mode.</p>
<p>Use <code dir="ltr">THREADRANGE</code> to specify that the workload of the target table is to be partitioned evenly among a range of Replicat threads, based on the value of a specified column or columns. For example, if the partitioning is based on the value of a column named <code dir="ltr">ID</code>, and the <code dir="ltr">THREADRANGE</code> value is 1-3, then thread 1 processes rows with <code dir="ltr">ID</code> values from 1 through 10, thread 2 processes rows with <code dir="ltr">ID</code> values from 11 through 20, and thread 3 processes rows with <code dir="ltr">ID</code> values from 21 through 30. The partitioning may not be as absolutely even as shown in the preceding example, depending on the initial calculation of the workload, but it is coordinated so that same row is always processed by the same thread. Each specified thread handles filtering, manipulation, error handling, delivery to the target, and other work for its range of rows.</p>
<p>Partitioning a table across a range of threads may improve apply performance for very large tables or tables that frequently incur long-running transactions or heavy volume, but can be used in other cases, as well. You can process more than one table through the same range of threads.</p>
<p>A wildcarded <code dir="ltr">TARGET</code> clause can be used when <code dir="ltr">THREADRANGE</code> is used if the optional column list is omitted. When using a column list, use separate explicit <code dir="ltr">MAP</code> statements for each table that is using the same thread range.</p>
<p>To process a <code dir="ltr">MAP</code> statement with one specific thread, see <a href="#BABHHEHH"><code dir="ltr">THREAD (</code><code dir="ltr"><span class="codeinlineitalic">thread_ID</span></code><code dir="ltr">)</code></a>. <code dir="ltr">THREAD</code> and <code dir="ltr">THREADRANGE</code> are mutually exclusive options. Do not use them together in the same <code dir="ltr">MAP</code> statement.</p>
<p>Do not specify tables that have referential dependencies among one another in a thread range. Use the <code dir="ltr">THREAD</code> option and process all of those tables with the same thread.</p>
<p>Do not use <code dir="ltr">THREADRANGE</code> to partition sequences. If coordination is required, for example when a sequence is part of a <code dir="ltr">SQLEXEC</code> operation, partition the sequence work to one thread with the <code dir="ltr">THREAD</code> option.</p>
<p>The thread with the lowest thread ID always processes barrier transactions if the <code dir="ltr">THREAD</code> or <code dir="ltr">THREADRANGE</code> option is omitted. Additionally, and work that is not explicitly assigned to a thread is processed through this thread. For example, if there are threads with IDs ranging from 1 to 10, barrier and non-assigned transactions are performed by thread 1.</p>
<p>For more information about Replicat modes, see <a class="olink GIORA216" href="../../gg-winux/GIORA/process_mode.htm#GIORA216">"Deciding Which Apply Method to Use"</a> in <span class="italic">Installing and Configuring Oracle GoldenGate for Oracle Database</span> and <a href="gg_parameters011.htm#i1025987">"BATCHSQL"</a>.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1509"></a>Syntax</p>
<pre dir="ltr">
THREADRANGE (<span class="codeinlineitalic">lowID</span>-<span class="codeinlineitalic">highID</span>, [<span class="codeinlineitalic">column</span>[, <span class="codeinlineitalic">column</span>][, ...]])
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">lowID</span></code></dt>
<dd>
<p>The lowest thread identifier of this range. Valid values are 1 through 500.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">highID</span></code></dt>
<dd>
<p>The highest thread identifier of this range, which must be a higher number than <code dir="ltr"><span class="codeinlineitalic">lowID</span></code>. Valid values are <code dir="ltr"><span class="codeinlineitalic">lowID</span></code><code dir="ltr">+1</code> through 500. The number of threads in the range cannot exceed the value that was specified with the <code dir="ltr">MAXTHREADS</code> option of the <code dir="ltr">ADD REPLICAT</code> command. If <code dir="ltr">MAXTHREADS</code> was not used, the default maximum number of threads is 25.</p>
</dd>
<dt><code dir="ltr">[</code><code dir="ltr"><span class="codeinlineitalic">column</span></code><code dir="ltr">[,</code> <code dir="ltr"><span class="codeinlineitalic">column</span></code><code dir="ltr">][, ...]]</code></dt>
<dd>
<p>Optional. Specifies one or more unique columns on which to base the row partitioning. To specify multiple columns, use a comma-delimited list, such as <code dir="ltr">col1, col2, col3</code>. When this option is omitted, the partitioning among the threads is based by default on the following columns, in the order of preference shown:</p>
<ul>
<li>
<p>Primary key</p>
</li>
<li>
<p><code dir="ltr">KEYCOLS</code> clause in the same <code dir="ltr">MAP</code> statement</p>
</li>
<li>
<p>All of the columns of the table that are supported by Oracle GoldenGate for use as a key.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1510"></a>Example</p>
<p>The following example divides the <code dir="ltr">orders</code> and <code dir="ltr">order_lines</code> tables between the same two threads, based on the value of the <code dir="ltr">OID</code> column.</p>
<pre dir="ltr">
MAP scott.orders, TARGET scott.orders, THREADRANGE (1-2, OID);
MAP scott.order_lines, TARGET scott.order_lines, THREADRANGE (1-2, OID);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="CEGHEJII"></a><code dir="ltr">TOKENS (</code><code dir="ltr"><span class="codeinlineitalic">token_definition</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">TOKENS</code> is valid for <code dir="ltr">TABLE</code>.</p>
<p>Use <code dir="ltr">TOKENS</code> to define a user token and associate it with data. Tokens enable you to extract and store data within the user token area of a trail record header. Token data can be retrieved and used in many ways to customize the way that Oracle GoldenGate delivers data. For example, you can use token data in column maps, stored procedures called by <code dir="ltr">SQLEXEC</code>, or macros.</p>
<p>To use the defined token data in target tables, use the <code dir="ltr">@TOKEN</code> column-conversion function in the <code dir="ltr">COLMAP</code> clause of a Replicat <code dir="ltr">MAP</code> statement. The <code dir="ltr">@TOKEN</code> function maps the name of a token to a target column.</p>
<p>Do not use this option for tables being processed in pass-through mode by a data-pump Extract group.</p>
<p>The character set of token data is not converted. The token must be in the character set of the source database for Extract and in the character set of the target database for Replicat.</p>
<p>Do not use this option for source tables that are encoded as EBCDIC on a z/OS system if the target tables are not EBCDIC.</p>
<p>For more information about using tokens, see <a class="olink GWUAD467" href="../../gg-winux/GWUAD/wu_datainteg.htm#GWUAD467"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a>.</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1511"></a>Syntax</p>
<pre dir="ltr">
TOKENS (<span class="italic">token_name</span> = <span class="italic">token_data</span> [, ...])
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">token_name</span></code></dt>
<dd>
<p>A name of your choice for the token. It can be any number of valid characters and is not case-sensitive. Multi-byte names are not supported.</p>
</dd>
<dt><code dir="ltr"><span class="codeinlineitalic">token_data</span></code></dt>
<dd>
<p>Any valid character string of up to 2000 bytes. The data can be either a literal that is enclosed within single quotes (or double quotes if <code dir="ltr">NOUSEANSISQLQUOTES</code> is in use) or the result of an Oracle GoldenGate column-conversion function. See <a href="gg_parameters183.htm#i2772705">"USEANSISQLQUOTES | NOUSEANSISQLQUOTES"</a> for more information.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1512"></a>Example</p>
<p>The following creates tokens named <code dir="ltr">TK-OSUSER</code>, <code dir="ltr">TK-GROUP</code>, and <code dir="ltr">TK-HOST</code> and maps them to token data obtained with the <code dir="ltr">@GETENV</code> function.</p>
<pre dir="ltr">
TABLE ora.oratest, TOKENS (
TK-OSUSER = @GETENV ('GGENVIRONMENT' , 'OSUSERNAME'),
TK-GROUP = @GETENV ('GGENVIRONMENT' , 'GROUPNAME')
TK-HOST =  @GETENV ('GGENVIRONMENT' , 'HOSTNAME'));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790153"></a><code dir="ltr">TRIMSPACES | NOTRIMSPACES</code></p>
<p><code dir="ltr">TRIMSPACES</code> and <code dir="ltr">NOTRIMSPACES</code> are valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">TRIMSPACES</code> and <code dir="ltr">NOTRIMSPACES</code> at the root level of a parameter file or within a <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement to control whether or not trailing spaces in a source <code dir="ltr">CHAR</code> column are truncated when applied to a target <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR</code> column. The default is <code dir="ltr">TRIMSPACES</code>.</p>
<p>See <a href="gg_parameters177.htm#CIHCCJDB">"TRIMSPACES | NOTRIMSPACES"</a> for syntax and usage.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2790152"></a><code dir="ltr">TRIMVARSPACES | NOTRIMVARSPACES</code></p>
<p><code dir="ltr">TRIMVARSPACES</code> and <code dir="ltr">NOTRIMVARSPACES</code> are valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">TRIMVARSPACES</code> and <code dir="ltr">NOTRIMVARSPACES</code> at the root level of a parameter file or within a <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement to control whether or not trailing spaces in a source <code dir="ltr">VARCHAR</code> column are truncated when applied to a target <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR</code> column. The default is <code dir="ltr">NOTRIMVARSPACES</code>.</p>
<p>See <a href="gg_parameters178.htm#BABBIAIB">"TRIMVARSPACES | NOTRIMVARSPACES"</a> for syntax and usage.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect"><a id="i2016740"></a><code dir="ltr">WHERE (</code><code dir="ltr"><span class="codeinlineitalic">clause</span></code><code dir="ltr">)</code></p>
<p><code dir="ltr">WHERE</code> is valid for <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code>.</p>
<p>Use <code dir="ltr">WHERE</code> to select records based on a conditional statement. <code dir="ltr">WHERE</code> does not support the following:</p>
<ul>
<li>
<p>Columns that have a multi-byte character set or a character set that is incompatible with the character set of the local operating system.</p>
</li>
<li>
<p>The evaluation of the before image of a primary key column in the conditional statement as part of a primary key update operation.</p>
</li>
</ul>
<p>Enclose literals in single quotes. Specify case-sensitive column names as they are stored in the database, and enclose them in double quotes if the database requires quotes to enforce case-sensitivity (such as Oracle).</p>
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1513"></a>Getting More Information about Record Filtering</p>
<p>See <a class="olink GWUAD426" href="../../gg-winux/GWUAD/wu_datainteg.htm#GWUAD426"><span class="italic">Administering Oracle GoldenGate for Windows and UNIX</span></a> for more information about <code dir="ltr">WHERE</code> and other filtering options.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1514"></a>Syntax</p>
<pre dir="ltr">
WHERE (<span class="italic">clause</span>)
</pre>
<dl>
<dt><code dir="ltr"><span class="codeinlineitalic">clause</span></code></dt>
<dd>
<p>Selects records based on a condition, such as:</p>
<pre dir="ltr">
WHERE (branch = 'NY')
</pre>
<p><a href="#BABCIFJI">Table 3-34</a> shows permissible <code dir="ltr">WHERE</code> operators.</p>
</dd>
</dl>
<div id="GWURF577" class="tblhruleformal"><p class="titleintable"><a id="sthref1515"></a><a id="BABCIFJI"></a>Table 3-34 Permissible WHERE Operators</p>
<table class="cellalignment145" title="Permissible WHERE Operators" summary="This table lists the permissible WHERE operators and gives examples of each.">
<thead>
<tr class="cellalignment136">
<th class="cellalignment146" id="r1c1-t86">Operator</th>
<th class="cellalignment146" id="r1c2-t86">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment136">
<td class="cellalignment142" id="r2c1-t86" headers="r1c1-t86">
<p>Column names</p>
</td>
<td class="cellalignment142" headers="r2c1-t86 r1c2-t86">
<pre dir="ltr">
PRODUCT_AMT
"Product_Amt"
</pre></td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r3c1-t86" headers="r1c1-t86">
<p>Numeric values</p>
</td>
<td class="cellalignment142" headers="r3c1-t86 r1c2-t86">
<pre dir="ltr">
-123, 5500.123
</pre></td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r4c1-t86" headers="r1c1-t86">
<p>Literal strings enclosed in single quotes</p>
</td>
<td class="cellalignment142" headers="r4c1-t86 r1c2-t86">
<pre dir="ltr">
 'AUTO', 'Ca'
</pre></td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r5c1-t86" headers="r1c1-t86">
<p>Column tests</p>
</td>
<td class="cellalignment142" headers="r5c1-t86 r1c2-t86">
<p><code dir="ltr">@NULL</code>, <code dir="ltr">@PRESENT</code>, <code dir="ltr">@ABSENT</code> (column is null, present or absent in the record). These tests are built into Oracle GoldenGate.</p>
</td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r6c1-t86" headers="r1c1-t86">
<p>Comparison operators</p>
</td>
<td class="cellalignment142" headers="r6c1-t86 r1c2-t86">
<pre dir="ltr">
 =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=
</pre></td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r7c1-t86" headers="r1c1-t86">
<p>Conjunctive operators</p>
</td>
<td class="cellalignment142" headers="r7c1-t86 r1c2-t86">
<pre dir="ltr">
AND, OR
</pre></td>
</tr>
<tr class="cellalignment136">
<td class="cellalignment142" id="r8c1-t86" headers="r1c1-t86">
<p>Grouping parentheses</p>
</td>
<td class="cellalignment142" headers="r8c1-t86 r1c2-t86">
<p>Use open and close parentheses for logical grouping of multiple elements.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect"><p class="titleinrefsubsect2"><a id="sthref1516"></a>Example</p>
<p>The following <code dir="ltr">WHERE</code> example returns all records when the <code dir="ltr">AMOUNT</code> column is over 10,000 and does not cause a record to be discarded when <code dir="ltr">AMOUNT</code> is absent.</p>
<pre dir="ltr">
WHERE (amount = @PRESENT AND amount &gt; 10000) 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment135">
<tr>
<td class="cellalignment142"><table class="cellalignment140">
<tr>
<td class="cellalignment139"><a href="gg_parameters159.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>

<td class="cellalignment139"><a href="gg_parameters161.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table></td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013, 2015,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment144">
<table class="cellalignment138">
<tr>
<td class="cellalignment139"><a href="../../index.html"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment139"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment139"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
