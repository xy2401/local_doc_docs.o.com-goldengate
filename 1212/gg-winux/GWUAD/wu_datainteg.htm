<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml/DTD/xhtml1-transitional.dtd">
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<title>12 Mapping and Manipulating Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1028" />
<meta name="description" content="This chapter describe how you can integrate data between source and target tables." />
<meta name="dcterms.created" content="2014-11-11T22:58:6Z" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Oracle&reg; GoldenGate Administering Oracle GoldenGate for Windows and UNIX" />
<meta name="dcterms.identifier" content="E29388-06" />
<meta name="dcterms.isVersionOf" content="GWUAD" />
<link rel="Start" href="../../index.html" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="wu_security.htm" title="Previous" type="text/html" />
<link rel="Next" href="wu_data_definitions.htm" title="Next" type="text/html" />
<link rel="alternate" href="../GWUAD.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="../GWUAD.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="../GWUAD.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Skip Headers</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns"><div id="BREADCRUMBS"><a href="http://docs.oracle.com">Home</a> / <a href="../../index.html">Middleware</a> / <a href="../index.html">Oracle GoldenGate for Windows and UNIX</a>
</div>

<span id="PAGE" style="display:none;">15/30</span>
<!-- End Header -->
<div id="GWUAD391" class="chapter"><a id="i1110792"></a>
<h1 class="chapter"><span class="secnum">12</span> Mapping and Manipulating Data</h1>
<p><a id="GWUAD392"></a>This chapter describe how you can <a id="sthref429"></a><a id="sthref430"></a><a id="sthref431"></a>integrate data between<a id="sthref432"></a><a id="sthref433"></a> source and target tables.</p>
<p>This chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#BABFBIJE">Limitations of Support</a></p>
</li>
<li>
<p><a href="#BABGABHA">Parameters that Control Mapping and Data Integration</a></p>
</li>
<li>
<p><a href="#BABHEDAI">Mapping between Dissimilar Databases</a></p>
</li>
<li>
<p><a href="#BABJGIAG">Deciding Where Data Mapping and Conversion Will Take Place</a></p>
</li>
<li>
<p><a href="#i1060077">Globalization Considerations when Mapping Data</a></p>
</li>
<li>
<p><a href="#i1073120">Mapping Columns</a></p>
</li>
<li>
<p><a href="#i1061723">Selecting and Filtering Rows</a></p>
</li>
<li>
<p><a href="#BABECDFC">Retrieving Before and After Values</a></p>
</li>
<li>
<p><a href="#BABGJCED">Selecting Columns</a></p>
</li>
<li>
<p><a href="#i1000197">Selecting and Converting SQL Operations</a></p>
</li>
<li>
<p><a href="#i1034022">Using Transaction History</a></p>
</li>
<li>
<p><a href="#i1025456">Testing and Transforming Data</a></p>
</li>
<li>
<p><a href="#i1000834">Using Tokens</a></p>
</li>
</ul>
<a id="BABFBIJE"></a>
<div id="GWUAD393" class="sect1">
<h2 class="sect1"><span class="secnum">12.1</span> Limitations of Support</h2>
<p>The following are limitations to the support of data mapping and manipulation.</p>
<ul>
<li>
<p>Oracle GoldenGate does not support the filtering, column mapping, or manipulation of large objects.</p>
</li>
<li>
<p>Some Oracle GoldenGate features and functionality do not support the use of data filtering and manipulation. Where applicable, this limitation is documented.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABGABHA"></a>
<div id="GWUAD394" class="sect1">
<h2 class="sect1"><span class="secnum">12.2</span> Parameters that Control Mapping and Data Integration</h2>
<p>All data selection, mapping, and manipulation that Oracle GoldenGate performs is accomplished by using one or more options of the <code dir="ltr"><a id="sthref434"></a>TABLE</code> and <code dir="ltr"><a id="sthref435"></a>MAP</code> parameters.</p>
<ul>
<li>
<p>Use <code dir="ltr">TABLE</code> in the Extract parameter file.</p>
</li>
<li>
<p>Use <code dir="ltr">MAP</code> in the Replicat parameter file.</p>
</li>
</ul>
<p><code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code> specify the database objects that are affected by the other parameters in the parameter file. See <a href="wu_gettingstarted.htm#i1074957">Section 4.5, "Specifying Object Names in Oracle GoldenGate Input"</a><a class="olink GWUAD192" href="../../gg-winux/GWUAD/wu_gettingstarted.htm#GWUAD192"></a> for instructions for specifying object names in these parameters.</p>
</div>
<!-- class="sect1" -->
<a id="BABHEDAI"></a>
<div id="GWUAD395" class="sect1">
<h2 class="sect1"><span class="secnum">12.3</span> Mapping between Dissimilar Databases</h2>
<p>Mapping and conversion between tables that have different data structures requires either a source-definitions file, a target-definitions file, or in some cases both. When used, this file must be specified with the <code dir="ltr">SOURCEDEFS</code> or <code dir="ltr">TARGETDEFS</code> parameter. For more information about how to create a source-definitions or target-definitions file, see <a href="wu_data_definitions.htm#g1086762">Chapter 13, "Associating Replicated Data with Metadata."</a></p>
</div>
<!-- class="sect1" -->
<a id="BABJGIAG"></a>
<div id="GWUAD396" class="sect1">
<h2 class="sect1"><span class="secnum">12.4</span> Deciding Where Data Mapping and Conversion Will Take Place</h2>
<p>If the configuration you are planning involves a large amount of column mapping or data conversion, observe the following guidelines to determine which process or processes will perform these functions.</p>
<div id="GWUAD397" class="sect2"><a id="sthref436"></a>
<h3 class="sect2"><span class="secnum">12.4.1</span> Mapping and Conversion on Windows and UNIX Systems</h3>
<p>When Oracle GoldenGate is operating only on Windows-based and UNIX-based systems, column mapping and conversion can be performed on the source system, on the target system, or on an intermediary system. To prevent the added overhead of this processing on the source system, you can configure the mapping and conversion to be performed on the target system or on an intermediary system.</p>
<p>In the case where there are multiple sources and one target, it might be more efficient to perform the mapping and conversion on the source. You can use one target-definitions file generated from the target tables, rather than having to manage an individual source-definitions file for each source database, which needs to be copied to the target each time the applications make layout changes.</p>
<p>For more information on which types of definitions files to use, and where, see <a href="wu_data_definitions.htm#g1086762">Chapter 13, "Associating Replicated Data with Metadata."</a></p>
</div>
<!-- class="sect2" -->
<div id="GWUAD398" class="sect2"><a id="sthref437"></a>
<h3 class="sect2"><span class="secnum">12.4.2</span> Mapping and Conversion on NonStop Systems</h3>
<p>If you are mapping or converting data from a Windows or UNIX system to a NonStop Enscribe target, the mapping or conversion must be performed on the Windows or UNIX source system. Replicat for NonStop cannot convert three-part or two-part SQL table names and data types to the three-part file names that are used for the Enscribe platform. Extract can format the trail data with Enscribe names and target data types.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1060077"></a>
<div id="GWUAD399" class="sect1">
<h2 class="sect1"><span class="secnum">12.5</span> Globalization Considerations when Mapping Data</h2>
<p>When planning to map and convert data between databases and platforms, take into consideration what is supported or not supported by Oracle GoldenGate in terms of globalization. These considerations encompass the following topics:</p>
<p><a href="#i1076779">Section 12.5.1, "Conversion between Character Sets"</a></p>
<p><a href="#BCGDGEGI">Section 12.5.2, "Preservation of Locale"</a></p>
<p><a href="#i1060092">Section 12.5.3, "Support for Escape Sequences"</a></p>
<a id="i1076779"></a>
<div id="GWUAD400" class="sect2">
<h3 class="sect2"><span class="secnum">12.5.1</span> Conversion between Character Sets</h3>
<p>Oracle GoldenGate converts between source and target character sets if they are different, so that object names and column data are compared, mapped, and manipulated properly from one database to another. See <a href="wu_charsets.htm#g1039594">Appendix A, "Supported Character Sets,"</a> for a list of supported character sets.</p>
<p>To ensure accurate character representation from one database to another, the following must be true:</p>
<ul>
<li>
<p>The character set of the target database must be a superset or equivalent of the character set of the source database. <span class="italic">Equivalent</span> means not equal, but having the same set of characters. For example, Shift-JIS and EUC-JP technically are not completely equal, but have the same characters in most cases.</p>
</li>
<li>
<p>If your client applications use different character sets, the database character set must also be a superset or equivalent of the character sets of the client applications.</p>
</li>
</ul>
<p>In this configuration, every character is represented when converting from a client or source character set to the local database character set.</p>
<p>A Replicat process can support conversion from one source character set to one target character set.</p>
<div id="GWUAD401" class="sect3"><a id="sthref438"></a>
<h4 class="sect3"><span class="secnum">12.5.1.1</span> Database Object Names</h4>
<p>Oracle GoldenGate processes catalog, schema, table and column names in their native language as determined by the character set encoding of the source and target databases. This support preserves single-byte and multibyte names, symbols, accent characters, and case-sensitivity with locale taken into account where available, at all levels of the database hierarchy.</p>
</div>
<!-- class="sect3" -->
<div id="GWUAD402" class="sect3"><a id="sthref439"></a>
<h4 class="sect3"><span class="secnum">12.5.1.2</span> Column Data</h4>
<p>Oracle GoldenGate supports the conversion of column data between character sets when the data is contained in the following column types:</p>
<ul>
<li>
<p>Character-type columns: <code dir="ltr">CHAR/VARCHAR/CLOB</code> to <code dir="ltr">CHAR/VARCHAR/CLOB</code> of another character set; and <code dir="ltr">CHAR/VARCHAR/CLOB</code> to and from <code dir="ltr">NCHAR/NVARCHAR/NCLOB.</code></p>
</li>
<li>
<p>Columns that contain string-based numbers and date-time data. Conversions of these columns is performed between z/OS EBCDIC and non-z/OS ASCII data. Conversion is not performed between ASCII and ASCII versions of this data, nor between EBCDIC and EBCDIC versions, because the data are compatible in these cases.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle GoldenGate supports timestamp data from <code dir="ltr">0001-01-03 00:00:00</code> to <code dir="ltr">9999-12-31 23:59:59</code>. If a timestamp is converted from GMT to local time, these limits also apply to the resulting timestamp. Depending on the timezone, conversion may add or subtract hours, which can cause the timestamp to exceed the lower or upper supported limit.</div>
</li>
</ul>
<p>Character-set conversion for column data is limited to a direct mapping of a source column and a target column in the <code dir="ltr">COLMAP</code> or <code dir="ltr">USEDEFAULTS</code> clauses of the Replicat <code dir="ltr">MAP</code> parameter. A direct mapping is a name-to-name mapping without the use of a stored procedure or column-conversion function. Replicat performs the character-set conversion. No conversion is performed by Extract or a data pump.</p>
<p>If the trail is written by a version of Extract that is prior to version 11.2.1, the character set for character-type columns must be supplied to Replicat with the <code dir="ltr">SOURCECHARSET</code> parameter. This parameter also supplies a <code dir="ltr">PASSTHRU</code> option for preventing the conversion of character sets. For more information, see <a class="olink GWURF1123" href="../../gg-winux/GWURF/gg_parameters148.htm#GWURF1123"><span class="italic">Reference for Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BCGDGEGI"></a>
<div id="GWUAD403" class="sect2">
<h3 class="sect2"><span class="secnum">12.5.2</span> Preservation of Locale</h3>
<p>Oracle GoldenGate takes the locale of the database into account when comparing case-insensitive object names. See <a href="wu_locales.htm#g1043582">Appendix B, "Supported Locales"</a> for a list of supported locales.</p>
</div>
<!-- class="sect2" -->
<a id="i1060092"></a>
<div id="GWUAD404" class="sect2">
<h3 class="sect2"><span class="secnum">12.5.3</span> Support for Escape Sequences</h3>
<p>Oracle GoldenGate supports the use of an escape sequence to represent a string column, literal text, or object name in the parameter file. You can use an escape sequence if the operating system does not support the required character, such as a control character, or for any other purpose that requires a character that cannot be used in a parameter file.</p>
<p>An escape sequence can be used anywhere in the parameter file, but is particularly useful in the following elements within a <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement:</p>
<ul>
<li>
<p>An object name</p>
</li>
<li>
<p><code dir="ltr">WHERE</code> clause</p>
</li>
<li>
<p><code dir="ltr">COLMAP</code> clause to assign a Unicode character to a Unicode column, or to assign a native-encoded character to a column.</p>
</li>
<li>
<p>Oracle GoldenGate column conversion functions within a <code dir="ltr">COLMAP</code> clause.</p>
</li>
</ul>
<p>Oracle GoldenGate supports the following types of escape sequence:</p>
<ul>
<li>
<p><code dir="ltr">\uFFFF</code> Unicode escape sequence. Any <code dir="ltr">UNICODE</code> code point can be used except surrogate pairs.</p>
</li>
<li>
<p><code dir="ltr">\377</code> Octal escape sequence</p>
</li>
<li>
<p><code dir="ltr">\xFF</code> Hexadecimal escape sequence</p>
</li>
</ul>
<p>The following rules apply:</p>
<ul>
<li>
<p>If used for mapping of an object name in <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code>, no restriction apply. For example, the following <code dir="ltr">TABLE</code> specification is valid:</p>
<pre dir="ltr">
TABLE schema."\u3000ABC";
</pre></li>
<li>
<p>If used with a column-mapping function, any code point can be used, but only for an <code dir="ltr">NCHAR/NVARCHAR</code> column. For an <code dir="ltr">CHAR/VARCHAR</code> column, the code point is limited to the equivalent of 7-bit ASCII.</p>
</li>
<li>
<p>The source and target data types must be identical (for example, <code dir="ltr">NCHAR</code> to <code dir="ltr">NCHAR</code> ).</p>
</li>
<li>
<p>Begin each escape sequence with a reverse solidus (code point <code dir="ltr">U+005C</code>), followed by the character code point. (A solidus is more commonly known as the backslash symbol.) Use the escape sequence, instead of the actual character, within your input string in the parameter statement or column-conversion function.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
To specify an actual backslash in the parameter file, specify a double backslash. For example, the following finds a backslash in <code dir="ltr">COL1: @STRFIND (COL1, '\\' )</code>.</div>
<p class="subhead2"><a id="GWUAD1100"></a>To use the \uFFFF Unicode escape sequence</p>
<ul>
<li>
<p>The <code dir="ltr">\uFFFF</code> Unicode escape sequence must begin with a lowercase <code dir="ltr">u</code>, followed by exactly four hexadecimal digits.</p>
</li>
<li>
<p>Supported ranges are as follows:</p>
<ul>
<li>
<p><code dir="ltr">0</code> to <code dir="ltr">9</code> (<code dir="ltr">U+0030</code> to <code dir="ltr">U+0039</code>)</p>
</li>
<li>
<p><code dir="ltr">A</code> to <code dir="ltr">F</code> (<code dir="ltr">U+0041</code> to <code dir="ltr">U+0046</code>)</p>
</li>
<li>
<p><code dir="ltr">a</code> to <code dir="ltr">f</code> (<code dir="ltr">U+0061</code> to <code dir="ltr">U+0066</code>)</p>
</li>
</ul>
</li>
</ul>
<p><code dir="ltr">\u20ac</code> is the Unicode escape sequence for the Euro currency sign.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For reliable cross-platform support, use the Unicode escape sequence. Octal and hexadecimal escape sequences are not standardized on different operating systems.</div>
<p class="subhead2"><a id="GWUAD1101"></a>To use the \377 octal escape sequence</p>
<ul>
<li>
<p>Must contain exactly three octal digits.</p>
</li>
<li>
<p>Supported ranges:</p>
<ul>
<li>
<p>Range for first digit is <code dir="ltr">0</code> to <code dir="ltr">3</code> (<code dir="ltr">U+0030</code> to <code dir="ltr">U+0033</code>)</p>
</li>
<li>
<p>Range for second and third digits is <code dir="ltr">0</code> to <code dir="ltr">7</code> (<code dir="ltr">U+0030</code> to <code dir="ltr">U+0037</code>)</p>
<p><code dir="ltr">\200</code> is the octal escape sequence for the Euro currency sign on Microsoft Windows</p>
</li>
</ul>
</li>
</ul>
<p class="subhead2"><a id="GWUAD1102"></a>To use the \xFF hexadecimal escape sequence</p>
<ul>
<li>
<p>Must begin with a lowercase <code dir="ltr">x</code> followed by exactly two hexadecimal digits.</p>
</li>
<li>
<p>Supported ranges:</p>
<ul>
<li>
<p><code dir="ltr">0</code> to <code dir="ltr">9</code> (<code dir="ltr">U+0030</code> to <code dir="ltr">U+0039</code>)</p>
</li>
<li>
<p><code dir="ltr">A</code> to <code dir="ltr">F</code> (<code dir="ltr">U+0041</code> to <code dir="ltr">U+0046</code>)</p>
</li>
<li>
<p><code dir="ltr">a</code> to <code dir="ltr">f</code> (<code dir="ltr">U+0061</code> to <code dir="ltr">U+0066</code>)</p>
</li>
</ul>
</li>
</ul>
<p><code dir="ltr">\x80</code> is the hexadecimal escape sequence for the Euro currency sign on Microsoft Windows 1252 Latin1 code page.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1073120"></a>
<div id="GWUAD405" class="sect1">
<h2 class="sect1"><span class="secnum">12.6</span> M<a id="sthref440"></a>apping <a id="sthref441"></a>Columns</h2>
<p>Oracle GoldenGate provides for column mapping at the table level and at the global level. Default column mapping is also provided in the absence of explicit column mapping rules.</p>
<p>This section contains the following guidelines for mapping columns:</p>
<p><a href="#BCGECDFA">Section 12.6.2, "Configuring Table-level Column Mapping with COLMAP"</a></p>
<p><a href="#BCGBGHAF">Section 12.6.3, "Configuring Global Column Mapping with COLMATCH"</a></p>
<p><a href="#i1077312">Section 12.6.4, "Understanding Default Column Mapping"</a></p>
<p><a href="#BCGFCDGI">Section 12.6.5, "Mapping Data Types from Column to Column"</a></p>
<p><a href="#i1065158">Section 12.6.1, "Supporting Case and Special Characters in Column Names"</a></p>
<a id="i1065158"></a>
<div id="GWUAD406" class="sect2">
<h3 class="sect2"><span class="secnum">12.6.1</span> Supporting Case and Special Characters in Column Names</h3>
<p>By default, Oracle GoldenGate follows SQL-92 rules for specifying column names and literals. In Oracle GoldenGate parameter files, conversion functions, user exits, and commands, case-sensitive column names must be enclosed within double quotes if double quotes are required by the database to enforce case-sensitivity. For other case-sensitive databases that do not require quotes, case-sensitive column names must be specified as they are stored in the database. Literals must be enclosed within single quotes. See <a href="wu_gettingstarted.htm#CHDFHBEF">Section 4.5.7, "Differentiating Case-sensitive Column Names from Literals"</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="BCGECDFA"></a>
<div id="GWUAD407" class="sect2">
<h3 class="sect2"><span class="secnum">12.6.2</span> Configuring Table-level Column Mapping with COLMAP</h3>
<p>Use the <code dir="ltr"><a id="sthref442"></a>COLMAP</code> option of the <code dir="ltr">MAP</code> and <code dir="ltr">TABLE</code> parameters to:</p>
<ul>
<li>
<p>map individual source columns to target columns that have different names.</p>
</li>
<li>
<p>specify default column mapping when an explicit column mapping is not needed.</p>
</li>
<li>
<p>Provide instructions for selecting, mapping, translating, and moving data from a source column into a target column.</p>
</li>
</ul>
<div id="GWUAD901" class="sect3"><a id="sthref443"></a>
<h4 class="sect3"><span class="secnum">12.6.2.1</span> Specifying the Columns to be Mapped in the COLMAP Clause</h4>
<p>The <code dir="ltr">COLMAP</code> syntax is the following:</p>
<pre dir="ltr">
COLMAP ([USEDEFAULTS, ] <span class="codeinlineitalic">target_column</span> = <span class="codeinlineitalic">source_expression</span>)
</pre>
<p>In this syntax, <code dir="ltr"><span class="codeinlineitalic">target_column</span></code> is the name of the target column, and <code dir="ltr"><span class="codeinlineitalic">source_expression</span></code> can be any of the following, allowing you to map the source column by name, so as to pass the source value exactly as recorded in the trail, or to transform the data before passing it to the target column:</p>
<ul>
<li>
<p>The name of a source column, such as <code dir="ltr">ORD_DATE</code>.</p>
</li>
<li>
<p>Numeric constant, such as <code dir="ltr">123</code>.</p>
</li>
<li>
<p>String constant enclosed within single quotes, such as <code dir="ltr">'ABCD'</code>.</p>
</li>
<li>
<p>An expression using an Oracle GoldenGate column-conversion function. Within a <code dir="ltr">COLMAP</code> statement, you can employ any of the Oracle GoldenGate column-conversion functions to transform data for the mapped columns, for example:</p>
<pre dir="ltr">
@STREXT (COL1, 1, 3)
 
</pre></li>
</ul>
<p>If the column mapping involves case-sensitive columns from different database types, specify each column as it is stored in the database.</p>
<ul>
<li>
<p>If the database requires double quotes to enforce case-sensitivity, specify the case-sensitive column name within double quotes.</p>
</li>
<li>
<p>If the database is case-sensitive without requiring double quotes, specify the column name as it is stored in the database.</p>
</li>
</ul>
<p>The following shows a mapping between a target column in an Oracle database and a source column in a case-sensitive SQL Server database.</p>
<pre dir="ltr">
COLMAP ("ColA" = ColA)
</pre>
<p>See <a href="wu_gettingstarted.htm#i1074957">Section 4.5, "Specifying Object Names in Oracle GoldenGate Input"</a> for more information about specifying names to Oracle GoldenGate.</p>
<p>See <a href="#i1060077">Section 12.5, "Globalization Considerations when Mapping Data"</a> for globalization considerations when mapping source and target columns in databases that have different character sets and locales.</p>
<p>Avoid using <code dir="ltr">COLMAP</code> to map a value to a key column (which causes the operation to become a primary key update), The <code dir="ltr">WHERE</code> clause that Oracle GoldenGate uses to locate the target row will not use the correct before image of the key column. Instead, it will use the after image. This will cause errors if you are using any functions based on that key column, such as a <code dir="ltr">SQLEXEC</code> statement, as shown in the following example.</p>
<ul>
<li>
<p>Source table <code dir="ltr">TCUSTMER1</code></p>
</li>
<li>
<p>Target table <code dir="ltr">TCUSTMER2</code></p>
</li>
<li>
<p>Column layout, both tables:</p>
<dl>
<dd>Column 1 = <code dir="ltr">Cust</code></dd>
<dd>Column 2 = <code dir="ltr">Name</code></dd>
<dd>Column 3 = <code dir="ltr">City</code></dd>
<dd>Column 4 = <code dir="ltr">State</code></dd>
</dl>
</li>
<li>
<p>Primary key consiste of the <code dir="ltr">Cust</code>, <code dir="ltr">Name</code>, and <code dir="ltr">City</code> columns.</p>
</li>
<li>
<p><code dir="ltr">SQLEXEC</code> query in the <code dir="ltr">MAP</code> statement:</p>
<pre dir="ltr">
SQLEXEC (id mytest, query 'select city from TCUSTMER1 WHERE state = 'CA'', noparams, ERROR RAISE)
</pre></li>
<li>
<p><code dir="ltr">COLMAP</code> statement in the <code dir="ltr">MAP</code> statement:</p>
<pre dir="ltr">
COLMAP ( usedefaults, city = mytest.city )
</pre></li>
</ul>
<p>This is the sequence of events that causes the error:</p>
<ol>
<li>
<p><code dir="ltr">INSERT</code> statement inserts the following:</p>
<pre dir="ltr">
INSERT into TCUSTMER1 values (Cust = '1234', Name = 'Ace', City = 'SF', State = 'CA');
Commit;
</pre>
<p>The <code dir="ltr">SQLEXEC</code> query returns the correct value, and the target table also has a value of <code dir="ltr">SF</code> for <code dir="ltr">City</code> and <code dir="ltr">CA</code> for <code dir="ltr">State</code>.</p>
<pre dir="ltr">
mytest.city = 'SF'
</pre></li>
<li>
<p><code dir="ltr">UPDATE</code> statement changes <code dir="ltr">City</code> from <code dir="ltr">SF</code> to <code dir="ltr">LA</code> on the source. This does not succeed on the target. The <code dir="ltr">SQLEXEC</code> query looks up the <code dir="ltr">City</code> column in <code dir="ltr">TCUSTMER1</code> and returns a value of <code dir="ltr">LA</code>. Based on the <code dir="ltr">COLMAP</code> clause, the before and after versions of <code dir="ltr">City</code> both are now <code dir="ltr">LA</code>. This generates SQL error 1403 when executing the target <code dir="ltr">WHERE</code> clause, because a value of <code dir="ltr">LA</code> does not exist for the <code dir="ltr">City</code> column in the target table.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1049517"></a>
<div id="GWUAD900" class="sect3">
<h4 class="sect3"><span class="secnum">12.6.2.2</span> Using USEDEFAULTS to Enable Default Column Mapping</h4>
<p>You can use the <code dir="ltr"><a id="sthref444"></a>USEDEFAULTS</code> option of <code dir="ltr">COLMAP</code> to specify automatic default column mapping for any corresponding source and target columns that have identical names. <code dir="ltr">USEDEFAULTS</code> can save you time by eliminating the need to map every target column explicitly.</p>
<p>Default mapping causes Oracle GoldenGate to map those columns and, if required, translate the data types based on the data-definitions file (see <a href="#BCGFFIJD">Section 12.6.2.3, "Determining Whether COLMAP Requires a Data-definitions File"</a>). Do not specify default mapping for columns that are mapped already with an explicit mapping statement.</p>
<p>The following example of a column mapping illustrates the use of both default and explicit column mapping for a source table <code dir="ltr">ACCTBL</code> and a target table <code dir="ltr">ACCTTAB</code>. Most columns are the same in both tables, except for the following differences:</p>
<ul>
<li>
<p>The source table has a <code dir="ltr">CUST_NAME</code> column, whereas the target table has a <code dir="ltr">NAME</code> column.</p>
</li>
<li>
<p>A ten-digit <code dir="ltr">PHONE_NO</code> column in the source table corresponds to separate <code dir="ltr">AREA_CODE</code>, <code dir="ltr">PHONE_PREFIX</code>, and <code dir="ltr">PHONE_NUMBER</code> columns in the target table.</p>
</li>
<li>
<p>Separate <code dir="ltr">YY, MM</code>, and <code dir="ltr">DD</code> columns in the source table correspond to a single <code dir="ltr">TRANSACTION_DATE</code> column in the target table.</p>
</li>
</ul>
<p>To address those differences, <code dir="ltr">USEDEFAULTS</code> is used to map the similar columns automatically, while explicit mapping and conversion functions are used for dissimilar columns.</p>
<div id="GWUAD902" class="tblhruleformal"><p class="titleintable"><a id="sthref445"></a><a id="sthref446"></a>Table 12-1 Sample Column Mapping</p>
<table class="cellalignment160" title="Sample Column Mapping" summary="This table shows sample column mappings using the COLMAP option of the MAP and TABLE parameters.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t5">Parameter statement</th>
<th class="cellalignment161" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t5" headers="r1c1-t5">
<pre dir="ltr">
MAP SALES.ACCTBL,
TARGET SALES.ACCTTAB,
</pre></td>
<td class="cellalignment157" headers="r2c1-t5 r1c2-t5">
<p>Maps the source table <code dir="ltr">ACCTBL</code> to the target table <code dir="ltr">ACCTTAB</code>.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t5" headers="r1c1-t5">
<pre dir="ltr">
COLMAP(
</pre></td>
<td class="cellalignment157" headers="r3c1-t5 r1c2-t5">
<p>Begins the <code dir="ltr">COLMAP</code> statement.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t5" headers="r1c1-t5">
<pre dir="ltr">
USEDEFAULTS,
</pre></td>
<td class="cellalignment157" headers="r4c1-t5 r1c2-t5">
<p>Maps source columns as-is when the target column names are identical.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t5" headers="r1c1-t5">
<pre dir="ltr">
NAME = CUST_NAME,
</pre></td>
<td class="cellalignment157" headers="r5c1-t5 r1c2-t5">
<p>Maps the source column <code dir="ltr">CUST_NAME</code> to the target column <code dir="ltr">NAME</code>.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r6c1-t5" headers="r1c1-t5">
<pre dir="ltr">
TRANSACTION_DATE =
@DATE ('YYYY-MM-DD', 'YY',
YEAR, 'MM', MONTH, 'DD', DAY),
</pre></td>
<td class="cellalignment157" headers="r6c1-t5 r1c2-t5">
<p>Converts the transaction date from the source date columns to the target column <code dir="ltr">TRANSACTION_DATE</code> by using the <code dir="ltr">@DATE</code> column conversion function.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r7c1-t5" headers="r1c1-t5">
<pre dir="ltr">
AREA_CODE =
@STREXT (PHONE_NO, 1, 3),
PHONE_PREFIX =
@STREXT (PHONE_NO, 4, 6),
PHONE_NUMBER =
@STREXT (PHONE_NO, 7, 10))
;
</pre></td>
<td class="cellalignment157" headers="r7c1-t5 r1c2-t5">
<p>Converts the source column <code dir="ltr">PHONE_NO</code> into the separate target columns of <code dir="ltr">AREA_CODE</code>, <code dir="ltr">PHONE_PREFIX</code>, and <code dir="ltr">PHONE_NUMBER</code> by using the <code dir="ltr">@STREXT</code> column conversion function.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>See <a href="#i1077312">Section 12.6.4, "Understanding Default Column Mapping"</a> for more information about the rules followed by Oracle GoldenGate for default column mapping.</p>
</div>
<!-- class="sect3" -->
<a id="BCGFFIJD"></a>
<div id="GWUAD408" class="sect3">
<h4 class="sect3"><span class="secnum">12.6.2.3</span> Determining Whether COLMAP Requires a Data-definitions File</h4>
<p>When using <code dir="ltr">COLMAP</code>, you might need to create a data-definitions file. To make this determination, you must consider whether the source and target column structures are identical, as defined by Oracle GoldenGate.</p>
<p>For source and target structures to be identical, they must:</p>
<ul>
<li>
<p>be of the same database type, that is, all Oracle.</p>
</li>
<li>
<p>have the same character set and locale.</p>
</li>
<li>
<p>contain the same number of columns.</p>
</li>
<li>
<p>have identical column names (including case, white spaces, and quotes if applicable).</p>
</li>
<li>
<p>have identical data types.</p>
</li>
<li>
<p>have identical column lengths.</p>
</li>
<li>
<p>have the same column length semantics for character columns (bytes versus characters).</p>
</li>
<li>
<p>define all of the columns in the same order.</p>
</li>
</ul>
<p>When using <code dir="ltr">COLMAP</code> for source and target tables that are not identical in structure, you must:</p>
<ul>
<li>
<p>generate data definitions for the source tables, the target tables, or both, depending on the Oracle GoldenGate configuration and the databases that are being used.</p>
</li>
<li>
<p>transfer the definitions file to the system where they will be used.</p>
</li>
<li>
<p>use the <code dir="ltr">SOURCEDEFS</code> parameter to identify the definitions file for Replicat on a target system or use the <code dir="ltr">TARGETDEFS</code> parameter to identify the definitions file for Extract or a data pump on a source system or intermediary system.</p>
</li>
</ul>
<p>When using <code dir="ltr">COLMAP</code> for source and target tables that are identical in structure, and you are only using <code dir="ltr">COLMAP</code> for other functions such as conversion, a source definitions file is not needed. When a definitions file is not being used, you must use the <code dir="ltr"><a id="sthref447"></a>ASSUMETARGETDEFS</code> parameter instead. See <a class="olink GWURF401" href="../../gg-winux/GWURF/gg_parameters008.htm#GWURF401"><span class="italic">Reference for Oracle GoldenGate for Windows and UNIX</span></a> for more information.</p>
<p>See <a href="wu_data_definitions.htm#g1086762">Chapter 13, "Associating Replicated Data with Metadata"</a> for more information about using a definitions file.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BCGBGHAF"></a>
<div id="GWUAD413" class="sect2">
<h3 class="sect2"><span class="secnum">12.6.3</span> Configuring <a id="sthref448"></a>Global Column Mapping with COLMATCH</h3>
<p>Use the <code dir="ltr"><a id="sthref449"></a>COLMATCH</code> parameter to create global rules for column mapping. With <code dir="ltr">COLMATCH</code>, you can map between similarly structured tables that have different column names for the same sets of data. <code dir="ltr">COLMATCH</code> provides a more convenient way to map columns of this type than does using table-level mapping with a <code dir="ltr"><a id="sthref450"></a>COLMAP</code> clause in individual <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements.</p>
<p>Case-sensitivity is supported as follows:</p>
<ul>
<li>
<p>For Sybase, MySQL, SQL Server, PostgreSQL, and Teradata, if the database is case-sensitive, <code dir="ltr">COLMATCH</code> looks for an exact case and name match regardless of whether or not a name is specified in quotes.</p>
</li>
<li>
<p>For Oracle, DB2, and SQL/MX, where names can be either case-sensitive or case-insensitive in the same database and double quotes are required to show case-sensitivity, <code dir="ltr">COLMATCH</code> requires an exact case and name match when a name is in quotes in the database.</p>
</li>
</ul>
<p>See <a href="wu_gettingstarted.htm#i1074957">Section 4.5, "Specifying Object Names in Oracle GoldenGate Input"</a> for more information about case-sensitivity support.</p>
<p class="subhead2"><a id="GWUAD416"></a>Syntax</p>
<pre dir="ltr">
COLMATCH
{NAMES <span class="codeinlineitalic">target_column</span> = <span class="codeinlineitalic">source_column</span> |
PREFIX <span class="codeinlineitalic">prefix</span> |
SUFFIX <span class="codeinlineitalic">suffix</span> |
RESET}
</pre>
<div id="GWUAD417" class="tblhruleformal"><p class="titleintable"><a id="sthref451"></a><a id="sthref452"></a>Table 12-2 COLMATCH Options</p>
<table class="cellalignment160" title="COLMATCH Options" summary="This table describes the COLMATCH options.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t6">Argument</th>
<th class="cellalignment161" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t6" headers="r1c1-t6">
<pre dir="ltr">
NAMES <span class="codeinlineitalic">target_column</span> = <span class="codeinlineitalic">source_column</span>
</pre></td>
<td class="cellalignment157" headers="r2c1-t6 r1c2-t6">
<p>Maps based on column names.</p>
<p>Put double quotes around the column name if it is case-sensitive and the database requires quotes to enforce case-sensitivity. For these database types, an unquoted column name is treated as case-insensitive by Oracle GoldenGate.</p>
<p>For databases that support case-sensitivity without requiring quotes, specify the column name as it is stored in the database.</p>
<p>If the <code dir="ltr">COLMATCH</code> is between columns in different database types, make certain the names reflect the appropriate case representation for each one. For example, the following specifies a case-sensitive target column name <code dir="ltr">"aBc</code>" in an Oracle database and a case-sensitive source column name <code dir="ltr">aBc</code> in a case-sensitive SQL Server database.</p>
<pre dir="ltr">
COLMATCH NAMES "aBc" = aBc
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t6" headers="r1c1-t6">
<pre dir="ltr">
PREFIX <span class="codeinlineitalic">prefix</span> | SUFFIX <span class="codeinlineitalic">suffix</span>
</pre></td>
<td class="cellalignment157" headers="r3c1-t6 r1c2-t6">
<p>Ignores the specified name prefix or suffix.</p>
<p>Put double quotes around the prefix or suffix if the database requires quotes to enforce case-sensitivity, for example "<code dir="ltr">P_"</code>. For those database types, an unquoted prefix or suffix is treated as case-insensitive.</p>
<p>For databases that support case-sensitivity without requiring quotes, specify the prefix or suffix as it is stored in the database. For example, <code dir="ltr">P_</code> specifies a capital <code dir="ltr">P</code> prefix.</p>
<p>The following example specifies a case-insensitive prefix to ignore. The target column name <code dir="ltr">P_ABC</code> is mapped to source column name <code dir="ltr">ABC</code>, and target column name <code dir="ltr">P_abc</code> is mapped to source column name <code dir="ltr">abc</code>.</p>
<pre dir="ltr">
COLMATCH PREFIX p_
</pre>
<p>The following example specifies a case-sensitive <code dir="ltr">suffix</code> to ignore. The target column name <code dir="ltr">ABC_k</code> is mapped to the source column name <code dir="ltr">ABC</code>, and the target column name "<code dir="ltr">abc_k</code>" is mapped to the source column name "abc".</p>
<pre dir="ltr">
SUFFIX "_k"
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t6" headers="r1c1-t6">
<pre dir="ltr">
RESET
</pre></td>
<td class="cellalignment157" headers="r4c1-t6 r1c2-t6">
<p>Turns off previously defined <code dir="ltr">COLMATCH</code> rules for subsequent <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following example illustrates when to use <code dir="ltr">COLMATCH.</code> The source and target tables are identical except for slightly different table and column names.The database is case-insensitive.</p>
<div id="GWUAD418" class="tblhruleformal"><p class="titleintable"><a id="sthref453"></a><a id="sthref454"></a>Table 12-3 COLMATCH Example Table: Source Database</p>
<table class="cellalignment160" title="COLMATCH Example Table: Source Database" summary="This table shows a COLMATCH example table for the source database.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t7">ACCT Table</th>
<th class="cellalignment161" id="r1c2-t7">ORD Table</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t7" headers="r1c1-t7">
<pre dir="ltr">
CUST_CODE
CUST_NAME
CUST_ADDR
PHONE
S_REP
S_REPCODE
</pre></td>
<td class="cellalignment157" headers="r2c1-t7 r1c2-t7">
<pre dir="ltr">
CUST_CODE
CUST_NAME
ORDER_ID
ORDER_AMT
S_REP
S_REPCODE
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div id="GWUAD419" class="tblhruleformal"><p class="titleintable"><a id="sthref455"></a><a id="sthref456"></a>Table 12-4 COLMATCH Example Table: Target Database</p>
<table class="cellalignment160" title="COLMATCH Example Table: Target Database" summary="This table shows a COLMATCH example table for the target database.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t8">ACCOUNT Table</th>
<th class="cellalignment161" id="r1c2-t8">ORDER Table</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t8" headers="r1c1-t8">
<pre dir="ltr">
CUSTOMER_CODE
CUSTOMER_NAME
CUSTOMER_ADDRESS
PHONE
REP
REPCODE
</pre></td>
<td class="cellalignment157" headers="r2c1-t8 r1c2-t8">
<pre dir="ltr">
CUSTOMER_CODE
CUSTOMER_NAME
ORDER_ID
ORDER_AMT
REP
REPCODE
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>To map the source columns to the target columns in this example, as well as to handle subsequent maps for other tables, the syntax is:</p>
<pre dir="ltr">
COLMATCH NAMES CUSTOMER_CODE = CUST_CODE
COLMATCH NAMES CUSTOMER_NAME = CUST_NAME
COLMATCH NAMES CUSTOMER_ADDRESS = CUST_ADDR
COLMATCH PREFIX S_
MAP SALES.ACCT, TARGET SALES.ACCOUNT, COLMAP (USEDEFAULTS);
MAP SALE.ORD, TARGET SALES.ORDER, COLMAP (USEDEFAULTS);
COLMATCH RESET
MAP SALES.REG, TARGET SALE.REG;
MAP SALES.PRICE, TARGET SALES.PRICE;
</pre>
<pre dir="ltr">
</pre>
<p>Based on the rules in the example, the following occurs:</p>
<ul>
<li>
<p>Data is mapped from the <code dir="ltr">CUST_CODE</code> columns in the source <code dir="ltr">ACCT</code> and <code dir="ltr">ORD</code> tables to the <code dir="ltr">CUSTOMER_CODE</code> columns in the target <code dir="ltr">ACCOUNT</code> and <code dir="ltr">ORDER</code> tables.</p>
</li>
<li>
<p>The <code dir="ltr">S_</code> prefix will be ignored.</p>
</li>
<li>
<p>Columns with the same names, such as the <code dir="ltr">PHONE</code> and <code dir="ltr">ORDER_AMT</code> columns, are automatically mapped by means of <code dir="ltr">USEDEFAULTS</code> without requiring explicit rules. See <a href="#i1077312">Section 12.6.4, "Understanding Default Column Mapping"</a> for more information.</p>
</li>
<li>
<p>The previous global column mapping is turned off for the tables <code dir="ltr">REG</code> and <code dir="ltr">PRICE</code>. Source and target columns in those tables are automatically mapped because all of the names are identical.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1077312"></a>
<div id="GWUAD420" class="sect2">
<h3 class="sect2"><span class="secnum">12.6.4</span> Understanding Default Column Mapping</h3>
<p>If an explicit column mapping does not exist, either by using <code dir="ltr">COLMATCH</code> or <code dir="ltr">COLMAP</code>, Oracle GoldenGate maps source and target columns by default according to the following rules.</p>
<ul>
<li>
<p>If a source column is found whose name and case exactly match those of the target column, the two are mapped.</p>
</li>
<li>
<p>If no case match is found, fallback name mapping is used. Fallback mapping performs a case-insensitive target table mapping to find a name match. Inexact column name matching is applied using upper cased names.This behavior is controlled by the <code dir="ltr">GLOBALS</code> parameter <code dir="ltr">NAMEMATCHIGNORECASE</code>. You can disable fallback name matching with the <code dir="ltr">NAMEMATCHEXACT</code> parameter, or you can keep it enabled but with a warning message by using the <code dir="ltr">NAMEMATCHNOWARNING</code> parameter.</p>
</li>
<li>
<p>Target columns that do not correspond to any source column take default values determined by the database.</p>
</li>
</ul>
<p>If the default mapping cannot be performed, the target column defaults to one of the values shown in <a href="#BCGFABFD">Table 12-5</a>.</p>
<div id="GWUAD903" class="tblhruleformal"><p class="titleintable"><a id="sthref457"></a><a id="BCGFABFD"></a>Table 12-5 Defaults Values for Target Columns</p>
<table class="cellalignment160" title="Defaults Values for Target Columns" summary="This table lists the default values for target columns.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t9">Column Type</th>
<th class="cellalignment161" id="r1c2-t9">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t9" headers="r1c1-t9">
<p>Numeric</p>
</td>
<td class="cellalignment157" headers="r2c1-t9 r1c2-t9">
<p>Zero (0)</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t9" headers="r1c1-t9">
<p>Character or <code dir="ltr">VARCHAR</code></p>
</td>
<td class="cellalignment157" headers="r3c1-t9 r1c2-t9">
<p>Spaces</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t9" headers="r1c1-t9">
<p>Date or Datetime</p>
</td>
<td class="cellalignment157" headers="r4c1-t9 r1c2-t9">
<p>Current date and time</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t9" headers="r1c1-t9">
<p>Columns that can take a <code dir="ltr">NULL</code> value</p>
</td>
<td class="cellalignment157" headers="r5c1-t9 r1c2-t9">
<p>Null</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="BCGFCDGI"></a>
<div id="GWUAD422" class="sect2">
<h3 class="sect2"><span class="secnum">12.6.5</span> Mapping Data <a id="sthref458"></a><a id="sthref459"></a>Types from Column to Column</h3>
<p>The following explains how Oracle GoldenGate maps data types.</p>
<div id="GWUAD423" class="sect3"><a id="sthref460"></a>
<h4 class="sect3"><span class="secnum">12.6.5.1</span> <a id="sthref461"></a>Numeric Columns</h4>
<p>Numeric columns are converted to match the type and scale of the target column. If the scale of the target column is smaller than that of the source, the number is truncated on the right. If the scale of the target column is larger than that of the source, the number is padded with zeros on the right.</p>
<p>You can specify a substitution value for invalid numeric data encountered when mapping number columns by using the <code dir="ltr">REPLACEBADNUM</code> parameter. See <a class="olink GWURF613" href="../../gg-winux/GWURF/gg_parameters129.htm#GWURF613"><span class="italic">Reference for Oracle GoldenGate for Windows and UNIX</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<div id="GWUAD424" class="sect3"><a id="sthref462"></a>
<h4 class="sect3"><span class="secnum">12.6.5.2</span> Character-type Columns</h4>
<p>Character-type columns can accept character-based data types such as <code dir="ltr">VARCHAR</code>, numeric in string form, date and time in string form, and string literals. If the scale of the target column is smaller than that of the source, the column is truncated on the right. If the scale of the target column is larger than that of the source, the column is padded with spaces on the right.</p>
<p>Literals must be enclosed within single quotes.</p>
<p>You can control the response of the Oracle GoldenGate process when a valid code point does not exist for either the source or target character set when mapping character columns by using the <code dir="ltr">REPLACEBADCHAR</code> parameter. See <a class="olink GWURF610" href="../../gg-winux/GWURF/gg_parameters128.htm#GWURF610"><span class="italic">Reference for Oracle GoldenGate for Windows and UNIX</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<div id="GWUAD425" class="sect3"><a id="sthref463"></a>
<h4 class="sect3"><span class="secnum">12.6.5.3</span> <a id="sthref464"></a>Datetime Columns</h4>
<p>Datetime <code dir="ltr">(DATE</code>, <code dir="ltr">TIME</code>, and <code dir="ltr"><a id="sthref465"></a>TIMESTAMP</code>) columns can accept datetime and character columns, as well as string literals. Literals must be enclosed within single quotes. To map a character column to a datetime column, make certain it conforms to the Oracle GoldenGate external SQL format of <code dir="ltr">YYYY-MM-DD HH:MI:SS.FFFFFF.</code></p>
<p>Oracle GoldenGate supports timestamp data from <code dir="ltr">0001-01-03 00:00:00</code> to <code dir="ltr">9999-12-31 23:59:59</code>. If a timestamp is converted from GMT to local time, these limits also apply to the resulting timestamp. Depending on the timezone, conversion may add or subtract hours, which can cause the timestamp to exceed the lower or upper supported limit.</p>
<p>Required precision varies according to the data type and target platform. If the scale of the target column is smaller than that of the source, data is truncated on the right. If the scale of the target column is larger than that of the source, the column is extended on the right with the values for the current date and time.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1061723"></a>
<div id="GWUAD426" class="sect1">
<h2 class="sect1"><span class="secnum">12.7</span> Selecting <a id="sthref466"></a><a id="sthref467"></a><a id="sthref468"></a><a id="sthref469"></a><a id="sthref470"></a><a id="sthref471"></a>and Filtering Rows</h2>
<p>To filter out or select rows for extraction or replication, use the <code dir="ltr">FILTER</code> and <code dir="ltr">WHERE</code> clauses of the <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code> parameters.</p>
<p>The <code dir="ltr">FILTER</code> clause offers you more functionality than the <code dir="ltr">WHERE</code> clause because you can employ any of the Oracle GoldenGate column conversion functions, whereas the <code dir="ltr">WHERE</code> clause accepts basic <code dir="ltr">WHERE</code> operators.</p>
<div id="GWUAD427" class="sect2"><a id="sthref472"></a>
<h3 class="sect2"><span class="secnum">12.7.1</span> Selecting Rows with a <a id="sthref473"></a>FILTER<a id="sthref474"></a> Clause</h3>
<p>Use a <code dir="ltr">FILTER</code> clause to select rows based on a numeric value by using basic operators or one or more Oracle GoldenGate <a id="sthref475"></a>column-<a id="sthref476"></a><a id="sthref477"></a>conversion functions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To filter a column based on a string, use one of the Oracle GoldenGate string functions or use a <code dir="ltr">WHERE</code> clause.</div>
<p><a id="GWUAD428"></a>The syntax for <code dir="ltr">FILTER</code> in a <code dir="ltr">TABLE</code> statement is as follows:</p>
<pre dir="ltr">
TABLE source_table,
, FILTER (
[, ON INSERT | ON UPDATE| ON DELETE]
[, IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE]
, <span class="codeinlineitalic">filter_clause</span>);
</pre>
<p>The sytax for <code dir="ltr">FILTER</code> in a <code dir="ltr">MAP</code> statement is as follows and includes an error-handling option.</p>
<pre dir="ltr">
MAP <span class="codeinlineitalic">source_table</span>, TARGET <span class="codeinlineitalic">target_table</span>,
, FILTER (
[, ON INSERT | ON UPDATE| ON DELETE]
[, IGNORE INSERT | IGNORE UPDATE | IGNORE DELETE]
[, RAISEERROR <span class="codeinlineitalic">error_number</span>]
, <span class="codeinlineitalic">filter_clause</span>);
</pre>
<p>Valid <code dir="ltr">FILTER</code> clause elements are the following:</p>
<ul>
<li>
<p>An Oracle GoldenGate column-conversion function. These functions are built into Oracle GoldenGate so that you can perform tests, manipulate data, retrieve values, and so forth. See <a href="#i1025456">Section 12.12, "Testing and Transforming Data"</a> for more information about Oracle GoldenGate conversion functions.</p>
</li>
<li>
<p>Numbers</p>
</li>
<li>
<p>Columns that contain numbers</p>
</li>
<li>
<p>Functions that return numbers</p>
</li>
<li>
<p>Arithmetic operators:</p>
<ul>
<li>
<p><code dir="ltr">+</code> (plus)</p>
</li>
<li>
<p><code dir="ltr">-</code> (minus)</p>
</li>
<li>
<p><code dir="ltr">*</code> (multiply)</p>
</li>
<li>
<p><code dir="ltr">/</code> (divide)</p>
</li>
<li>
<p><code dir="ltr">\</code> (remainder)</p>
</li>
</ul>
</li>
<li>
<p>Comparison operators:</p>
<ul>
<li>
<p><code dir="ltr">&gt;</code> (greater than)</p>
</li>
<li>
<p><code dir="ltr">&gt;=</code> (greater than or equal)</p>
</li>
<li>
<p><code dir="ltr">&lt;</code> (less than)</p>
</li>
<li>
<p><code dir="ltr">&lt;=</code> (less than or equal)</p>
</li>
<li>
<p><code dir="ltr">=</code> (equal)</p>
</li>
<li>
<p><code dir="ltr">&lt;&gt;</code> (not equal)</p>
</li>
<li>
<p>Results derived from comparisons can be zero (indicating <code dir="ltr">FALSE</code>) or non-zero (indicating <code dir="ltr">TRUE</code>).</p>
</li>
</ul>
</li>
<li>
<p>Parentheses (for grouping results in the expression)</p>
</li>
<li>
<p>Conjunction operators: <code dir="ltr">AND</code>, <code dir="ltr">OR</code></p>
</li>
</ul>
<p>Use the following <code dir="ltr">FILTER</code> options to specify which SQL operations a filter clause affects. Any of these options can be combined.</p>
<p class="synopsis"><code dir="ltr"><a id="sthref478"></a>ON INSERT | <a id="sthref479"></a>ON UPDATE | <a id="sthref480"></a>ON DELETE</code></p>
<p class="synopsis"><code dir="ltr"><a id="sthref481"></a>IGNORE INSERT | <a id="sthref482"></a>IGNORE UPDATE | <a id="sthref483"></a>IGNORE DELETE</code></p>
<p>Use the <code dir="ltr"><a id="sthref484"></a>RAISEERROR</code> option of <code dir="ltr">FILTER</code> in the <code dir="ltr">MAP</code> parameter to generate a user-defined error when the filter fails. This option is useful when you need to trigger an event in response to the failure.</p>
<div id="GWUAD430" class="example"><p class="titleinexample"><a id="sthref485"></a>Example 12-1 Calling the @COMPUTE Function</p>
<p>The following example calls the <a id="sthref486"></a><a id="sthref487"></a><code dir="ltr">@COMPUTE</code> function to extract records in which the price multiplied by the amount exceeds 10,000.</p>
<pre dir="ltr">
MAP SALES.TCUSTORD, TARGET SALES.TORD,
FILTER (@COMPUTE (PRODUCT_PRICE * PRODUCT_AMOUNT) &gt; 10000);
</pre></div>
<!-- class="example" -->
<div id="GWUAD431" class="example"><p class="titleinexample"><a id="sthref488"></a>Example 12-2 Calling the @STREQ Function</p>
<p>The following uses the <code dir="ltr">@STREQ</code> function to extract records where the value of a character column is <code dir="ltr">'JOE'.</code></p>
<pre dir="ltr">
TABLE ACCT.TCUSTORD, FILTER (@STREQ ("Name", 'joe') &gt; 0);
</pre></div>
<!-- class="example" -->
<div id="GWUAD432" class="example"><p class="titleinexample"><a id="sthref489"></a>Example 12-3 Selecting Records</p>
<p>The following selects records in which the <code dir="ltr">AMOUNT</code> column is greater than 50 and executes the filter on <code dir="ltr">UPDATE</code> and <code dir="ltr">DELETE</code> operations.</p>
<pre dir="ltr">
TABLE ACT.TCUSTORD, FILTER (ON UPDATE, ON DELETE, AMOUNT &gt; 50);
</pre></div>
<!-- class="example" -->
<p>You can use the <code dir="ltr">@RANGE</code> function to divide the processing workload among multiple <code dir="ltr">FILTER</code> clauses, using separate <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statements. For example, the following splits the replication workload into two ranges (between two Replicat processes or two threads of a coordinated Replicat) based on the <code dir="ltr">ID</code> column of the source <code dir="ltr">acct</code> table.</p>
<div id="GWUAD433" class="example"><p class="titleinexample"><a id="sthref490"></a>Example 12-4 Using the @RANGE Function</p>
<p>(Replicat group 1 parameter file)</p>
<pre dir="ltr">
MAP sales.acct, TARGET sales.acct, FILTER (@RANGE (1, 2, ID));
</pre>
<p>(Replicat group 2 parameter file)</p>
<pre dir="ltr">
MAP sales.acct, TARGET sales.acct, FILTER (@RANGE (2, 2, ID));
</pre>
<p>You can combine several <code dir="ltr">FILTER</code> clauses in one <code dir="ltr">MAP</code> or <code dir="ltr">TABLE</code> statement, as shown in <a href="#g1110854">Table 12-6</a>, which shows part of a Replicat parameter file. Oracle GoldenGate executes the filters in the order listed, until one fails or until all are passed. If one filter fails, they all fail.</p>
</div>
<!-- class="example" -->
<div id="GWUAD434" class="tblhruleformal"><p class="titleintable"><a id="sthref491"></a><a id="g1110854"></a>Table 12-6 Using Multiple FILTER Statements</p>
<table class="cellalignment160" title="Using Multiple FILTER Statements" summary="This table describes how to use multiple FILTER statements. It lists the parameter file and describes it.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t11">Parameter file</th>
<th class="cellalignment161" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t11" headers="r1c1-t11">
<pre dir="ltr">
REPERROR (9999, EXCEPTION)
</pre></td>
<td class="cellalignment157" headers="r2c1-t11 r1c2-t11">
<p>Raises an exception for the specified error.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t11" headers="r1c1-t11">
<pre dir="ltr">
MAP OWNER.SRCTAB,
TARGET OWNER.TARGTAB,
</pre></td>
<td class="cellalignment157" headers="r3c1-t11 r1c2-t11">
<p>Starts the <code dir="ltr">MAP</code> statement.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t11" headers="r1c1-t11">
<pre dir="ltr">
SQLEXEC (ID CHECK, ON UPDATE,
QUERY ' SELECT COUNT FROM TARGTAB '
'WHERE PKCOL = :P1 ',
PARAMS (P1 = PKCOL)),
</pre></td>
<td class="cellalignment157" headers="r4c1-t11 r1c2-t11">
<p>Performs a query to retrieve the present value of the <code dir="ltr">COUNT</code> column whenever an update is encountered.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t11" headers="r1c1-t11">
<pre dir="ltr">
FILTER (BALANCE &gt; 15000),
</pre></td>
<td class="cellalignment157" headers="r5c1-t11 r1c2-t11">
<p>Uses a <code dir="ltr">FILTER</code> clause to select rows where the balance is greater than 15000.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r6c1-t11" headers="r1c1-t11">
<pre dir="ltr">
FILTER (ON UPDATE, @BEFORE (COUNT) = CHECK.COUNT)
</pre></td>
<td class="cellalignment157" headers="r6c1-t11 r1c2-t11">
<p>Uses another <code dir="ltr">FILTER</code> clause to ensure that the value of the source <code dir="ltr">COUNT</code> column before an update matches the value in the target column before applying the target update.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r7c1-t11" headers="r1c1-t11">
<pre dir="ltr">
;
</pre></td>
<td class="cellalignment157" headers="r7c1-t11 r1c2-t11">
<p>The semicolon concludes the <code dir="ltr">MAP</code> statement.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r8c1-t11" headers="r1c1-t11">
<pre dir="ltr">
MAP OWNER.SRCTAB,
TARGET OWNER.TARGEXC,
EXCEPTIONSONLY,
COLMAP (USEDEFAULTS,
ERRTYPE = 'UPDATE FILTER FAILED');
</pre></td>
<td class="cellalignment157" headers="r8c1-t11 r1c2-t11">
<p>Designates an exceptions <code dir="ltr">MAP</code> statement. The <code dir="ltr">REPERROR</code> clause for error 9999 ensures that the exceptions map to <code dir="ltr">TARGEXC</code> will be executed.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<div id="GWUAD435" class="sect2"><a id="sthref492"></a>
<h3 class="sect2"><span class="secnum">12.7.2</span> Selecting Rows with a <a id="sthref493"></a><a id="sthref494"></a>WHERE Clause</h3>
<p>Use any of the elements in <a href="#g1110882">Table 12-7</a> in a <code dir="ltr">WHERE</code> clause to select or exclude rows (or both) based on a conditional statement. Each <code dir="ltr">WHERE</code> clause must be enclosed within parentheses. Literals must be enclosed within single quotes.</p>
<div id="GWUAD436" class="tblhruleformal"><p class="titleintable"><a id="sthref495"></a><a id="g1110882"></a>Table 12-7 Permissible WHERE Operators</p>
<table class="cellalignment160" title="Permissible WHERE Operators" summary="This table lists the permissible WHERE operators and gives examples of each element.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t12">Element</th>
<th class="cellalignment161" id="r1c2-t12">Examples</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t12" headers="r1c1-t12">
<p>Column names</p>
</td>
<td class="cellalignment157" headers="r2c1-t12 r1c2-t12">
<pre dir="ltr">
PRODUCT_AMT
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t12" headers="r1c1-t12">
<p>Numeric values</p>
</td>
<td class="cellalignment157" headers="r3c1-t12 r1c2-t12">
<pre dir="ltr">
-123, 5500.123
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t12" headers="r1c1-t12">
<p>Literal strings</p>
</td>
<td class="cellalignment157" headers="r4c1-t12 r1c2-t12">
<pre dir="ltr">
'AUTO', 'Ca'
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t12" headers="r1c1-t12">
<p>Built-in column <a id="sthref496"></a>tests</p>
</td>
<td class="cellalignment157" headers="r5c1-t12 r1c2-t12">
<p><code dir="ltr">@NULL</code>, <code dir="ltr">@PRESENT</code>, <code dir="ltr">@ABSENT</code> (column is null, present or absent in the row). These tests are built into Oracle GoldenGate. See <a href="#i1026954">Section 12.7.3, "Considerations for Selecting Rows with FILTER and WHERE"</a>.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r6c1-t12" headers="r1c1-t12">
<p>Comparison operators</p>
</td>
<td class="cellalignment157" headers="r6c1-t12 r1c2-t12">
<p>=, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;<code dir="ltr">=</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r7c1-t12" headers="r1c1-t12">
<p>Conjunctive operators</p>
</td>
<td class="cellalignment157" headers="r7c1-t12 r1c2-t12">
<pre dir="ltr">
AND, OR
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r8c1-t12" headers="r1c1-t12">
<p>Grouping parentheses</p>
</td>
<td class="cellalignment157" headers="r8c1-t12 r1c2-t12">
<p>Use open and close parentheses ( ) for logical grouping of multiple elements.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>Oracle GoldenGate does not support <code dir="ltr">FILTER</code> for columns that have a multi-byte character set or a character set that is incompatible with the character set of the local operating system.</p>
<p>Arithmetic operators and floating-point data types are not supported by <code dir="ltr">WHERE</code>. To use more complex selection conditions, use a <code dir="ltr">FILTER</code> clause or a user exit routine. See <a href="wu_customcode.htm#i1012304">Section 17.3, "Using User Exits to Extend Oracle GoldenGate Capabilities"</a> for more information.</p>
<p><a id="GWUAD437"></a>The syntax for <code dir="ltr">WHERE</code> is identical in the <code dir="ltr">TABLE</code> and <code dir="ltr">MAP</code> statements:</p>
<pre dir="ltr">
TABLE <span class="codeinlineitalic">table</span>, WHERE (<span class="codeinlineitalic">clause</span>);
</pre>
<pre dir="ltr">
MAP <span class="codeinlineitalic">source_table</span>, TARGET <span class="codeinlineitalic">target_table</span>, WHERE (<span class="codeinlineitalic">clause</span>);
</pre></div>
<!-- class="sect2" -->
<a id="i1026954"></a>
<div id="GWUAD438" class="sect2">
<h3 class="sect2"><span class="secnum">12.7.3</span> Considerations for Selecting Rows with FILTER and WHERE</h3>
<p>The following suggestions can help you create a successful selection clause.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The examples in this section assume a case-insensitive database.</div>
<a id="i1047806"></a>
<div id="GWUAD439" class="sect3">
<h4 class="sect3"><span class="secnum">12.7.3.1</span> Ensuring Data Availability for Filters</h4>
<p>If the database only logs <a id="sthref497"></a>values for <span class="italic">changed</span> <a id="sthref498"></a>columns to the transaction log, there can be errors if any of the unchanged columns are referenced by selection criteria. Oracle GoldenGate ignores such row operations, outputs them to the discard file, and issues a <a id="sthref499"></a>warning.</p>
<p>To avoid missing-column errors, create your selection conditions as follows:</p>
<ul>
<li>
<p>Use only primary-key columns as selection criteria, if possible.</p>
</li>
<li>
<p>Make required column values available by enabling supplemental logging for those columns. Alternatively, you can use the <code dir="ltr"><a id="sthref500"></a><a id="sthref501"></a><a id="sthref502"></a><a id="sthref503"></a>FETCHCOLS</code> or <code dir="ltr">FETCHCOLSEXCEPT</code> option of the <code dir="ltr">TABLE</code> parameter. These options are valid for all supported databases except SQL/MX. They query the database to fetch the values if they are not present in the log. To retrieve the values before the <code dir="ltr">FILTER</code> or <code dir="ltr">WHERE</code> clause is executed, include the <code dir="ltr"><a id="sthref504"></a>FETCHBEFOREFILTER</code> option in the <code dir="ltr">TABLE</code> statement before the <code dir="ltr">FILTER</code> or <code dir="ltr">WHERE</code> clause. For example:</p>
<pre dir="ltr">
TABLE DEMO.PEOPLE, FETCHBEFOREFILTER, FETCHCOLS (age), FILTER (age &gt; 50);
</pre></li>
<li>
<p>Test for a column's <a id="sthref505"></a><a id="sthref506"></a><a id="sthref507"></a><a id="sthref508"></a>presence first, then for the column's value. To test for a column's presence, use the following syntax.</p>
<pre dir="ltr">
<span class="codeinlineitalic">column_name</span> {= | &lt;&gt;} {@PRESENT | @ABSENT}
</pre>
<p>The following example returns all records when the <code dir="ltr">amount</code> column is over 10,000 and does not cause a record to be discarded when <code dir="ltr">amount</code> is absent.</p>
<pre dir="ltr">
WHERE (amount = @PRESENT AND amount &gt; 10000)
</pre></li>
</ul>
</div>
<!-- class="sect3" -->
<div id="GWUAD440" class="sect3"><a id="sthref509"></a>
<h4 class="sect3"><span class="secnum">12.7.3.2</span> Comparing <a id="sthref510"></a><a id="sthref511"></a>Column Values</h4>
<p>To ensure that elements used in a comparison match, compare appropriate column types:</p>
<ul>
<li>
<p><a id="sthref512"></a>Character columns to literal strings.</p>
</li>
<li>
<p><a id="sthref513"></a>Numeric columns to numeric values, which can include a sign and decimal point.</p>
</li>
<li>
<p>Date and time columns to literal strings, using the format in which the column is retrieved by the application.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="GWUAD441" class="sect3"><a id="sthref514"></a>
<h4 class="sect3"><span class="secnum">12.7.3.3</span> Testing for NULL <a id="sthref515"></a><a id="sthref516"></a>Values</h4>
<p>To evaluate columns for <code dir="ltr"><a id="sthref517"></a><a id="sthref518"></a><a id="sthref519"></a>NULL</code> values, use the following syntax.</p>
<pre dir="ltr">
<span class="codeinlineitalic">column</span> {= | &lt;&gt;} @NULL
</pre>
<p>The following returns <code dir="ltr">TRUE</code> if the column is <code dir="ltr">NULL</code>, and <code dir="ltr">FALSE</code> for all other cases (including a column missing from the record).</p>
<pre dir="ltr">
WHERE (amount = @NULL)
</pre>
<p>The following returns <code dir="ltr">TRUE</code> only if the column is present in the record and not <code dir="ltr">NULL</code>.</p>
<pre dir="ltr">
WHERE (amount = @PRESENT AND amount &lt;&gt; @NULL)
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABECDFC"></a>
<div id="GWUAD442" class="sect1">
<h2 class="sect1"><span class="secnum">12.8</span> Retrieving <a id="sthref520"></a><a id="sthref521"></a><a id="sthref522"></a>Before and After Values</h2>
<p>For update operations, it can be advantageous to retrieve the <span class="italic">before</span> values of source columns: the values before the update occurred. These values are stored in the trail and can be used in filters and column mappings. For example, you can:</p>
<ul>
<li>
<p>Retrieve the before image of a row as part of a column-mapping specification in an exceptions <code dir="ltr">MAP</code> statement, and map those values to an exceptions table for use in testing or troubleshooting conflict resolution routines.</p>
</li>
<li>
<p>Perform delta <a id="sthref523"></a><a id="sthref524"></a>calculations. For example, if a table has a <a id="sthref525"></a><code dir="ltr">Balance</code> column, you can calculate the net result of a particular transaction by subtracting the original balance from the new balance, as in the following example:</p>
<pre dir="ltr">
MAP "owner"."src", TARGET "owner"."targ",
COLMAP (PK1 = PK1, delta = balance &ndash; @BEFORE (balance));
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The previous example indicates a case-sensitive database such as Oracle. The table names are in quote marks to reflect case-sensitivity.</div>
</li>
</ul>
<p class="subhead2"><a id="GWUAD1103"></a>To Reference the Before Value</p>
<ol>
<li>
<p>Use the <code dir="ltr">@BEFORE</code> column conversion function with the name of the column for which you want a before value, as follows:</p>
<pre dir="ltr">
@BEFORE (<span class="codeinlineitalic">column_name</span>)
</pre></li>
<li>
<p>Use the <code dir="ltr"><a id="sthref526"></a>GETUPDATEBEFORES</code> parameter in the Extract parameter file to capture before images from the transaction record, or use it in the Replicat parameter file to use the before image in a column mapping or filter. If using the Conflict Resolution and Detection (CDR) feature, you can use the <code dir="ltr">GETBEFORECOLS</code> option of <code dir="ltr">TABLE</code>. To use these parameters, all columns must be present in the transaction log. If the database only logs the values of columns that changed, using the <code dir="ltr">@BEFORE</code> function may result in a "column missing" condition and the column map is executed as if the column were not in the record. See <a href="#i1047806">Section 12.7.3.1, "Ensuring Data Availability for Filters"</a> to ensure that column values are available.</p>
<p>Oracle GoldenGate also provides the <code dir="ltr">@AFTER</code> function to retrieve after values when needed for filtering, for use in conversion functions, or other purposes. For more information about <code dir="ltr">@BEFORE</code> and <code dir="ltr">@AFTER</code>, see <a class="olink GWURF747" href="../../gg-winux/GWURF/column_conversion_functions.htm#GWURF747"><span class="italic">Reference for Oracle GoldenGate for Windows and UNIX</span></a>.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BABGJCED"></a>
<div id="GWUAD443" class="sect1">
<h2 class="sect1"><span class="secnum">12.9</span> Selecting <a id="sthref527"></a><a id="sthref528"></a>Columns</h2>
<p>To control which columns of a source table are extracted by Oracle GoldenGate, use the <code dir="ltr"><a id="sthref529"></a>COLS</code> and <code dir="ltr">COLSEXCEPT</code> options of the <code dir="ltr">TABLE</code> parameter. Use <code dir="ltr">COLS</code> to select columns for extraction, and use <code dir="ltr">COLSEXCEPT</code> to select all columns except those designated by <code dir="ltr">COLSEXCEPT</code>.</p>
<p>Restricting the <a id="sthref530"></a><a id="sthref531"></a><a id="sthref532"></a>columns that are extracted can be useful when a target table does not contain the same columns as the source table, or when the columns contain sensitive information, such as a personal identification number or other proprietary business information.</p>
</div>
<!-- class="sect1" -->
<a id="i1000197"></a>
<div id="GWUAD444" class="sect1">
<h2 class="sect1"><span class="secnum">12.10</span> S<a id="sthref533"></a><a id="sthref534"></a><a id="sthref535"></a>electing and Converting SQL Operations</h2>
<p>By default, Oracle GoldenGate captures and applies <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> operations. You can use the following parameters in the Extract or Replicat parameter file to control which kind of operations are processed, such as only inserts or only inserts and updates.</p>
<p><code dir="ltr"><a id="sthref536"></a><a id="sthref537"></a>GETINSERTS | <a id="sthref538"></a>IGNOREINSERTS</code></p>
<p><code dir="ltr"><a id="sthref539"></a><a id="sthref540"></a>GETUPDATES | IGNOREUPDATES</code></p>
<p><code dir="ltr"><a id="sthref541"></a><a id="sthref542"></a>GETDELETES | <a id="sthref543"></a>IGNOREDELETES</code></p>
<p>You can convert one type of SQL operation to another by using the following parameters in the Replicat parameter file:</p>
<ul>
<li>
<p>Use <code dir="ltr"><a id="sthref544"></a><a id="sthref545"></a><a id="sthref546"></a>INSERTUPDATES</code> to convert source update operations to inserts into the target table. This is useful for maintaining a transaction history on that table. The transaction log record must contain all of the column values of the table, not just changed values. Some databases do not log full row values to their transaction log, but only values that changed.</p>
</li>
<li>
<p>Use <code dir="ltr"><a id="sthref547"></a><a id="sthref548"></a><a id="sthref549"></a>INSERTDELETES</code> to convert all source delete operations to inserts into the target table. This is useful for retaining a history of all records that were ever in the <a id="sthref550"></a>source database.</p>
</li>
<li>
<p>Use <code dir="ltr"><a id="sthref551"></a><a id="sthref552"></a>UPDATEDELETES</code> to convert source deletes to updates on the target.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1034022"></a>
<div id="GWUAD445" class="sect1">
<h2 class="sect1"><span class="secnum">12.11</span> Using<a id="sthref553"></a><a id="sthref554"></a> Transaction History</h2>
<p>Oracle GoldenGate enables you to retain a history of changes made to a target record and to map information about the operation that caused each change. This history can be useful for creating a transaction-based reporting system that contains a separate record for every operation performed on a table, as opposed to containing only the most recent version of each record.</p>
<p>For example, the following series of operations made to a target table named <code dir="ltr">CUSTOMER</code> would leave no trace of the ID of <code dir="ltr">Dave</code>. The last operation deletes the record, so there is no way to find out Dave's account history or his ending balance.</p>
<div id="GWUAD446" class="tblhruleformal"><p class="titleintable"><a id="sthref555"></a><a id="g1111011"></a>Table 12-8 Operation History for Table CUSTOMER</p>
<table class="cellalignment160" title="Operation History for Table CUSTOMER" summary="This table gives an example of a series of operations made to a target table named CUSTOMER that will leave no trace of the ID of Dave. There are four columns: Sequence, Operation, ID, Balance.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t15">Sequence</th>
<th class="cellalignment161" id="r1c2-t15">Operation</th>
<th class="cellalignment161" id="r1c3-t15">ID</th>
<th class="cellalignment161" id="r1c4-t15">BALANCE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t15" headers="r1c1-t15">
<p><code dir="ltr">1</code></p>
</td>
<td class="cellalignment157" headers="r2c1-t15 r1c2-t15">
<p><code dir="ltr">Insert</code></p>
</td>
<td class="cellalignment157" headers="r2c1-t15 r1c3-t15">
<p><code dir="ltr">Dave</code></p>
</td>
<td class="cellalignment157" headers="r2c1-t15 r1c4-t15">
<p><code dir="ltr">1000</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t15" headers="r1c1-t15">
<p><code dir="ltr">2</code></p>
</td>
<td class="cellalignment157" headers="r3c1-t15 r1c2-t15">
<p><code dir="ltr">Update</code></p>
</td>
<td class="cellalignment157" headers="r3c1-t15 r1c3-t15">
<p><code dir="ltr">Dave</code></p>
</td>
<td class="cellalignment157" headers="r3c1-t15 r1c4-t15">
<p><code dir="ltr">900</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t15" headers="r1c1-t15">
<p><code dir="ltr">3</code></p>
</td>
<td class="cellalignment157" headers="r4c1-t15 r1c2-t15">
<p><code dir="ltr">Update</code></p>
</td>
<td class="cellalignment157" headers="r4c1-t15 r1c3-t15">
<p><code dir="ltr">Dave</code></p>
</td>
<td class="cellalignment157" headers="r4c1-t15 r1c4-t15">
<p><code dir="ltr">1250</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t15" headers="r1c1-t15">
<p><code dir="ltr">4</code></p>
</td>
<td class="cellalignment157" headers="r5c1-t15 r1c2-t15">
<p><code dir="ltr">Delete</code></p>
</td>
<td class="cellalignment157" headers="r5c1-t15 r1c3-t15">
<p><code dir="ltr">Dave</code></p>
</td>
<td class="cellalignment157" headers="r5c1-t15 r1c4-t15">
<p><code dir="ltr">1250</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>Retaining this history as a series of records can be useful in many ways. For example, you can generate the net effect of transactions.</p>
<p class="subhead2"><a id="GWUAD1104"></a>To implement transaction reporting</p>
<ol>
<li>
<p>To prepare Extract to capture before values, use the <code dir="ltr"><a id="sthref556"></a>GETUPDATEBEFORES</code> parameter in the Extract parameter file. A before value (or before image) is the existing value of a column before an update is performed. Before images enable Oracle GoldenGate to create the transaction record.</p>
</li>
<li>
<p>To prepare Replicat to post all operations as inserts, use the <code dir="ltr"><a id="sthref557"></a><a id="sthref558"></a><a id="sthref559"></a><a id="sthref560"></a>INSERTALLRECORDS</code> parameter in the Replicat parameter file. Each operation on a table becomes a new record in that table.</p>
</li>
<li id="i1035131">
<p>To map the transaction history, use the return values of the <code dir="ltr"><a id="sthref561"></a>GGHEADER</code> option of the <code dir="ltr"><a id="sthref562"></a>@GETENV</code> column conversion function. Include the conversion function as the source expression in a <code dir="ltr">COLMAP</code> statement in the <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> parameter.</p>
</li>
</ol>
<p>Using the sample series of transactions shown in <a href="#g1111011">Table 12-8</a> the following parameter configurations can be created to generate a more transaction-oriented view of customers, rather than the latest state of the database.</p>
<div class="inftblhruleinformal">
<table class="cellalignment160" title="Sample Parameter Configurations" summary="This table provides sample parameter configurations.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t16">Process</th>
<th class="cellalignment161" id="r1c2-t16">Parameter statements</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t16" headers="r1c1-t16">Extract</td>
<td class="cellalignment157" headers="r2c1-t16 r1c2-t16">
<pre dir="ltr">
GETUPDATEBEFORES
TABLE ACCOUNT.CUSTOMER;
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t16" headers="r1c1-t16">Replicat</td>
<td class="cellalignment157" headers="r3c1-t16 r1c2-t16">
<pre dir="ltr">
INSERTALLRECORDS
MAP SALES.CUSTOMER, TARGET SALES.CUSTHIST,
COLMAP (TS = @GETENV ('GGHEADER', 'COMMITTIMESTAMP'),
BEFORE_AFTER = @GETENV ('GGHEADER', 'BEFOREAFTERINDICATOR'),
OP_TYPE = @GETENV ('GGHEADER', 'OPTYPE'),
ID = ID,
BALANCE = BALANCE);
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
This is not representative of a complete parameter file for an Oracle GoldenGate process. Also note that these examples represent a case-insensitive database.</div>
<p>This configuration makes possible queries such as the following, which returns the net sum of each transaction along with the time of the transaction and the customer ID.</p>
<pre dir="ltr">
SELECT AFTER.ID, AFTER.TS, AFTER.BALANCE - BEFORE.BALANCE
FROM CUSTHIST AFTER, CUSTHIST BEFORE
WHERE AFTER.ID = BEFORE.ID AND AFTER.TS = BEFORE.TS AND
AFTER.BEFORE_AFTER = 'A' AND BEFORE.BEFORE_AFTER = 'B';
</pre></div>
<!-- class="sect1" -->
<a id="i1025456"></a>
<div id="GWUAD447" class="sect1">
<h2 class="sect1"><span class="secnum">12.12</span> Testing and Transforming <a id="sthref563"></a><a id="sthref564"></a><a id="sthref565"></a><a id="sthref566"></a>Data</h2>
<p>Data testing and transformation can be performed by either Extract or Replicat and is implemented by using the Oracle GoldenGate built-in column-conversion functions within a <code dir="ltr">COLMAP</code> clause of a <code dir="ltr">TABLE</code> or <code dir="ltr">MAP</code> statement. With these conversion functions, you can:</p>
<ul>
<li>
<p>Transform dates.</p>
</li>
<li>
<p>Test for the presence of column values.</p>
</li>
<li>
<p>Perform arithmetic operations.</p>
</li>
<li>
<p>Manipulate numbers and character strings.</p>
</li>
<li>
<p>Handle null, invalid, and missing data.</p>
</li>
<li>
<p>Perform tests.</p>
</li>
</ul>
<p>This chapter provides an overview of some of the Oracle GoldenGate functions related to data manipulation. For the complete reference, see <a class="olink GWURF" href="../../gg-winux/GWURF/toc.htm"><span class="italic">Reference for Oracle GoldenGate for Windows and UNIX</span></a>.</p>
<p>If you need to use logic beyond that which is supplied by the Oracle GoldenGate functions, you can call your own functions by implementing Oracle GoldenGate user exits. See <a href="wu_customcode.htm#i1012304">Section 17.3, "Using User Exits to Extend Oracle GoldenGate Capabilities"</a> for more information about user exits.</p>
<p>Oracle GoldenGate conversion functions take the following general syntax:</p>
<p class="subhead2"><a id="GWUAD448"></a>Syntax</p>
<pre dir="ltr">
@<span class="codeinlineitalic">function</span> (<span class="codeinlineitalic">argument</span>)
</pre>
<div id="GWUAD449" class="tblhruleformal"><p class="titleintable"><a id="sthref567"></a><a id="sthref568"></a>Table 12-9 Conversion Function Syntax</p>
<table class="cellalignment160" title="Conversion Function Syntax" summary="This table shows conversion function syntax. It lists and describes the syntax elements.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t18">Syntax element</th>
<th class="cellalignment161" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t18" headers="r1c1-t18">
<p class="synopsis">@<code dir="ltr"><span class="codeinlineitalic">function</span></code></p>
</td>
<td class="cellalignment157" headers="r2c1-t18 r1c2-t18">
<p>The Oracle GoldenGate function name. Function names have the prefix <code dir="ltr">@</code>, as in <code dir="ltr">@COMPUTE</code> or <code dir="ltr">@DATE</code>. A space between the function name and the open-parenthesis before the input argument is optional.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t18" headers="r1c1-t18">
<p class="synopsis"><code dir="ltr"><span class="codeinlineitalic">argument</span></code></p>
</td>
<td class="cellalignment157" headers="r3c1-t18 r1c2-t18">
<p>A function argument.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div id="GWUAD450" class="tblhruleformal"><p class="titleintable"><a id="sthref569"></a><a id="sthref570"></a>Table 12-10 Function Arguments</p>
<table class="cellalignment160" title="Function Arguments" summary="This table shows function arguments and gives an example of each.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t19">Argument element</th>
<th class="cellalignment161" id="r1c2-t19">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t19" headers="r1c1-t19">
<p>A numeric constant</p>
</td>
<td class="cellalignment157" headers="r2c1-t19 r1c2-t19">
<pre dir="ltr">
123
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t19" headers="r1c1-t19">
<p>A string literal enclosed within single quote marks</p>
</td>
<td class="cellalignment157" headers="r3c1-t19 r1c2-t19">
<pre dir="ltr">
'ABCD'
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t19" headers="r1c1-t19">
<p>The name of a source column</p>
</td>
<td class="cellalignment157" headers="r4c1-t19 r1c2-t19">
<pre dir="ltr">
PHONE_NO or phone_no, or "Phone_No" or Phone_no
</pre>
<p>Depends on whether the database is case-insensitive, is case-sensitive and requires quote marks to enforce the case, or is case-sensitive and does not require quotes.</p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t19" headers="r1c1-t19">
<p>An arithmetic expression</p>
</td>
<td class="cellalignment157" headers="r5c1-t19 r1c2-t19">
<pre dir="ltr">
COL2 * 100
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r6c1-t19" headers="r1c1-t19">
<p>A comparison expression</p>
</td>
<td class="cellalignment157" headers="r6c1-t19 r1c2-t19">
<pre dir="ltr">
((COL3 &gt; 100) AND (COL4 &gt; 0))
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r7c1-t19" headers="r1c1-t19">
<p>Other Oracle GoldenGate functions</p>
</td>
<td class="cellalignment157" headers="r7c1-t19 r1c2-t19">
<pre dir="ltr">
AMOUNT = @IF (@COLTEST (AMT, MISSING, INVALID), 0, AMT)
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div id="GWUAD451" class="sect2"><a id="sthref571"></a>
<h3 class="sect2"><span class="secnum">12.12.1</span> Handling Column Names and Literals in Functions</h3>
<p>By default, literal strings must be enclosed in single quotes in a column-conversion function. Case-sensitive column names must be enclosed within double quotes if required by the database, or otherwise entered in the case in which they are stored in the database.</p>
</div>
<!-- class="sect2" -->
<div id="GWUAD452" class="sect2"><a id="sthref572"></a>
<h3 class="sect2"><span class="secnum">12.12.2</span> Using the Appropriate Function</h3>
<p>Use the appropriate function for the type of column that is being manipulated or evaluated. For example, numeric functions can be used only to compare numeric values. To compare character values, use one of the Oracle GoldenGate character-comparison functions. LOB columns cannot be used in conversion functions.</p>
<p>This statement would fail because it uses <code dir="ltr">@IF</code>, which is a numerical function, to compare string values.</p>
<pre dir="ltr">
@IF (SR_AREA = 'Help Desk', 'TRUE', 'FALSE')
</pre>
<p>The following statement would succeed because it compares a numeric value.</p>
<pre dir="ltr">
@IF (SR_AREA = 20, 'TRUE', 'FALSE')
</pre>
<p>See <a href="#i1000705">Section 12.12.5, "Manipulating Numbers and Character Strings"</a> for more information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Errors in argument parsing sometimes are not detected until records are processed. Verify syntax before starting processes.</div>
</div>
<!-- class="sect2" -->
<div id="GWUAD453" class="sect2"><a id="sthref573"></a>
<h3 class="sect2"><span class="secnum">12.12.3</span> Transforming <a id="sthref574"></a>Dates</h3>
<p>Use the <code dir="ltr">@DATE</code>, <code dir="ltr">@DATEDIF</code>, and <code dir="ltr">@DATENOW</code> functions to retrieve dates and times, perform computations on them, and convert them.</p>
<p>This example computes the time that an order is filled</p>
<div id="GWUAD454" class="example"><p class="titleinexample"><a id="sthref575"></a>Example 12-5 Computing Time</p>
<pre dir="ltr">
ORDER_FILLED = @DATE (
    'YYYY-MM-DD HH:MI:SS',
    'JTS',
    @DATE ('JTS',
    'YYMMDDHHMISS',
    ORDER_TAKEN_TIME) +
    ORDER_MINUTES * 60 * 1000000)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="GWUAD455" class="sect2"><a id="sthref576"></a>
<h3 class="sect2"><span class="secnum">12.12.4</span> Performing <a id="sthref577"></a>Arithmetic Operations</h3>
<p>To return the result of an arithmetic expression, use the <a id="sthref578"></a><a id="sthref579"></a><code dir="ltr">@COMPUTE</code> function. The value returned from the function is in the form of a string. Arithmetic expressions can be combinations of the following elements.</p>
<ul>
<li>
<p>Numbers</p>
</li>
<li>
<p>The names of columns that contain numbers</p>
</li>
<li>
<p>Functions that return numbers</p>
</li>
<li>
<p>Arithmetic operators:</p>
<ul>
<li>
<p><code dir="ltr">+</code> (plus)</p>
</li>
<li>
<p><code dir="ltr">-</code> (minus)</p>
</li>
<li>
<p><code dir="ltr">*</code> (multiply)</p>
</li>
<li>
<p><code dir="ltr">/</code> (divide)</p>
</li>
<li>
<p><code dir="ltr">\</code> (remainder)</p>
</li>
</ul>
</li>
<li>
<p>Comparison operators:</p>
<ul>
<li>
<p><code dir="ltr">&gt;</code> (greater than)</p>
</li>
<li>
<p><code dir="ltr">&gt;=</code> (greater than or equal)</p>
</li>
<li>
<p><code dir="ltr">&lt;</code> (less than)</p>
</li>
<li>
<p><code dir="ltr">&lt;=</code> (less than or equal)</p>
</li>
<li>
<p><code dir="ltr">=</code> (equal)</p>
</li>
<li>
<p><code dir="ltr">&lt;&gt;</code> (not equal)</p>
</li>
</ul>
<p>Results that are derived from comparisons can be zero (indicating <code dir="ltr">FALSE</code>) or non-zero (indicating <code dir="ltr">TRUE</code>).</p>
</li>
<li>
<p>Parentheses (for grouping results in the expression)</p>
</li>
<li>
<p>The conjunction operators <code dir="ltr">AND</code>, <code dir="ltr">OR</code>. Oracle GoldenGate only evaluates the necessary part of a conjunction expression. Once a statement is <code dir="ltr">FALSE</code>, the rest of the expression is ignored. This can be valuable when evaluating fields that may be missing or null. For example, if the value of <code dir="ltr">COL1</code> is 25 and the value of <code dir="ltr">COL2</code> is 10, then the following are possible:</p>
<pre dir="ltr">
@COMPUTE ( (COL1 &gt; 0) AND (COL2 &lt; 3) ) returns 0.
@COMPUTE ( (COL1 &lt; 0) AND (COL2 &lt; 3) ) returns 0. COL2 &lt; 3 is never evaluated.
@COMPUTE ((COL1 + COL2)/5) returns 7.
</pre></li>
</ul>
<div id="GWUAD456" class="sect3"><a id="sthref580"></a>
<h4 class="sect3"><span class="secnum">12.12.4.1</span> Omitting @COMPUTE</h4>
<p>The <code dir="ltr">@COMPUTE</code> keyword is not required when an expression is passed as a function argument.</p>
<pre dir="ltr">
@STRNUM ((AMOUNT1 + AMOUNT2), LEFT)
</pre>
<p>The following expression returns the same result as the previous one:</p>
<pre dir="ltr">
@STRNUM ((@COMPUTE (AMOUNT1 + AMOUNT2), LEFT)
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1000705"></a>
<div id="GWUAD457" class="sect2">
<h3 class="sect2"><span class="secnum">12.12.5</span> Manipulating <a id="sthref581"></a><a id="sthref582"></a>Numbers and Character <a id="sthref583"></a>Strings</h3>
<p>To convert<a id="sthref584"></a> numbers and character strings, Oracle GoldenGate supplies the following functions:</p>
<div id="GWUAD458" class="tblhruleformal"><p class="titleintable"><a id="sthref585"></a><a id="sthref586"></a>Table 12-11 Conversion Functions for Numbers and Characters</p>
<table class="cellalignment160" title="Conversion Functions for Numbers and Characters" summary="This table shows conversion functions for numbers and characters. The left column gives the purpose and the right column lists the conversion function.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t21">Purpose</th>
<th class="cellalignment161" id="r1c2-t21">Conversion Function</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t21" headers="r1c1-t21">
<p>Convert a binary or character string to a number.</p>
</td>
<td class="cellalignment157" headers="r2c1-t21 r1c2-t21">
<p><a id="sthref587"></a><a id="sthref588"></a><code dir="ltr">@NUMBIN</code></p>
<p><code dir="ltr">@<a id="sthref589"></a>NUMSTR</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t21" headers="r1c1-t21">
<p>Convert a number to a string.</p>
</td>
<td class="cellalignment157" headers="r3c1-t21 r1c2-t21">
<p><a id="sthref590"></a><a id="sthref591"></a><code dir="ltr">@STRNUM</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t21" headers="r1c1-t21">
<p>Compare strings.</p>
</td>
<td class="cellalignment157" headers="r4c1-t21 r1c2-t21">
<p><code dir="ltr">@STRCMP</code></p>
<p><code dir="ltr">@STRNCMP</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t21" headers="r1c1-t21">
<p>Concatenate strings.</p>
</td>
<td class="cellalignment157" headers="r5c1-t21 r1c2-t21">
<p><code dir="ltr">@STRCAT</code></p>
<p><code dir="ltr">@STRNCAT</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r6c1-t21" headers="r1c1-t21">
<p>Extract from a string.</p>
</td>
<td class="cellalignment157" headers="r6c1-t21 r1c2-t21">
<p><code dir="ltr">@STREXT</code></p>
<p><code dir="ltr">@STRFIND</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r7c1-t21" headers="r1c1-t21">
<p>Return the length of a string.</p>
</td>
<td class="cellalignment157" headers="r7c1-t21 r1c2-t21">
<p><code dir="ltr">@STRLEN</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r8c1-t21" headers="r1c1-t21">
<p>Substitute one string for another.</p>
</td>
<td class="cellalignment157" headers="r8c1-t21 r1c2-t21">
<p><code dir="ltr">@STRSUB</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r9c1-t21" headers="r1c1-t21">
<p>Convert a string to upper case.</p>
</td>
<td class="cellalignment157" headers="r9c1-t21 r1c2-t21">
<p><code dir="ltr">@STRUP</code></p>
</td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r10c1-t21" headers="r1c1-t21">
<p>Trim leading or trailing spaces, or both.</p>
</td>
<td class="cellalignment157" headers="r10c1-t21 r1c2-t21">
<p><code dir="ltr">@STRLTRIM</code></p>
<p><code dir="ltr">@STRRTRIM</code></p>
<p><code dir="ltr">@STRTRIM</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<div id="GWUAD459" class="sect2"><a id="sthref592"></a>
<h3 class="sect2"><span class="secnum">12.12.6</span> Handling Null, Invalid, and Missing Data</h3>
<p><a id="sthref593"></a><a id="sthref594"></a><a id="sthref595"></a><a id="sthref596"></a>When column data is missing, invalid, or null, an Oracle GoldenGate conversion function returns a corresponding <a id="sthref597"></a>value.</p>
<p>If <code dir="ltr">BALANCE</code> is <code dir="ltr">1000</code>, but <code dir="ltr">AMOUNT</code> is <code dir="ltr">NULL</code>, the following expression returns <code dir="ltr">NULL</code>:</p>
<pre dir="ltr">
NEW_BALANCE = @COMPUTE (BALANCE + AMOUNT)
</pre>
<p>These exception conditions render the entire calculation invalid. To ensure a successful conversion, use the <code dir="ltr"><a id="sthref598"></a><a id="sthref599"></a>@COLSTAT,</code> <code dir="ltr"><a id="sthref600"></a><a id="sthref601"></a>@COLTEST</code> and <code dir="ltr">@IF</code> functions to test for, and override, the exception condition.</p>
<div id="GWUAD460" class="sect3"><a id="sthref602"></a>
<h4 class="sect3"><span class="secnum">12.12.6.1</span> Using <a id="sthref603"></a><a id="sthref604"></a>@COLSTAT</h4>
<p>Use the <code dir="ltr">@COLSTAT</code> function to return an indicator to Extract or Replicat that a column is missing, null, or invalid. The indicator can be used as part of a larger manipulation formula that uses additional conversion functions.</p>
<p>The following example returns a <code dir="ltr">NULL</code> into target column <code dir="ltr">ITEM</code>.</p>
<pre dir="ltr">
ITEM = @COLSTAT (NULL)
</pre>
<p>The following <code dir="ltr">@IF</code> calculation uses <code dir="ltr">@COLSTAT</code> to return <code dir="ltr">NULL</code> to the target column if <code dir="ltr">PRICE</code> and <code dir="ltr">QUANTITY</code> are less than zero.</p>
<pre dir="ltr">
ORDER_TOTAL = PRICE * QUANTITY, @IF ((PRICE &lt; 0) AND (QUANTITY &lt; 0), @COLSTAT (NULL))
</pre></div>
<!-- class="sect3" -->
<div id="GWUAD461" class="sect3"><a id="sthref605"></a>
<h4 class="sect3"><span class="secnum">12.12.6.2</span> Using @COLTEST<a id="sthref606"></a><a id="sthref607"></a><a id="sthref608"></a></h4>
<p>Use the <code dir="ltr">@COLTEST</code> function to check for the following conditions:</p>
<ul>
<li>
<p><code dir="ltr">PRESENT</code> tests whether a column is present and not null.</p>
</li>
<li>
<p><code dir="ltr">NULL</code> tests whether a column is present and null.</p>
</li>
<li>
<p><code dir="ltr">MISSING</code> tests whether a column is not present.</p>
</li>
<li>
<p><code dir="ltr">INVALID</code> tests whether a column is present but contains invalid data.</p>
</li>
</ul>
<p>The following example checks whether the <code dir="ltr">AMOUNT</code> column is present and <code dir="ltr">NULL</code> and whether it is present but invalid.</p>
<pre dir="ltr">
@COLTEST (AMOUNT, NULL, INVALID)
</pre></div>
<!-- class="sect3" -->
<div id="GWUAD462" class="sect3"><a id="sthref609"></a>
<h4 class="sect3"><span class="secnum">12.12.6.3</span> Using <a id="sthref610"></a><a id="sthref611"></a>@IF</h4>
<p>Use the <code dir="ltr">@IF</code> function to return one of two values based on a condition. Use it with the <code dir="ltr">@COLSTAT</code> and <code dir="ltr">@COLTEST</code> functions to begin a conditional argument that tests for one or more exception conditions and then directs processing based on the results of the test.</p>
<pre dir="ltr">
NEW_BALANCE = @IF (@COLTEST (BALANCE, NULL, INVALID) OR
@COLTEST (AMOUNT, NULL, INVALID), @COLSTAT (NULL), BALANCE + AMOUNT)
</pre>
<p>This conversion returns one of the following:</p>
<ul>
<li>
<p><code dir="ltr">NULL</code> when <code dir="ltr">BALANCE</code> or <code dir="ltr">AMOUNT</code> is <code dir="ltr">NULL</code> or <code dir="ltr">INVALID</code></p>
</li>
<li>
<p><code dir="ltr">MISSING</code> when either column is missing</p>
</li>
<li>
<p>The sum <a id="sthref612"></a><a id="sthref613"></a>of the columns.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="GWUAD463" class="sect2"><a id="sthref614"></a>
<h3 class="sect2"><span class="secnum">12.12.7</span> Performing <a id="sthref615"></a>Tests</h3>
<p>The <code dir="ltr">@CASE, @VALONEOF,</code> and <code dir="ltr">@EVAL</code> functions provide additional methods for performing tests on data before manipulating or mapping it.</p>
<div id="GWUAD464" class="sect3"><a id="sthref616"></a>
<h4 class="sect3"><span class="secnum">12.12.7.1</span> Using <a id="sthref617"></a>@CASE</h4>
<p>Use <code dir="ltr">@CASE</code> to select a value depending on a series of value tests.</p>
<pre dir="ltr">
@CASE (PRODUCT_CODE, 'CAR', 'A car', 'TRUCK', 'A truck')
</pre>
<p>This example returns the following:</p>
<ul>
<li>
<p><code dir="ltr">A car</code> if <code dir="ltr">PRODUCT_CODE</code> is <code dir="ltr">CAR</code></p>
</li>
<li>
<p><code dir="ltr">A truck</code> if <code dir="ltr">PRODUCT_CODE</code> is <code dir="ltr">TRUCK</code></p>
</li>
<li>
<p>A <code dir="ltr">FIELD_MISSING</code> indication if <code dir="ltr">PRODUCT_CODE</code> fits neither of the other conditions</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="GWUAD465" class="sect3"><a id="sthref618"></a>
<h4 class="sect3"><span class="secnum">12.12.7.2</span> Using <a id="sthref619"></a><a id="sthref620"></a>@VALONEOF</h4>
<p>Use <code dir="ltr">@VALONEOF</code> to compare a column or string to a list of values.</p>
<pre dir="ltr">
@IF (@VALONEOF (STATE, 'CA', 'NY'), 'COAST', 'MIDDLE')
</pre>
<p>In this example, if <code dir="ltr">STATE</code> is <code dir="ltr">CA</code> or <code dir="ltr">NY</code>, the expression returns <code dir="ltr">COAST</code>, which is the response returned by <code dir="ltr">@IF</code> when the value is non-zero (meaning <code dir="ltr">TRUE</code>).</p>
</div>
<!-- class="sect3" -->
<div id="GWUAD466" class="sect3"><a id="sthref621"></a>
<h4 class="sect3"><span class="secnum">12.12.7.3</span> Using <a id="sthref622"></a>@EVAL</h4>
<p>Use <code dir="ltr">@EVAL</code> to select a value based on a series of independent conditional tests.</p>
<pre dir="ltr">
@EVAL (AMOUNT &gt; 10000, 'high amount', AMOUNT &gt; 5000, 'somewhat high')
</pre>
<p>This example returns the following:</p>
<ul>
<li>
<p><code dir="ltr">high amount</code> if <code dir="ltr">AMOUNT</code> is greater than <code dir="ltr">10000</code></p>
</li>
<li>
<p><code dir="ltr">somewhat high</code> if <code dir="ltr">AMOUNT</code> is greater than <code dir="ltr">5000</code>, and less than or equal to <code dir="ltr">10000</code>, (unless the prior condition was satisfied)</p>
</li>
<li>
<p>A <code dir="ltr">FIELD_MISSING</code> indication if neither condition is satisfied.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1000834"></a>
<div id="GWUAD467" class="sect1">
<h2 class="sect1"><span class="secnum">12.13</span> Using <a id="sthref623"></a><a id="sthref624"></a><a id="sthref625"></a>Tokens</h2>
<p>You can capture and store data within the <span class="italic"><a id="sthref626"></a>user token</span> area of a trail record <a id="sthref627"></a>header. Token data can be retrieved and used in many ways to customize the way that Oracle GoldenGate delivers information. For example, you can use token data in:</p>
<ul>
<li>
<p>Column maps</p>
</li>
<li>
<p>Stored procedures called by a <code dir="ltr">SQLEXEC</code> statement</p>
</li>
<li>
<p>User exits</p>
</li>
<li>
<p>Macros</p>
</li>
</ul>
<div id="GWUAD468" class="sect2"><a id="sthref628"></a>
<h3 class="sect2"><span class="secnum">12.13.1</span> Defining Tokens</h3>
<p>To use tokens, you define the token name and associate it with data. The data can be any valid character data or values retrieved from Oracle GoldenGate column-conversion functions.</p>
<p>The token area in the record header permits up to 2,000 bytes of data. Token names, the length of the data, and the data itself must fit into that space.</p>
<p>To define a token, use the <code dir="ltr">TOKENS</code> option of the <code dir="ltr">TABLE</code> parameter in the Extract parameter file.</p>
<p class="subhead2"><a id="GWUAD469"></a>Syntax</p>
<pre dir="ltr">
TABLE <span class="codeinlineitalic">table_spec</span>, <a id="sthref629"></a>TOKENS (<span class="codeinlineitalic">token_name</span> = <span class="codeinlineitalic">token_data</span> [, ...]);
</pre>
<p>Where:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">table_spec</span></code> is the name of the source table. A container or catalog name, if applicable, and an owner name must precede the table name.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">token_name</span></code> is a name of your choice for the token. It can be any number of alphanumeric characters and is not <a id="sthref630"></a>case-sensitive.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">token_data</span></code> is a character string of up to 2000 bytes. The data can be either a string that is enclosed within single quotes or the result of an Oracle GoldenGate column-conversion function. The character set of token data is not converted. The token must be in the character set of the source database for Extract and in the character set of the target database for Replicat. In the trail file, user tokens are stored in UTF-8.</p>
</li>
</ul>
<pre dir="ltr">
TABLE ora.oratest, TOKENS (
TK-OSUSER = @GETENV ('GGENVIRONMENT' , 'OSUSERNAME'),
TK-GROUP = @GETENV ('GGENVIRONMENT' , 'GROUPNAME')
TK-HOST =  @GETENV('GGENVIRONMENT' , 'HOSTNAME'));
</pre>
<p>As shown in this example, the Oracle GoldenGate <code dir="ltr"><a id="sthref631"></a>@GETENV</code> function is an effective way to populate token data. This function provides several options for capturing environment information that can be mapped to tokens and then used on the target system for column mapping.</p>
</div>
<!-- class="sect2" -->
<div id="GWUAD470" class="sect2"><a id="sthref632"></a>
<h3 class="sect2"><span class="secnum">12.13.2</span> Using Token Data in Target Tables</h3>
<p>To map token data to a target table, use the <code dir="ltr"><a id="sthref633"></a>@TOKEN</code> column-conversion function in the source expression of a <code dir="ltr">COLMAP</code> clause in a Replicat <code dir="ltr">MAP</code> statement. The <code dir="ltr">@TOKEN</code> function provides the name of the token to map. The <code dir="ltr">COLMAP</code> syntax with <code dir="ltr">@TOKEN</code> is:</p>
<p class="subhead2"><a id="GWUAD471"></a>Syntax</p>
<pre dir="ltr">
COLMAP (<span class="codeinlineitalic">target_column</span> = @TOKEN ('<span class="codeinlineitalic">token_name</span>'))
</pre>
<p>The following <code dir="ltr">MAP</code> statement maps target columns <code dir="ltr">host</code>, <code dir="ltr">gg_group</code>, and so forth to tokens <code dir="ltr">tk-host</code>, <code dir="ltr">tk-group</code>, and so forth. Note that the arguments must be enclosed within single quotes.</p>
<div id="GWUAD472" class="example"><p class="titleinexample"><a id="sthref634"></a>Example 12-6 MAP Statement</p>
<pre dir="ltr">
MAP ora.oratest, TARGET ora.rpt,
COLMAP (USEDEFAULTS,
host = @token ('tk-host'),
gg_group = @token ('tk-group'),
osuser= @token ('tk-osuser'),
domain = @token ('tk-domain'),
ba_ind= @token ('tk-ba_ind'),
commit_ts = @token ('tk-commit_ts'),
pos = @token ('tk-pos'),
rba = @token ('tk-rba'),
tablename = @token ('tk-table'),
optype = @token ('tk-optype'));
</pre>
<p>The tokens in this example will look similar to the following within the record header in the trail:</p>
</div>
<!-- class="example" -->
<div class="inftblhruleinformal">
<table class="cellalignment160" title="Example Tokens" summary="This table shows user tokens and values.">
<thead>
<tr class="cellalignment151">
<th class="cellalignment161" id="r1c1-t22">User tokens</th>
<th class="cellalignment161" id="r1c2-t22">Values</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment151">
<td class="cellalignment157" id="r2c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-host
</pre></td>
<td class="cellalignment157" headers="r2c1-t22 r1c2-t22">
<pre dir="ltr">
:sysA
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r3c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-group
</pre></td>
<td class="cellalignment157" headers="r3c1-t22 r1c2-t22">
<pre dir="ltr">
:extora
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r4c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-osuser
</pre></td>
<td class="cellalignment157" headers="r4c1-t22 r1c2-t22">
<pre dir="ltr">
:jad
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r5c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-domain
</pre></td>
<td class="cellalignment157" headers="r5c1-t22 r1c2-t22">
<pre dir="ltr">
:admin
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r6c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-ba_ind
</pre></td>
<td class="cellalignment157" headers="r6c1-t22 r1c2-t22">
<pre dir="ltr">
:B
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r7c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-commit_ts
</pre></td>
<td class="cellalignment157" headers="r7c1-t22 r1c2-t22">
<pre dir="ltr">
:2011-01-24 17:08:59.000000
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r8c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-pos
</pre></td>
<td class="cellalignment157" headers="r8c1-t22 r1c2-t22">
<pre dir="ltr">
:3604496
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r9c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-rba
</pre></td>
<td class="cellalignment157" headers="r9c1-t22 r1c2-t22">
<pre dir="ltr">
:4058
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r10c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-table
</pre></td>
<td class="cellalignment157" headers="r10c1-t22 r1c2-t22">
<pre dir="ltr">
:oratest
</pre></td>
</tr>
<tr class="cellalignment151">
<td class="cellalignment157" id="r11c1-t22" headers="r1c1-t22">
<pre dir="ltr">
tk-optype
</pre></td>
<td class="cellalignment157" headers="r11c1-t22 r1c2-t22">
<pre dir="ltr">
:insert
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment150">
<tr>
<td class="cellalignment157"><table class="cellalignment155">
<tr>
<td class="cellalignment154"><a href="wu_security.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>

<td class="cellalignment154"><a href="wu_data_definitions.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table></td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2013, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment159">
<table class="cellalignment153">
<tr>
<td class="cellalignment154"><a href="../../index.html"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment154"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment154"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment154"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
